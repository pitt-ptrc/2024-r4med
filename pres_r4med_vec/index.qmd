---
title: "R for Medical Research"
subtitle: "Vector Manipulation"
author: "Matt Broerman"
date: "October 10, 2022"
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    theme: [simple, custom.scss]
execute:
  echo: true
---

```{r include=FALSE}
library(tidyverse)
```

## Basics 

"Vector" can mean a lot of things. Here I mean just an ordered list of things that may repeat, usually all numbers, all characters, or all dates.

```{r}
(v1 <- c("1", "2", "3"))
(v2 <- c("a", "b", "c"))
(v3 <- c(1, 2, 3))
(v4 <- list("1", "2", "3"))
```

Usually we mean `v1`, `v2`, `v3`. In `R`, lists are very important, but more general, and so good for doing complex things to complex objects. For another day!

## Uses

A vector can have names, and you can do math on them.

```{r}
names(v3) <- v2
v3

mean(v3)
```

Vectors of equal length make up a `tibble` or `data.frame`. Then we don't care about the names.

```{r}
df <- tibble(v1, v2, v3)
df
```

Notice that `v1` and `v3` are different types.

## Load Data

Today we will use these vectors.

```{r}
set.seed(123)

id <- paste0("id", seq(1:6))

dob <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by="day"), 6)
dod <- sample(seq(as.Date('2016/01/01'), as.Date('2017/01/01'), by="day"), 6) |> as.character()

weight <- rnorm(n = 6, mean = 170, sd = 5)

trt1 <- sample(c("trt1", "crl1"), 6, replace = TRUE)
trt2 <- sample(c("trt2", "crl2"), 6, replace = TRUE)

med <- paste(
  sample(c("10", "100", "5"), 6, replace = TRUE), 
  sample(c("ml", "units", "Ml"), 6, replace = TRUE), 
  sep = " "
)
```

Any guesses about what is going on here?

## View data

```{r}
tibble(id,
       dob,
       dod,
       trt1,
       trt2,
       med,
       weight)
```

## Numbers

```{r, error=TRUE}
weight

weight |> max()
weight |> n_distinct()
ifelse(weight > 170, "more", "less")
```

## Characters

```{r, message=FALSE}
library(stringr)
```

## Basics

```{r}
id |> toupper()
med |> str_detect("ml")
med |> str_split(pattern = " ")
```

What explains the last result?

## More Common

The problem is we want to manipulate these in the context of a dataset.

```{r}
tibble(med) |> 
  separate(med, into = c("amount", "unit"), sep = " ") |> 
  mutate(amount = amount |> as.numeric())
```

# Dates

```{r, message=FALSE}
library(lubridate)
```

## Warning

::: callout-note
Arithmetic with dates is not intuitive and a major source of errors. 
:::

## Basics

```{r, error=TRUE}
# 
"2020-05-01" |> as.Date()
"May 1, 2020" |> as.Date()
"May 1, 2020" |> lubridate::mdy()

# vector math, beware
(dod |> as.Date() - dob)
```

## More common

```{r}
tibble(dod, dob) |> 
  mutate(dod = as.Date(dod)) |>
  mutate(intv = interval(dob, dod)) |> 
  mutate(age = intv / years(1))
```

---
title: "Tutorial: scRNAseq with Census"
author: "Matt Broerman"
editor: source
self-contained: true
execute: 
  warning: false
---

```{r message=FALSE}
# single cell packages
library(cellxgene.census)
library(tiledbsoma)
library(SingleCellExperiment)

# metadata wrangling
library(arrow)
library(dplyr)
library(stringr)
library(glue)
library(tibble)
library(tidyr)

# differential expression
library(edgeR)
library(scuttle)
library(ggplot2)
```

## Summary

This tutorial will introduce you 

1. the Human Lung Cell Atlas (HLCA), 
1. `{cellxgene.census}`, a  nice way to access it, 
1. The idea of differential expression (DE) for single-cell data.


> The full HLCA includes 35 further datasets that include donors with various lung diseases. These datasets were mapped onto the core with scArches, and include disease annotations as well as consensus cell type labels transferred from the HLCA core onto the mapped datasets.

CellxGene Census, from the Chan Zuckerburg Initiative, organizes single-cell data and metadata across studies and consortia, now primarily RNA sequence data. It also supports DNA methylation data is hosting more of them.

If you haven't worked with single-cell data, there are three main components to keep in mind:

1. Counts data (python `X`, R: `assay()`)
2. Gene data (python: `var`, R:`rowData()`)
3. Sample data (python: `obs`, R: `colData()`)

Unfortunately, R and python communities tend to transpose 2 and 3. Since the census is python-first, we need to keep that in mind. 

Beyond this, there are multiple ways to annotate 2 and 3 like clusters and PCA, which gives you the picture below:

![](assets/anndata_schema.svg){width=50%}

## Census metadata

```{r}
census <- open_soma(census_version = "2023-12-15")
```


First we search the `census_info` at the top level for `id`s by which to query, such as `ontology_term_id` or `dataset_id`

### By study

```{r}
global_study_query <- census$get("census_info")$get("datasets")

study_sum <- global_study_query$read()$concat()

study_sum |> 
  as_tibble() |> 
  filter(str_detect(dataset_title, "lung|Lung")) |> 
  select(dataset_id, dataset_title, n_cell = dataset_total_cell_count) |> 
  arrange(-n_cell)
```

### By ontogolgy term

Usually, using a term across studies can be hazardous, since nothing guarantees that the term means the same thing across studies. So for instance, "club cell" may mean different things depending on the year or lab of the study. 

On the other hand, it is powerful to compare across studies if the comparison is legitimate. And the work of organizing this cross-study metadata has been taken care of for us with a standardize "ontology." 

```{r}
global_cell_query <- census$get("census_info")$get("summary_cell_counts")

cell_sum <- global_cell_query$read()$concat()

cell_sum |> 
  as_tibble() |> 
  filter(category == "tissue_general") |> 
  filter(organism == "Homo sapiens") |> 
  select(ontology_term_id, unique_cell_count, label) |> 
  arrange(-unique_cell_count)

cell_sum |> 
  as_tibble() |> 
  filter(category == "cell_type") |> 
  filter(organism == "Homo sapiens") |> 
  select(ontology_term_id, unique_cell_count, label) |> 
  arrange(-unique_cell_count)

cell_sum |> 
  as_tibble() |> 
  filter(category == "disease") |> 
  filter(organism == "Homo sapiens") |> 
  select(ontology_term_id, unique_cell_count, label) |> 
  arrange(-unique_cell_count)
```

## Census data

Once we have settled on a set of studies and ontology terms to query, it is helpful to inspect the associated metadata of the studies, for two reasons:

1. Inspect the genes and other metadata of data we wish to pull quickly
2. Avoid lengthy queries of the single-cell data

The first step retrieves an arrow dataset, which despite being large (~500mb) is fast. The second step in our example retrieves a genomic data set, which despite being small (~5mb) is slow because it is queried against a much larger less optimized database. 

### Query genes

First, let's see all the genes used in our selected study, the HCLA:

```{r}
query <- census$get("census_data")$get("homo_sapiens")$axis_query(
  measurement_name = "RNA"
)

genes_df <- query$var(column_names = c("feature_id", "feature_name"))$concat()
genes_df <- as_tibble(genes_df)
n_genes <- nrow(genes_df)

genes_df
```

For this tutorial, of those above, we will pull only some genes involved in lung mucus and cystic fibrosis. 


| Gene Symbol | Description                              | Associated Cell Type(s)                         |
|-------------|------------------------------------------|-------------------------------------------------|
| CFTR        | Cystic Fibrosis Transmembrane Conductance Regulator | Epithelial cells in the lungs, pancreas, and other organs |
| MSH2        | MutS Homolog 2                           | Various, including cells in the immune and gastrointestinal systems |
| MSH6        | MutS Homolog 6                           | Various, including cells in the immune and gastrointestinal systems |
| TGFB1       | Transforming Growth Factor Beta 1       | Various, including immune cells and lung fibroblasts |
| GSTP1       | Glutathione S-Transferase Pi 1           | Various, including lung epithelial cells |
| GSTM1       | Glutathione S-Transferase Mu 1           | Various, including lung epithelial cells |
| GSTT1       | Glutathione S-Transferase Theta 1        | Various, including lung epithelial cells |
| FCGR2A      | Fc Fragment of IgG Receptor IIa          | Immune cells (e.g., macrophages, neutrophils) |
| SLC26A9      | Solute Carrier Family 26 Member 9       | Epithelial cells in the lungs and pancreas |

```{r}

gene_symbols <-
  c("CFTR",
    "MSH2",
    "MSH6",
    "TGFB1",
    "GSTP1",
    "GSTM1",
    "GSTT1",
    "FCGR2A",
    "SLC26A9")

gene_tbl <- 
  genes_df |> 
  filter(feature_name %in% gene_symbols)

gene_ids <- gene_tbl |> pull(feature_id)
gene_abbr <- gene_tbl |> deframe()
```

### Query sample data

Once we have some Census IDs, we can set up a query for cell-level metadata. This can be quite large and take a long time to process (~10 minutes here). 

```{r eval=FALSE}
# An integrated cell atlas of the human lung in health and disease (full)
study_id <- "9f222629-9e39-47d0-b83f-e08d610c7479"
dataset_filter <- glue("dataset_id == '{study_id}'")

# Open obs SOMADataFrame
cell_metadata <-  census$get("census_data")$get("homo_sapiens")$get("obs")

# Read as Arrow Table
cell_metadata <-  cell_metadata$read(
   value_filter = dataset_filter,
   column_names = c("assay", "cell_type", "sex", "tissue", "tissue_general", "suspension_type", "disease", "donor_id")
)

# Concatenates results to an Arrow Table
cell_metadata <-  cell_metadata$concat()

write_dataset(cell_metadata, path = "data/sc_cxg_hcla_full.arrow", format = "arrow")
```

The result is a high-performance dataframe (arrow). In this case, I saved the result previously and reload it. 

```{r}
cell_metadata <- open_dataset("data/sc_cxg_hcla_full.arrow", format = "arrow")

cell_metadata |> 
  count(disease) |> 
  collect()

cell_metadata |> 
  filter(disease %in% c("normal", "COVID-19")) |>
  distinct(disease, donor_id) |> 
  count(disease) |> 
  collect()

cell_metadata |> 
  filter(disease %in% c("normal", "COVID-19")) |>
  filter(str_detect(cell_type, "epithelial")) |> 
  count(disease, cell_type) |> 
  arrange(disease, cell_type) |> 
  collect()

cell_types <- cell_metadata |> 
  distinct(cell_type) |> 
  filter(str_detect(cell_type, "epithelial")) |> 
  arrange(cell_type) |> 
  pull(cell_type, as_vector = TRUE)

cell_abbrs <- c("ALV", "LRT", "CIL")
names(cell_abbrs) <- cell_types

donors_count <- cell_metadata |> 
  filter(disease %in% c("normal", "COVID-19")) |>
  filter(str_detect(cell_type, "epithelial")) |> 
  count(donor_id, sort = TRUE) |> 
  collect() |> 
  # verified that all are the same prefix
  # mutate(donor_id_prefix  = str_sub(donor_id, end = 69)) |> 
  mutate(donor_id  = str_sub(donor_id, start = 70))

donors_count |> head()
donors_count |> tail()

```

Our data will be the count of mRNA for a collection of genes. Since this is noisy and sparse, it is important to think about coverage and sample size.  

We see that some donors contribute very few cells of interest to us, and some very many. We might consider excluding the former from our analysis sense they are likely to contribute mostly noise. 

We see above that in the full HCLA, there are only 22 COVID-19 epithelial cell of alveolus of lung. That suggests that we could exclude them, and the corresponding healthy ones, from our analysis. 

### Query counts

By searching the metadata, we determined the

1. dataset (integrated HCLA full)
1. tissue (lung)
1. phenotype (normal vs covid19)
1. cell type (epithelial)
1. genes (8 CF/mucus related ones)

We will now use `get_single_cell_experiment` or `get_seurat` to fetch this. 

I create a small helper function to format the query strings. 

```{r eval=FALSE}
# Generate a string that represents the filter expression
fmt_value_filter <- function(type, val){
  type <- switch (type,
    dataset = "dataset_id",
    gene = "feature_id",
    cell_type = "cell_type",
    sex = "sex",
    disease = "disease",
    stop("invalid type")
  )
  return(glue::glue("{type} %in% c({toString(shQuote({val}))})"))
}

organism <-  "Homo sapiens"
gene_filter <- fmt_value_filter("gene", gene_ids)
cell_filter <-
  str_c(
    fmt_value_filter("cell_type", cell_types),
    fmt_value_filter("disease", c("COVID-19", "normal")),
    sep = " & "
  )

cell_columns <-
  c(
    "assay",
    "cell_type",
    "tissue",
    "tissue_general",
    "suspension_type",
    "disease",
    "donor_id"
  )

sce_obj <-  get_single_cell_experiment(
   census = census,
   organism = organism,
   X_layers = c("raw", "normalized"), # depth normalizations, not in docs yet
   var_value_filter = gene_filter,
   obs_value_filter = cell_filter,
   obs_column_names = cell_columns
)

saveRDS(sce_obj, "data/epith_lung_sce.rds")
```

This data is not too large (< 5mb) but querying take a while (~30 min), so I will saved the results and continue from there.

## DE Analysis

### By inspection

In the usual workflow, where we have many genes for a general large population of cells, we will use `{Seurat}` or `{DEseq2}` or `{edgeR}` to conduct differential expression analysis.

Here, we have many cells of a few types and a few genes of interest. In this setting, we can actually inspect all the data. From there, we can test for significance of the differences we observe by eye. 

We can also handle the data with the general purpose tidy tools. That gives us a little more confidence about what is happening. 

We will start with the raw counts.

```{r}

sce_obj <- readRDS("data/epith_lung_sce_v2.rds")

# 1. Extract data
# or use 'logcounts' if they are normalized
counts <- assay(sce_obj, "raw") |> as.matrix() |> t() |> as.data.frame() |> rownames_to_column("cell_id") |> as_tibble()
gene_info <- rowData(sce_obj) |> as.data.frame() |> rownames_to_column("gene_id") |> as_tibble()
cell_info <- colData(sce_obj) |> as.data.frame() |> rownames_to_column("cell_id") |> as_tibble()

cell_info |> 
  filter(disease %in% c("COVID-19", "normal")) |> 
  filter(str_detect(assay, "10x")) |>
  count(disease, cell_type)

cell_prep <- 
  cell_info |> 
  filter(disease %in% c("COVID-19", "normal")) |> 
  filter(str_detect(assay, "10x")) |>
  filter(cell_type != "epithelial cell of alveolus of lung") |> 
  mutate(cell_type = recode(cell_type, !!!cell_abbrs)) |> 
  select(cell_id, cell_type, disease) |> 
  left_join(counts) |> 
  pivot_longer(cols = starts_with("ENSG"), names_to = "feat_id", values_to = "cnt") |> 
  mutate(feat_id = recode(feat_id, !!!gene_abbr))

cell_prep |> 
  ggplot(aes(feat_id, cnt, fill = cell_type)) +
  geom_violin() +
  theme_minimal() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(vars(disease))
```

Across normal and covid-19 samples of CIL and LRT cells, we see some consistency, which reassures us that we seeing real patterns from independent measures. For instance, `GSTP1` is up in both cases, and the distributions of `TGFB1` are similar across `cell_type`. 

But there are also some important differences. For instance, `SLC26A9` seems not expressed at all in COVID-19 patients.

However, this can be deceiving because a large proportion of cells have no transcripts counted for these genes. 

:::{.callout-tip}
There is normalization here from cellxgene. This is "depth normalization": this is simply dividing each gene transcript count by the total transcript count for that cell, to adjust for technical differences in how sequencing depth each cell got. 
:::


<!-- ```{r} -->
<!-- cell_prep |>  -->
<!--   filter(cnt != 0) |> -->
<!--   summarise(n = n(), mean = mean(log(cnt)), .by = c(feat_id, cell_type, disease)) |>  -->
<!--   pivot_wider(names_from = disease, values_from = c(n, mean)) |>  -->
<!--   arrange(feat_id) |>  -->
<!--   mutate(diff_ex = mean_normal - `mean_COVID-19`) |>  -->
<!--   arrange(desc(abs(diff_ex))) -->
<!-- ``` -->

### By `edgeR`

```{r}
# Filter sce_obj for "normal" and "COVID-19"
sce_filtered <- sce_obj[, sce_obj$disease %in% c("normal", "COVID-19")]

# Aggregating counts into pseudobulks
# Creating a data frame that summarizes counts by cell_type and disease
agg_data <- aggregateAcrossCells(sce_filtered, 
                                   id=colData(sce_filtered)[,c("cell_type", "disease")],
                                   use.assay.type = "raw")

# Correctly access the counts from the aggregated SCE object
counts <- assay(agg_data, "raw") # Ensure "raw" is the correct assay name containing your counts

# Assuming 'disease' information is correctly stored in colData after aggregation
# Ensure the group information (e.g., disease condition) is correctly formatted as a factor
groups <- factor(colData(agg_data)$disease)

# Now, create the DGEList object with the correct counts and group information
dge <- DGEList(counts = counts, group = groups)

# Proceed with normalization and differential expression analysis
dge <- calcNormFactors(dge)
dge <- estimateDisp(dge, design = model.matrix(~ groups))
fit <- glmQLFit(dge, design = model.matrix(~ groups))
qlf <- glmQLFTest(fit, coef = 2) # Adjust 'coef' based on your specific comparison of interest

# View top differentially expressed genes
gene_abbrs <- gene_tbl |> deframe()
rownames(qlf) <- gene_abbrs[rownames(qlf)]
topTags(qlf)
```


```{r}
census$close()
```

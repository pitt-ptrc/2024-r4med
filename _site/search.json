[
  {
    "objectID": "presentation/index.html#section",
    "href": "presentation/index.html#section",
    "title": "APIs and web scraping",
    "section": "",
    "text": "Working with raw data\nPre-built API packages\nAccessing APIs yourself\nScraping websites"
  },
  {
    "objectID": "presentation/index.html#finding-data-online",
    "href": "presentation/index.html#finding-data-online",
    "title": "APIs and web scraping",
    "section": "Finding data online",
    "text": "Finding data online\n\n\nData is everywhere online!\nOften provided as CSV or Excel files\nRead the file into R and do stuff with it"
  },
  {
    "objectID": "presentation/index.html#section-1",
    "href": "presentation/index.html#section-1",
    "title": "APIs and web scraping",
    "section": "",
    "text": "World Bank GDP (constant 2015 US$)"
  },
  {
    "objectID": "presentation/index.html#section-2",
    "href": "presentation/index.html#section-2",
    "title": "APIs and web scraping",
    "section": "",
    "text": "World Bank GDP (constant 2015 US$)"
  },
  {
    "objectID": "presentation/index.html#section-4",
    "href": "presentation/index.html#section-4",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyverse)\n\nwdi_raw <- read_csv(\"API_NY.GDP.MKTP.KD_DS2_en_csv_v2_4487681.csv\",\n                    skip = 3)\nwdi_raw\n\n\n## # A tibble: 6 × 67\n##   Country Nam…¹ Count…² Indic…³ Indic…⁴   `1960`   `1961`   `1962`   `1963`\n##   <chr>         <chr>   <chr>   <chr>      <dbl>    <dbl>    <dbl>    <dbl>\n## 1 Aruba         ABW     GDP (c… NY.GDP… NA       NA       NA       NA      \n## 2 Africa Easte… AFE     GDP (c… NY.GDP…  1.54e11  1.54e11  1.67e11  1.75e11\n## 3 Afghanistan   AFG     GDP (c… NY.GDP… NA       NA       NA       NA      \n## 4 Africa Weste… AFW     GDP (c… NY.GDP…  1.05e11  1.07e11  1.11e11  1.19e11\n## 5 Angola        AGO     GDP (c… NY.GDP… NA       NA       NA       NA      \n## 6 Albania       ALB     GDP (c… NY.GDP… NA       NA       NA       NA      \n## # … with 59 more variables: `1964` <dbl>, `1965` <dbl>, `1966` <dbl>,\n## #   `1967` <dbl>, `1968` <dbl>, `1969` <dbl>, `1970` <dbl>, `1971` <dbl>,\n## #   `1972` <dbl>, `1973` <dbl>, `1974` <dbl>, `1975` <dbl>, `1976` <dbl>,\n## #   `1977` <dbl>, `1978` <dbl>, `1979` <dbl>, `1980` <dbl>, `1981` <dbl>,\n## #   `1982` <dbl>, `1983` <dbl>, `1984` <dbl>, `1985` <dbl>, `1986` <dbl>,\n## #   `1987` <dbl>, `1988` <dbl>, `1989` <dbl>, `1990` <dbl>, `1991` <dbl>,\n## #   `1992` <dbl>, `1993` <dbl>, `1994` <dbl>, `1995` <dbl>, …"
  },
  {
    "objectID": "presentation/index.html#section-5",
    "href": "presentation/index.html#section-5",
    "title": "APIs and web scraping",
    "section": "",
    "text": "wdi_clean <- wdi_raw %>% \n  select(-`Indicator Name`, -`Indicator Code`) %>% \n  pivot_longer(-c(`Country Name`, `Country Code`)) %>% \n  mutate(year = as.numeric(name)) %>% \n  filter(year >= 2010, `Country Code` %in% c(\"MYS\", \"IDN\", \"SGP\"))\n\nhead(wdi_clean)\n\n# A tibble: 6 × 5\n  `Country Name` `Country Code` name          value  year\n  <chr>          <chr>          <chr>         <dbl> <dbl>\n1 Indonesia      IDN            2010  657835435591.  2010\n2 Indonesia      IDN            2011  698422462409.  2011\n3 Indonesia      IDN            2012  740537690665.  2012\n4 Indonesia      IDN            2013  781691322851.  2013\n5 Indonesia      IDN            2014  820828015499.  2014\n6 Indonesia      IDN            2015  860854235065.  2015"
  },
  {
    "objectID": "presentation/index.html#section-6",
    "href": "presentation/index.html#section-6",
    "title": "APIs and web scraping",
    "section": "",
    "text": "ggplot(wdi_clean, aes(x = year, y = value, color = `Country Name`)) +\n  geom_line() +\n  scale_x_continuous(breaks = 2010:2020) +\n  labs(x = NULL, y = \"GDP\", color = NULL)"
  },
  {
    "objectID": "presentation/index.html#section-7",
    "href": "presentation/index.html#section-7",
    "title": "APIs and web scraping",
    "section": "",
    "text": "FRED CPILFESL"
  },
  {
    "objectID": "presentation/index.html#section-8",
    "href": "presentation/index.html#section-8",
    "title": "APIs and web scraping",
    "section": "",
    "text": "FRED CPILFESL"
  },
  {
    "objectID": "presentation/index.html#section-10",
    "href": "presentation/index.html#section-10",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyverse)\n\nfred_raw <- read_csv(\"CPILFESL.csv\")\nfred_raw\n\n\n## # A tibble: 6 × 2\n##   DATE       CPILFESL\n##   <date>        <dbl>\n## 1 1957-01-01     28.5\n## 2 1957-02-01     28.6\n## 3 1957-03-01     28.7\n## 4 1957-04-01     28.8\n## 5 1957-05-01     28.8\n## 6 1957-06-01     28.9"
  },
  {
    "objectID": "presentation/index.html#section-11",
    "href": "presentation/index.html#section-11",
    "title": "APIs and web scraping",
    "section": "",
    "text": "ggplot(fred_raw, aes(x = DATE, y = CPILFESL)) +\n  geom_line() +\n  labs(x = NULL, y = \"CPI\")"
  },
  {
    "objectID": "presentation/index.html#your-turn",
    "href": "presentation/index.html#your-turn",
    "title": "APIs and web scraping",
    "section": "Your turn!",
    "text": "Your turn!"
  },
  {
    "objectID": "presentation/index.html#avoid-extra-work",
    "href": "presentation/index.html#avoid-extra-work",
    "title": "APIs and web scraping",
    "section": "Avoid extra work!",
    "text": "Avoid extra work!\n\n\nTry to avoid downloading raw data files whenever possible!\nMany data-focused websites provide more direct access to data through an application programming interface, or API\nBig list of public data APIs"
  },
  {
    "objectID": "presentation/index.html#section-12",
    "href": "presentation/index.html#section-12",
    "title": "APIs and web scraping",
    "section": "",
    "text": "{WDI} R package"
  },
  {
    "objectID": "presentation/index.html#section-13",
    "href": "presentation/index.html#section-13",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = ___,\n            indicator = ___,\n            extra = ___,\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-14",
    "href": "presentation/index.html#section-14",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = \"MY\",\n            indicator = ___,\n            extra = ___,\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-15",
    "href": "presentation/index.html#section-15",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = ___,\n            extra = ___,\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-16",
    "href": "presentation/index.html#section-16",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"all\"),\n            indicator = ___,\n            extra = ___,\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-17",
    "href": "presentation/index.html#section-17",
    "title": "APIs and web scraping",
    "section": "",
    "text": "World Bank GDP (constant 2015 US$)"
  },
  {
    "objectID": "presentation/index.html#section-18",
    "href": "presentation/index.html#section-18",
    "title": "APIs and web scraping",
    "section": "",
    "text": "World Bank GDP (constant 2015 US$)\n\n\n{WDI} R package"
  },
  {
    "objectID": "presentation/index.html#section-19",
    "href": "presentation/index.html#section-19",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = \"NY.GDP.MKTP.KD\",\n            extra = ___,\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-20",
    "href": "presentation/index.html#section-20",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = c(\"NY.GDP.MKTP.KD\",      # GDP, 2015 USD\n                          \"NY.GDP.MKTP.KD.ZG\"),  # GDP growth, annual %\n            extra = ___,\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-21",
    "href": "presentation/index.html#section-21",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = c(\"NY.GDP.MKTP.KD\",      # GDP, 2015 USD\n                          \"NY.GDP.MKTP.KD.ZG\"),  # GDP growth, annual %\n            extra = TRUE,  # Population, region, and other helpful columns\n            start = ___,\n            end = ___)"
  },
  {
    "objectID": "presentation/index.html#section-22",
    "href": "presentation/index.html#section-22",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = c(\"NY.GDP.MKTP.KD\",      # GDP, 2015 USD\n                          \"NY.GDP.MKTP.KD.ZG\"),  # GDP growth, annual %\n            extra = TRUE,  # Population, region, and other helpful columns\n            start = 2010,\n            end = 2020)"
  },
  {
    "objectID": "presentation/index.html#section-23",
    "href": "presentation/index.html#section-23",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = c(\"NY.GDP.MKTP.KD\",      # GDP, 2015 USD\n                          \"NY.GDP.MKTP.KD.ZG\"),  # GDP growth, annual %\n            extra = TRUE,  # Population, region, and other helpful columns\n            start = 2010,\n            end = 2020)\nhead(data)\n \n\n## # A tibble: 6 × 12\n##   iso2c country   year NY.GD…¹ NY.GD…² iso3c region capital longi…³ latit…⁴\n##   <chr> <chr>    <int>   <dbl>   <dbl> <chr> <chr>  <chr>   <chr>   <chr>  \n## 1 ID    Indones…  2010 6.58e11    6.22 IDN   East … Jakarta 106.83  -6.197…\n## 2 ID    Indones…  2011 6.98e11    6.17 IDN   East … Jakarta 106.83  -6.197…\n## 3 ID    Indones…  2012 7.41e11    6.03 IDN   East … Jakarta 106.83  -6.197…\n## 4 ID    Indones…  2013 7.82e11    5.56 IDN   East … Jakarta 106.83  -6.197…\n## 5 ID    Indones…  2014 8.21e11    5.01 IDN   East … Jakarta 106.83  -6.197…\n## 6 ID    Indones…  2015 8.61e11    4.88 IDN   East … Jakarta 106.83  -6.197…\n## # … with 2 more variables: income <chr>, lending <chr>, and abbreviated\n## #   variable names ¹​NY.GDP.MKTP.KD, ²​NY.GDP.MKTP.KD.ZG, ³​longitude,\n## #   ⁴​latitude"
  },
  {
    "objectID": "presentation/index.html#section-24",
    "href": "presentation/index.html#section-24",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(ggplot2)\n\nggplot(data, aes(x = year, y = NY.GDP.MKTP.KD.ZG, color = country)) +\n  geom_line() +\n  scale_x_continuous(breaks = 2010:2020) +\n  labs(x = NULL, y = \"Annual GDP growth (%)\", color = NULL)"
  },
  {
    "objectID": "presentation/index.html#section-25",
    "href": "presentation/index.html#section-25",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(WDI)\n\ndata <- WDI(country = c(\"MY\", \"ID\", \"SG\"),\n            indicator = c(gdp = \"NY.GDP.MKTP.KD\",      # GDP, 2015 USD\n                          gdp_growth = \"NY.GDP.MKTP.KD.ZG\"),  # GDP growth, annual %\n            extra = TRUE,  # Population, region, and other helpful columns\n            start = 2010,\n            end = 2020)\nhead(data)\n \n\n\n## # A tibble: 6 × 6\n##   iso2c country    year           gdp gdp_growth others\n##   <chr> <chr>     <int>         <dbl>      <dbl> <chr> \n## 1 ID    Indonesia  2010 657835435591.       6.22 ...   \n## 2 ID    Indonesia  2011 698422462409.       6.17 ...   \n## 3 ID    Indonesia  2012 740537690665.       6.03 ...   \n## 4 ID    Indonesia  2013 781691322851.       5.56 ...   \n## 5 ID    Indonesia  2014 820828015499.       5.01 ...   \n## 6 ID    Indonesia  2015 860854235065.       4.88 ..."
  },
  {
    "objectID": "presentation/index.html#section-26",
    "href": "presentation/index.html#section-26",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(ggplot2)\n\nggplot(data, aes(x = year, y = gdp_growth, color = country)) +\n  geom_line() +\n  scale_x_continuous(breaks = 2010:2020) +\n  labs(x = NULL, y = \"Annual GDP growth (%)\", color = NULL)"
  },
  {
    "objectID": "presentation/index.html#your-turn-1",
    "href": "presentation/index.html#your-turn-1",
    "title": "APIs and web scraping",
    "section": "Your turn!",
    "text": "Your turn!"
  },
  {
    "objectID": "presentation/index.html#section-27",
    "href": "presentation/index.html#section-27",
    "title": "APIs and web scraping",
    "section": "",
    "text": "FRED CPILFESL"
  },
  {
    "objectID": "presentation/index.html#section-28",
    "href": "presentation/index.html#section-28",
    "title": "APIs and web scraping",
    "section": "",
    "text": "FRED CPILFESL"
  },
  {
    "objectID": "presentation/index.html#section-29",
    "href": "presentation/index.html#section-29",
    "title": "APIs and web scraping",
    "section": "",
    "text": "{tidyquant} R package"
  },
  {
    "objectID": "presentation/index.html#section-30",
    "href": "presentation/index.html#section-30",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyquant)\n\ndata <- tq_get(x = ___, \n               get = ___,\n               from = ___,\n               to = ___)"
  },
  {
    "objectID": "presentation/index.html#section-31",
    "href": "presentation/index.html#section-31",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyquant)\n\ndata <- tq_get(x = c(\"CPILFESL\",  # CPI\n                     \"RSXFSN\",  # Advance retail sales\n                     \"USREC\"),  # US recessions\n               get = ___,\n               from = ___,\n               to = ___)"
  },
  {
    "objectID": "presentation/index.html#section-32",
    "href": "presentation/index.html#section-32",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyquant)\n\ndata <- tq_get(x = c(\"CPILFESL\",  # CPI\n                     \"RSXFSN\",  # Advance retail sales\n                     \"USREC\"),  # US recessions\n               get = \"economic.data\",  # Use FRED\n               from = ___,\n               to = ___)"
  },
  {
    "objectID": "presentation/index.html#section-33",
    "href": "presentation/index.html#section-33",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyquant)\n\ndata <- tq_get(x = c(\"CPILFESL\",  # CPI\n                     \"RSXFSN\",  # Advance retail sales\n                     \"USREC\"),  # US recessions\n               get = \"economic.data\",  # Use FRED\n               from = \"2000-01-01\",\n               to = \"2022-09-01\")"
  },
  {
    "objectID": "presentation/index.html#section-34",
    "href": "presentation/index.html#section-34",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyquant)\n\ndata <- tq_get(x = c(\"CPILFESL\",  # CPI\n                     \"RSXFSN\",  # Advance retail sales\n                     \"USREC\"),  # US recessions\n               get = \"economic.data\",  # Use FRED\n               from = \"2000-01-01\",\n               to = \"2022-09-01\")\nhead(data)\n\n## # A tibble: 6 × 3\n##   symbol   date       price\n##   <chr>    <date>     <dbl>\n## 1 CPILFESL 2000-01-01  179.\n## 2 CPILFESL 2000-02-01  179.\n## 3 CPILFESL 2000-03-01  180 \n## 4 CPILFESL 2000-04-01  180.\n## 5 CPILFESL 2000-05-01  181.\n## 6 CPILFESL 2000-06-01  181."
  },
  {
    "objectID": "presentation/index.html#section-35",
    "href": "presentation/index.html#section-35",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(tidyverse)\nretail <- data %>% filter(symbol == \"RSXFSN\")\n\nggplot(retail, aes(x = date, y = price)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::label_dollar()) +\n  labs(x = NULL, y = \"Retail sales\\n(millions of dollars)\")"
  },
  {
    "objectID": "presentation/index.html#section-36",
    "href": "presentation/index.html#section-36",
    "title": "APIs and web scraping",
    "section": "",
    "text": "recessions_start_end <- data %>% \n  filter(symbol == \"USREC\") %>% \n  mutate(recession_change = price - lag(price)) %>% \n  filter(recession_change != 0)\n\nrecessions <- tibble(start = filter(recessions_start_end, recession_change == 1)$date,\n                     end = filter(recessions_start_end, recession_change == -1)$date)\n\nggplot(retail, aes(x = date, y = price)) +\n  geom_rect(data = recessions, \n            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),\n            inherit.aes = FALSE, fill = \"orange\", alpha = 0.5) +\n  geom_line() +\n  scale_y_continuous(labels = scales::label_dollar()) +\n  labs(x = NULL, y = \"Retail sales\\n(millions of dollars)\")"
  },
  {
    "objectID": "presentation/index.html#your-turn-2",
    "href": "presentation/index.html#your-turn-2",
    "title": "APIs and web scraping",
    "section": "Your turn!",
    "text": "Your turn!"
  },
  {
    "objectID": "presentation/index.html#what-if-theres-an-api-but-no-pre-built-package",
    "href": "presentation/index.html#what-if-theres-an-api-but-no-pre-built-package",
    "title": "APIs and web scraping",
    "section": "What if there’s an API butno pre-built package?",
    "text": "What if there’s an API butno pre-built package?\n\n\nYou can still use the API!\nYou need to write the code to access the API using the {httr} R package"
  },
  {
    "objectID": "presentation/index.html#sending-data-to-websites",
    "href": "presentation/index.html#sending-data-to-websites",
    "title": "APIs and web scraping",
    "section": "Sending data to websites",
    "text": "Sending data to websites\n\n\n\nGET\nData sent to server via URLs with parameters\nParameters all visible in the URL\n\nPOST\nData sent to server via invisible request\nForms with usernames and passwords"
  },
  {
    "objectID": "presentation/index.html#section-39",
    "href": "presentation/index.html#section-39",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(httr)\napi_url <- modify_url(\"https://www.econdb.com/\",\n                      path = \"api/series/URATEMY\",\n                      query = list(format = \"json\"))\napi_url\n## [1] \"https://www.econdb.com/api/series/URATEMY?format=json\""
  },
  {
    "objectID": "presentation/index.html#why-not-just-build-the-url-on-your-own",
    "href": "presentation/index.html#why-not-just-build-the-url-on-your-own",
    "title": "APIs and web scraping",
    "section": "Why not just build the URL on your own?",
    "text": "Why not just build the URL on your own?\n\nIt’s easy enough to just write this:\nhttps://www.econdb.com/api/series/URATEMY?format=json\n\n\n\nSpecial characters!\n\nmodify_url(\"https://www.example.com/\",\n           path = \"blah\",\n           query = list(var1 = 142.5, var2 = \"Thing & 10%\"))\n## [1] \"https://www.example.com/blah?var1=142.5&var2=Thing%20%26%2010%25\""
  },
  {
    "objectID": "presentation/index.html#getting-data-from-websites",
    "href": "presentation/index.html#getting-data-from-websites",
    "title": "APIs and web scraping",
    "section": "Getting data from websites",
    "text": "Getting data from websites\n\n\n\nStatus code\n\n200: OK\n400: Bad Request\n403: Forbidden\n404: Not Found\n\nFull list\n\nHeaders\nDate: Sun, 11 Sep 2022 16:45:20 GMT\nContent-Type: application/json\nContent-Encoding: gzip\n...\nFull list"
  },
  {
    "objectID": "presentation/index.html#content-types",
    "href": "presentation/index.html#content-types",
    "title": "APIs and web scraping",
    "section": "Content types",
    "text": "Content types\nData can be returned as text, JSON, XML, files, etc.\n\n\n\nJSON\n{\n    \"ticker\": \"URATEMY\",\n    \"description\": \"Malaysia - Unemployment\",\n    \"geography\": \"Malaysia\",\n    \"frequency\": \"M\",\n    \"dataset\": \"BNM_UNEMP\",\n    \"units\": \"% of labour force\",\n    \"additional_metadata\": {\n        \"2:Indicator\": \"120:Unemployment \",\n        \"GEO:None\": \"130:None\"\n    },\n    \"data\": {\n        \"values\": [\n            3.2,\n            3.5,\n            ...\n\nXML\n<wb:countries page=\"1\" pages=\"1\" per_page=\"50\" total=\"28\">\n    <wb:country id=\"AFG\">\n        <wb:iso2Code>AF</wb:iso2Code>\n        <wb:name>Afghanistan</wb:name>\n        <wb:region id=\"SAS\" iso2code=\"8S\">South Asia</wb:region>\n        <wb:adminregion id=\"SAS\" iso2code=\"8S\">South Asia</wb:adminregion>\n        <wb:incomeLevel id=\"LIC\" iso2code=\"XM\">Low income</wb:incomeLevel>\n        <wb:lendingType id=\"IDX\" iso2code=\"XI\">IDA</wb:lendingType>\n        <wb:capitalCity>Kabul</wb:capitalCity>\n        <wb:longitude>69.1761</wb:longitude>\n        <wb:latitude>34.5228</wb:latitude>\n    </wb:country>\n    <wb:country id=\"BDI\">\n        <wb:iso2Code>BI</wb:iso2Code>\n        <wb:name>Burundi</wb:name>\n        ..."
  },
  {
    "objectID": "presentation/index.html#section-40",
    "href": "presentation/index.html#section-40",
    "title": "APIs and web scraping",
    "section": "",
    "text": "# Build the URL query\napi_url <- modify_url(\"https://www.econdb.com/\",\n                      path = \"api/series/URATEMY\",\n                      query = list(format = \"json\"))\n\n# Submit the query\nr <- GET(api_url)\nr\n\n## Response [https://www.econdb.com/api/series/URATEMY/?format=json]\n##   Date: 2022-09-11 15:56\n##   Status: 200\n##   Content-Type: application/json\n##   Size: 3.7 kB"
  },
  {
    "objectID": "presentation/index.html#section-41",
    "href": "presentation/index.html#section-41",
    "title": "APIs and web scraping",
    "section": "",
    "text": "headers(r)\n## $date\n## [1] \"Sun, 11 Sep 2022 15:56:19 GMT\"\n## \n## $`content-type`\n## [1] \"application/json\"\n## \n## $vary\n## [1] \"Accept-Encoding\"\n## \n## $vary\n## [1] \"Accept, Origin\"\n## \n## $allow\n## [1] \"GET, HEAD, OPTIONS\"\n## \n## $`x-frame-options`\n## [1] \"DENY\"\n## \n## $`x-content-type-options`\n## [1] \"nosniff\"\n## \n## $`referrer-policy`\n## [1] \"same-origin\"\n## \n## $`content-encoding`\n## [1] \"gzip\"\n## \n## $`cf-cache-status`\n## [1] \"DYNAMIC\"\n## \n## $`report-to`\n## [1] \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v3?s=M6BI1UVSV934RbiLLRmu0N9p96i5%2FKUMWVx4WyNQbh94zk1KHGW62Z0MSwBOslB1hu2EbPitIYJaZj%2B7vnUc2A5NJsyp20j0cSWVsWkXT7HIUv25DhGEFfNQncsLxQ2%2B\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\"\n## \n## $nel\n## [1] \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\"\n## \n## $server\n## [1] \"cloudflare\"\n## \n## $`cf-ray`\n## [1] \"749197b98efa8da6-MIA\"\n## \n## attr(,\"class\")\n## [1] \"insensitive\" \"list\""
  },
  {
    "objectID": "presentation/index.html#section-42",
    "href": "presentation/index.html#section-42",
    "title": "APIs and web scraping",
    "section": "",
    "text": "content(r)\n## $ticker\n## [1] \"URATEMY\"\n## \n## $description\n## [1] \"Malaysia - Unemployment\"\n## \n## $geography\n## [1] \"Malaysia\"\n## \n## $frequency\n## [1] \"M\"\n## \n## $dataset\n## [1] \"BNM_UNEMP\"\n## \n## $units\n## [1] \"% of labour force\"\n## \n## $additional_metadata\n## $additional_metadata$`2:Indicator`\n## [1] \"120:Unemployment \"\n## \n## $additional_metadata$`GEO:None`\n## [1] \"130:None\"\n## \n## \n## $data\n## $data$values\n## $data$values[[1]]\n## [1] 3.2\n## \n## $data$values[[2]]\n## [1] 3.5\n## \n## $data$values[[3]]\n## [1] 3.5\n## \n## $data$values[[4]]\n## [1] 3.5\n## \n## $data$values[[5]]\n## [1] 3.1\n## \n## $data$values[[6]]\n## [1] 3.2\n## \n## $data$values[[7]]\n## [1] 3.6\n## \n## $data$values[[8]]\n## [1] 3.2\n## \n## $data$values[[9]]\n## [1] 3.1\n## \n## $data$values[[10]]\n## [1] 3\n## \n## $data$values[[11]]\n## [1] 2.8\n## \n## $data$values[[12]]\n## [1] 3\n## \n## $data$values[[13]]\n## [1] 3.1\n## \n## $data$values[[14]]\n## [1] 3.4\n## \n## $data$values[[15]]\n## [1] 2.9\n## \n## $data$values[[16]]\n## [1] 3\n## \n## $data$values[[17]]\n## [1] 3\n## \n## $data$values[[18]]\n## [1] 3\n## \n## $data$values[[19]]\n## [1] 3.2\n## \n## $data$values[[20]]\n## [1] 3\n## \n## $data$values[[21]]\n## [1] 3.1\n## \n## $data$values[[22]]\n## [1] 3.3\n## \n## $data$values[[23]]\n## [1] 3\n## \n## $data$values[[24]]\n## [1] 3.1\n## \n## $data$values[[25]]\n## [1] 3.1\n## \n## $data$values[[26]]\n## [1] 3\n## \n## $data$values[[27]]\n## [1] 3.2\n## \n## $data$values[[28]]\n## [1] 2.9\n## \n## $data$values[[29]]\n## [1] 3\n## \n## $data$values[[30]]\n## [1] 3\n## \n## $data$values[[31]]\n## [1] 3\n## \n## $data$values[[32]]\n## [1] 3.1\n## \n## $data$values[[33]]\n## [1] 2.7\n## \n## $data$values[[34]]\n## [1] 3.2\n## \n## $data$values[[35]]\n## [1] 3.2\n## \n## $data$values[[36]]\n## [1] 2.9\n## \n## $data$values[[37]]\n## [1] 3.3\n## \n## $data$values[[38]]\n## [1] 3.3\n## \n## $data$values[[39]]\n## [1] 3\n## \n## $data$values[[40]]\n## [1] 3.3\n## \n## $data$values[[41]]\n## [1] 3\n## \n## $data$values[[42]]\n## [1] 3.3\n## \n## $data$values[[43]]\n## [1] 2.8\n## \n## $data$values[[44]]\n## [1] 3\n## \n## $data$values[[45]]\n## [1] 3.1\n## \n## $data$values[[46]]\n## [1] 3.1\n## \n## $data$values[[47]]\n## [1] 3.3\n## \n## $data$values[[48]]\n## [1] 3.4\n## \n## $data$values[[49]]\n## [1] 3\n## \n## $data$values[[50]]\n## [1] 3.3\n## \n## $data$values[[51]]\n## [1] 3.2\n## \n## $data$values[[52]]\n## [1] 3\n## \n## $data$values[[53]]\n## [1] 2.9\n## \n## $data$values[[54]]\n## [1] 2.9\n## \n## $data$values[[55]]\n## [1] 2.8\n## \n## $data$values[[56]]\n## [1] 2.8\n## \n## $data$values[[57]]\n## [1] 2.7\n## \n## $data$values[[58]]\n## [1] 2.7\n## \n## $data$values[[59]]\n## [1] 2.7\n## \n## $data$values[[60]]\n## [1] 2.7\n## \n## $data$values[[61]]\n## [1] 3\n## \n## $data$values[[62]]\n## [1] 3.1\n## \n## $data$values[[63]]\n## [1] 3.2\n## \n## $data$values[[64]]\n## [1] 3\n## \n## $data$values[[65]]\n## [1] 3\n## \n## $data$values[[66]]\n## [1] 3.1\n## \n## $data$values[[67]]\n## [1] 3.2\n## \n## $data$values[[68]]\n## [1] 3.2\n## \n## $data$values[[69]]\n## [1] 3.2\n## \n## $data$values[[70]]\n## [1] 3.3\n## \n## $data$values[[71]]\n## [1] 3.3\n## \n## $data$values[[72]]\n## [1] 3.2\n## \n## $data$values[[73]]\n## [1] 3.4\n## \n## $data$values[[74]]\n## [1] 3.4\n## \n## $data$values[[75]]\n## [1] 3.4\n## \n## $data$values[[76]]\n## [1] 3.5\n## \n## $data$values[[77]]\n## [1] 3.5\n## \n## $data$values[[78]]\n## [1] 3.4\n## \n## $data$values[[79]]\n## [1] 3.4\n## \n## $data$values[[80]]\n## [1] 3.5\n## \n## $data$values[[81]]\n## [1] 3.5\n## \n## $data$values[[82]]\n## [1] 3.5\n## \n## $data$values[[83]]\n## [1] 3.5\n## \n## $data$values[[84]]\n## [1] 3.4\n## \n## $data$values[[85]]\n## [1] 3.5\n## \n## $data$values[[86]]\n## [1] 3.5\n## \n## $data$values[[87]]\n## [1] 3.5\n## \n## $data$values[[88]]\n## [1] 3.4\n## \n## $data$values[[89]]\n## [1] 3.4\n## \n## $data$values[[90]]\n## [1] 3.4\n## \n## $data$values[[91]]\n## [1] 3.4\n## \n## $data$values[[92]]\n## [1] 3.5\n## \n## $data$values[[93]]\n## [1] 3.4\n## \n## $data$values[[94]]\n## [1] 3.4\n## \n## $data$values[[95]]\n## [1] 3.4\n## \n## $data$values[[96]]\n## [1] 3.3\n## \n## $data$values[[97]]\n## [1] 3.3\n## \n## $data$values[[98]]\n## [1] 3.4\n## \n## $data$values[[99]]\n## [1] 3.3\n## \n## $data$values[[100]]\n## [1] 3.3\n## \n## $data$values[[101]]\n## [1] 3.3\n## \n## $data$values[[102]]\n## [1] 3.3\n## \n## $data$values[[103]]\n## [1] 3.4\n## \n## $data$values[[104]]\n## [1] 3.4\n## \n## $data$values[[105]]\n## [1] 3.4\n## \n## $data$values[[106]]\n## [1] 3.3\n## \n## $data$values[[107]]\n## [1] 3.3\n## \n## $data$values[[108]]\n## [1] 3.3\n## \n## $data$values[[109]]\n## [1] 3.3\n## \n## $data$values[[110]]\n## [1] 3.3\n## \n## $data$values[[111]]\n## [1] 3.3\n## \n## $data$values[[112]]\n## [1] 3.4\n## \n## $data$values[[113]]\n## [1] 3.4\n## \n## $data$values[[114]]\n## [1] 3.3\n## \n## $data$values[[115]]\n## [1] 3.3\n## \n## $data$values[[116]]\n## [1] 3.3\n## \n## $data$values[[117]]\n## [1] 3.3\n## \n## $data$values[[118]]\n## [1] 3.3\n## \n## $data$values[[119]]\n## [1] 3.2\n## \n## $data$values[[120]]\n## [1] 3.2\n## \n## $data$values[[121]]\n## [1] 3.3\n## \n## $data$values[[122]]\n## [1] 3.2\n## \n## $data$values[[123]]\n## [1] 3.3\n## \n## $data$values[[124]]\n## [1] 3.9\n## \n## $data$values[[125]]\n## [1] 5\n## \n## $data$values[[126]]\n## [1] 5.3\n## \n## $data$values[[127]]\n## [1] 4.9\n## \n## $data$values[[128]]\n## [1] 4.7\n## \n## $data$values[[129]]\n## [1] 4.7\n## \n## $data$values[[130]]\n## [1] 4.63\n## \n## $data$values[[131]]\n## [1] 4.69\n## \n## $data$values[[132]]\n## [1] 4.8\n## \n## $data$values[[133]]\n## [1] 4.8\n## \n## $data$values[[134]]\n## [1] 4.7\n## \n## $data$values[[135]]\n## [1] 4.3\n## \n## $data$values[[136]]\n## [1] 4.1\n## \n## $data$values[[137]]\n## [1] 3.9\n## \n## \n## $data$dates\n## $data$dates[[1]]\n## [1] \"2001-10-01\"\n## \n## $data$dates[[2]]\n## [1] \"2010-01-01\"\n## \n## $data$dates[[3]]\n## [1] \"2010-02-01\"\n## \n## $data$dates[[4]]\n## [1] \"2010-03-01\"\n## \n## $data$dates[[5]]\n## [1] \"2010-04-01\"\n## \n## $data$dates[[6]]\n## [1] \"2010-05-01\"\n## \n## $data$dates[[7]]\n## [1] \"2010-06-01\"\n## \n## $data$dates[[8]]\n## [1] \"2010-07-01\"\n## \n## $data$dates[[9]]\n## [1] \"2010-08-01\"\n## \n## $data$dates[[10]]\n## [1] \"2010-09-01\"\n## \n## $data$dates[[11]]\n## [1] \"2010-10-01\"\n## \n## $data$dates[[12]]\n## [1] \"2010-11-01\"\n## \n## $data$dates[[13]]\n## [1] \"2010-12-01\"\n## \n## $data$dates[[14]]\n## [1] \"2011-01-01\"\n## \n## $data$dates[[15]]\n## [1] \"2011-02-01\"\n## \n## $data$dates[[16]]\n## [1] \"2011-03-01\"\n## \n## $data$dates[[17]]\n## [1] \"2011-04-01\"\n## \n## $data$dates[[18]]\n## [1] \"2011-05-01\"\n## \n## $data$dates[[19]]\n## [1] \"2011-06-01\"\n## \n## $data$dates[[20]]\n## [1] \"2011-07-01\"\n## \n## $data$dates[[21]]\n## [1] \"2011-08-01\"\n## \n## $data$dates[[22]]\n## [1] \"2011-09-01\"\n## \n## $data$dates[[23]]\n## [1] \"2011-10-01\"\n## \n## $data$dates[[24]]\n## [1] \"2011-11-01\"\n## \n## $data$dates[[25]]\n## [1] \"2011-12-01\"\n## \n## $data$dates[[26]]\n## [1] \"2012-01-01\"\n## \n## $data$dates[[27]]\n## [1] \"2012-02-01\"\n## \n## $data$dates[[28]]\n## [1] \"2012-03-01\"\n## \n## $data$dates[[29]]\n## [1] \"2012-04-01\"\n## \n## $data$dates[[30]]\n## [1] \"2012-05-01\"\n## \n## $data$dates[[31]]\n## [1] \"2012-06-01\"\n## \n## $data$dates[[32]]\n## [1] \"2012-07-01\"\n## \n## $data$dates[[33]]\n## [1] \"2012-08-01\"\n## \n## $data$dates[[34]]\n## [1] \"2012-09-01\"\n## \n## $data$dates[[35]]\n## [1] \"2012-10-01\"\n## \n## $data$dates[[36]]\n## [1] \"2012-11-01\"\n## \n## $data$dates[[37]]\n## [1] \"2012-12-01\"\n## \n## $data$dates[[38]]\n## [1] \"2013-01-01\"\n## \n## $data$dates[[39]]\n## [1] \"2013-02-01\"\n## \n## $data$dates[[40]]\n## [1] \"2013-03-01\"\n## \n## $data$dates[[41]]\n## [1] \"2013-04-01\"\n## \n## $data$dates[[42]]\n## [1] \"2013-05-01\"\n## \n## $data$dates[[43]]\n## [1] \"2013-06-01\"\n## \n## $data$dates[[44]]\n## [1] \"2013-07-01\"\n## \n## $data$dates[[45]]\n## [1] \"2013-08-01\"\n## \n## $data$dates[[46]]\n## [1] \"2013-09-01\"\n## \n## $data$dates[[47]]\n## [1] \"2013-10-01\"\n## \n## $data$dates[[48]]\n## [1] \"2013-11-01\"\n## \n## $data$dates[[49]]\n## [1] \"2013-12-01\"\n## \n## $data$dates[[50]]\n## [1] \"2014-01-01\"\n## \n## $data$dates[[51]]\n## [1] \"2014-02-01\"\n## \n## $data$dates[[52]]\n## [1] \"2014-03-01\"\n## \n## $data$dates[[53]]\n## [1] \"2014-04-01\"\n## \n## $data$dates[[54]]\n## [1] \"2014-05-01\"\n## \n## $data$dates[[55]]\n## [1] \"2014-06-01\"\n## \n## $data$dates[[56]]\n## [1] \"2014-07-01\"\n## \n## $data$dates[[57]]\n## [1] \"2014-08-01\"\n## \n## $data$dates[[58]]\n## [1] \"2014-09-01\"\n## \n## $data$dates[[59]]\n## [1] \"2014-10-01\"\n## \n## $data$dates[[60]]\n## [1] \"2014-11-01\"\n## \n## $data$dates[[61]]\n## [1] \"2014-12-01\"\n## \n## $data$dates[[62]]\n## [1] \"2015-01-01\"\n## \n## $data$dates[[63]]\n## [1] \"2015-02-01\"\n## \n## $data$dates[[64]]\n## [1] \"2015-03-01\"\n## \n## $data$dates[[65]]\n## [1] \"2015-04-01\"\n## \n## $data$dates[[66]]\n## [1] \"2015-05-01\"\n## \n## $data$dates[[67]]\n## [1] \"2015-06-01\"\n## \n## $data$dates[[68]]\n## [1] \"2015-07-01\"\n## \n## $data$dates[[69]]\n## [1] \"2015-08-01\"\n## \n## $data$dates[[70]]\n## [1] \"2015-09-01\"\n## \n## $data$dates[[71]]\n## [1] \"2015-10-01\"\n## \n## $data$dates[[72]]\n## [1] \"2015-11-01\"\n## \n## $data$dates[[73]]\n## [1] \"2015-12-01\"\n## \n## $data$dates[[74]]\n## [1] \"2016-01-01\"\n## \n## $data$dates[[75]]\n## [1] \"2016-02-01\"\n## \n## $data$dates[[76]]\n## [1] \"2016-03-01\"\n## \n## $data$dates[[77]]\n## [1] \"2016-04-01\"\n## \n## $data$dates[[78]]\n## [1] \"2016-05-01\"\n## \n## $data$dates[[79]]\n## [1] \"2016-06-01\"\n## \n## $data$dates[[80]]\n## [1] \"2016-07-01\"\n## \n## $data$dates[[81]]\n## [1] \"2016-08-01\"\n## \n## $data$dates[[82]]\n## [1] \"2016-09-01\"\n## \n## $data$dates[[83]]\n## [1] \"2016-10-01\"\n## \n## $data$dates[[84]]\n## [1] \"2016-11-01\"\n## \n## $data$dates[[85]]\n## [1] \"2016-12-01\"\n## \n## $data$dates[[86]]\n## [1] \"2017-01-01\"\n## \n## $data$dates[[87]]\n## [1] \"2017-02-01\"\n## \n## $data$dates[[88]]\n## [1] \"2017-03-01\"\n## \n## $data$dates[[89]]\n## [1] \"2017-04-01\"\n## \n## $data$dates[[90]]\n## [1] \"2017-05-01\"\n## \n## $data$dates[[91]]\n## [1] \"2017-06-01\"\n## \n## $data$dates[[92]]\n## [1] \"2017-07-01\"\n## \n## $data$dates[[93]]\n## [1] \"2017-08-01\"\n## \n## $data$dates[[94]]\n## [1] \"2017-09-01\"\n## \n## $data$dates[[95]]\n## [1] \"2017-10-01\"\n## \n## $data$dates[[96]]\n## [1] \"2017-11-01\"\n## \n## $data$dates[[97]]\n## [1] \"2017-12-01\"\n## \n## $data$dates[[98]]\n## [1] \"2018-01-01\"\n## \n## $data$dates[[99]]\n## [1] \"2018-02-01\"\n## \n## $data$dates[[100]]\n## [1] \"2018-03-01\"\n## \n## $data$dates[[101]]\n## [1] \"2018-04-01\"\n## \n## $data$dates[[102]]\n## [1] \"2018-05-01\"\n## \n## $data$dates[[103]]\n## [1] \"2018-06-01\"\n## \n## $data$dates[[104]]\n## [1] \"2018-07-01\"\n## \n## $data$dates[[105]]\n## [1] \"2018-08-01\"\n## \n## $data$dates[[106]]\n## [1] \"2018-09-01\"\n## \n## $data$dates[[107]]\n## [1] \"2018-10-01\"\n## \n## $data$dates[[108]]\n## [1] \"2018-11-01\"\n## \n## $data$dates[[109]]\n## [1] \"2018-12-01\"\n## \n## $data$dates[[110]]\n## [1] \"2019-01-01\"\n## \n## $data$dates[[111]]\n## [1] \"2019-02-01\"\n## \n## $data$dates[[112]]\n## [1] \"2019-03-01\"\n## \n## $data$dates[[113]]\n## [1] \"2019-04-01\"\n## \n## $data$dates[[114]]\n## [1] \"2019-05-01\"\n## \n## $data$dates[[115]]\n## [1] \"2019-06-01\"\n## \n## $data$dates[[116]]\n## [1] \"2019-07-01\"\n## \n## $data$dates[[117]]\n## [1] \"2019-08-01\"\n## \n## $data$dates[[118]]\n## [1] \"2019-09-01\"\n## \n## $data$dates[[119]]\n## [1] \"2019-10-01\"\n## \n## $data$dates[[120]]\n## [1] \"2019-11-01\"\n## \n## $data$dates[[121]]\n## [1] \"2019-12-01\"\n## \n## $data$dates[[122]]\n## [1] \"2020-01-01\"\n## \n## $data$dates[[123]]\n## [1] \"2020-02-01\"\n## \n## $data$dates[[124]]\n## [1] \"2020-03-01\"\n## \n## $data$dates[[125]]\n## [1] \"2020-04-01\"\n## \n## $data$dates[[126]]\n## [1] \"2020-05-01\"\n## \n## $data$dates[[127]]\n## [1] \"2020-06-01\"\n## \n## $data$dates[[128]]\n## [1] \"2020-07-01\"\n## \n## $data$dates[[129]]\n## [1] \"2020-08-01\"\n## \n## $data$dates[[130]]\n## [1] \"2020-09-01\"\n## \n## $data$dates[[131]]\n## [1] \"2020-10-01\"\n## \n## $data$dates[[132]]\n## [1] \"2021-01-01\"\n## \n## $data$dates[[133]]\n## [1] \"2021-04-01\"\n## \n## $data$dates[[134]]\n## [1] \"2021-07-01\"\n## \n## $data$dates[[135]]\n## [1] \"2021-10-01\"\n## \n## $data$dates[[136]]\n## [1] \"2022-01-01\"\n## \n## $data$dates[[137]]\n## [1] \"2022-04-01\"\n## \n## \n## $data$status\n## $data$status[[1]]\n## [1] \"Final\"\n## \n## $data$status[[2]]\n## [1] \"Final\"\n## \n## $data$status[[3]]\n## [1] \"Final\"\n## \n## $data$status[[4]]\n## [1] \"Final\"\n## \n## $data$status[[5]]\n## [1] \"Final\"\n## \n## $data$status[[6]]\n## [1] \"Final\"\n## \n## $data$status[[7]]\n## [1] \"Final\"\n## \n## $data$status[[8]]\n## [1] \"Final\"\n## \n## $data$status[[9]]\n## [1] \"Final\"\n## \n## $data$status[[10]]\n## [1] \"Final\"\n## \n## $data$status[[11]]\n## [1] \"Final\"\n## \n## $data$status[[12]]\n## [1] \"Final\"\n## \n## $data$status[[13]]\n## [1] \"Final\"\n## \n## $data$status[[14]]\n## [1] \"Final\"\n## \n## $data$status[[15]]\n## [1] \"Final\"\n## \n## $data$status[[16]]\n## [1] \"Final\"\n## \n## $data$status[[17]]\n## [1] \"Final\"\n## \n## $data$status[[18]]\n## [1] \"Final\"\n## \n## $data$status[[19]]\n## [1] \"Final\"\n## \n## $data$status[[20]]\n## [1] \"Final\"\n## \n## $data$status[[21]]\n## [1] \"Final\"\n## \n## $data$status[[22]]\n## [1] \"Final\"\n## \n## $data$status[[23]]\n## [1] \"Final\"\n## \n## $data$status[[24]]\n## [1] \"Final\"\n## \n## $data$status[[25]]\n## [1] \"Final\"\n## \n## $data$status[[26]]\n## [1] \"Final\"\n## \n## $data$status[[27]]\n## [1] \"Final\"\n## \n## $data$status[[28]]\n## [1] \"Final\"\n## \n## $data$status[[29]]\n## [1] \"Final\"\n## \n## $data$status[[30]]\n## [1] \"Final\"\n## \n## $data$status[[31]]\n## [1] \"Final\"\n## \n## $data$status[[32]]\n## [1] \"Final\"\n## \n## $data$status[[33]]\n## [1] \"Final\"\n## \n## $data$status[[34]]\n## [1] \"Final\"\n## \n## $data$status[[35]]\n## [1] \"Final\"\n## \n## $data$status[[36]]\n## [1] \"Final\"\n## \n## $data$status[[37]]\n## [1] \"Final\"\n## \n## $data$status[[38]]\n## [1] \"Final\"\n## \n## $data$status[[39]]\n## [1] \"Final\"\n## \n## $data$status[[40]]\n## [1] \"Final\"\n## \n## $data$status[[41]]\n## [1] \"Final\"\n## \n## $data$status[[42]]\n## [1] \"Final\"\n## \n## $data$status[[43]]\n## [1] \"Final\"\n## \n## $data$status[[44]]\n## [1] \"Final\"\n## \n## $data$status[[45]]\n## [1] \"Final\"\n## \n## $data$status[[46]]\n## [1] \"Final\"\n## \n## $data$status[[47]]\n## [1] \"Final\"\n## \n## $data$status[[48]]\n## [1] \"Final\"\n## \n## $data$status[[49]]\n## [1] \"Final\"\n## \n## $data$status[[50]]\n## [1] \"Final\"\n## \n## $data$status[[51]]\n## [1] \"Final\"\n## \n## $data$status[[52]]\n## [1] \"Final\"\n## \n## $data$status[[53]]\n## [1] \"Final\"\n## \n## $data$status[[54]]\n## [1] \"Final\"\n## \n## $data$status[[55]]\n## [1] \"Final\"\n## \n## $data$status[[56]]\n## [1] \"Final\"\n## \n## $data$status[[57]]\n## [1] \"Final\"\n## \n## $data$status[[58]]\n## [1] \"Final\"\n## \n## $data$status[[59]]\n## [1] \"Final\"\n## \n## $data$status[[60]]\n## [1] \"Final\"\n## \n## $data$status[[61]]\n## [1] \"Final\"\n## \n## $data$status[[62]]\n## [1] \"Final\"\n## \n## $data$status[[63]]\n## [1] \"Final\"\n## \n## $data$status[[64]]\n## [1] \"Final\"\n## \n## $data$status[[65]]\n## [1] \"Final\"\n## \n## $data$status[[66]]\n## [1] \"Final\"\n## \n## $data$status[[67]]\n## [1] \"Final\"\n## \n## $data$status[[68]]\n## [1] \"Final\"\n## \n## $data$status[[69]]\n## [1] \"Final\"\n## \n## $data$status[[70]]\n## [1] \"Final\"\n## \n## $data$status[[71]]\n## [1] \"Final\"\n## \n## $data$status[[72]]\n## [1] \"Final\"\n## \n## $data$status[[73]]\n## [1] \"Final\"\n## \n## $data$status[[74]]\n## [1] \"Final\"\n## \n## $data$status[[75]]\n## [1] \"Final\"\n## \n## $data$status[[76]]\n## [1] \"Final\"\n## \n## $data$status[[77]]\n## [1] \"Final\"\n## \n## $data$status[[78]]\n## [1] \"Final\"\n## \n## $data$status[[79]]\n## [1] \"Final\"\n## \n## $data$status[[80]]\n## [1] \"Final\"\n## \n## $data$status[[81]]\n## [1] \"Final\"\n## \n## $data$status[[82]]\n## [1] \"Final\"\n## \n## $data$status[[83]]\n## [1] \"Final\"\n## \n## $data$status[[84]]\n## [1] \"Final\"\n## \n## $data$status[[85]]\n## [1] \"Final\"\n## \n## $data$status[[86]]\n## [1] \"Final\"\n## \n## $data$status[[87]]\n## [1] \"Final\"\n## \n## $data$status[[88]]\n## [1] \"Final\"\n## \n## $data$status[[89]]\n## [1] \"Final\"\n## \n## $data$status[[90]]\n## [1] \"Final\"\n## \n## $data$status[[91]]\n## [1] \"Final\"\n## \n## $data$status[[92]]\n## [1] \"Final\"\n## \n## $data$status[[93]]\n## [1] \"Final\"\n## \n## $data$status[[94]]\n## [1] \"Final\"\n## \n## $data$status[[95]]\n## [1] \"Final\"\n## \n## $data$status[[96]]\n## [1] \"Final\"\n## \n## $data$status[[97]]\n## [1] \"Final\"\n## \n## $data$status[[98]]\n## [1] \"Final\"\n## \n## $data$status[[99]]\n## [1] \"Final\"\n## \n## $data$status[[100]]\n## [1] \"Final\"\n## \n## $data$status[[101]]\n## [1] \"Final\"\n## \n## $data$status[[102]]\n## [1] \"Final\"\n## \n## $data$status[[103]]\n## [1] \"Final\"\n## \n## $data$status[[104]]\n## [1] \"Final\"\n## \n## $data$status[[105]]\n## [1] \"Final\"\n## \n## $data$status[[106]]\n## [1] \"Final\"\n## \n## $data$status[[107]]\n## [1] \"Final\"\n## \n## $data$status[[108]]\n## [1] \"Final\"\n## \n## $data$status[[109]]\n## [1] \"Final\"\n## \n## $data$status[[110]]\n## [1] \"Final\"\n## \n## $data$status[[111]]\n## [1] \"Final\"\n## \n## $data$status[[112]]\n## [1] \"Final\"\n## \n## $data$status[[113]]\n## [1] \"Final\"\n## \n## $data$status[[114]]\n## [1] \"Final\"\n## \n## $data$status[[115]]\n## [1] \"Final\"\n## \n## $data$status[[116]]\n## [1] \"Final\"\n## \n## $data$status[[117]]\n## [1] \"Final\"\n## \n## $data$status[[118]]\n## [1] \"Final\"\n## \n## $data$status[[119]]\n## [1] \"Final\"\n## \n## $data$status[[120]]\n## [1] \"Final\"\n## \n## $data$status[[121]]\n## [1] \"Final\"\n## \n## $data$status[[122]]\n## [1] \"Final\"\n## \n## $data$status[[123]]\n## [1] \"Final\"\n## \n## $data$status[[124]]\n## [1] \"Final\"\n## \n## $data$status[[125]]\n## [1] \"Final\"\n## \n## $data$status[[126]]\n## [1] \"Final\"\n## \n## $data$status[[127]]\n## [1] \"Final\"\n## \n## $data$status[[128]]\n## [1] \"Final\"\n## \n## $data$status[[129]]\n## [1] \"Final\"\n## \n## $data$status[[130]]\n## [1] \"Final\"\n## \n## $data$status[[131]]\n## [1] \"Final\"\n## \n## $data$status[[132]]\n## [1] \"Final\"\n## \n## $data$status[[133]]\n## [1] \"Final\"\n## \n## $data$status[[134]]\n## [1] \"Final\"\n## \n## $data$status[[135]]\n## [1] \"Final\"\n## \n## $data$status[[136]]\n## [1] \"Final\"\n## \n## $data$status[[137]]\n## [1] \"Final\""
  },
  {
    "objectID": "presentation/index.html#section-43",
    "href": "presentation/index.html#section-43",
    "title": "APIs and web scraping",
    "section": "",
    "text": "content(r, \"text\")\n## [1] \"{\\\"ticker\\\":\\\"URATEMY\\\",\\\"description\\\":\\\"Malaysia - Unemployment\\\",\\\"geography\\\":\\\"Malaysia\\\",\\\"frequency\\\":\\\"M\\\",\\\"dataset\\\":\\\"BNM_UNEMP\\\",\\\"units\\\":\\\"% of labour force\\\",\\\"additional_metadata\\\":{\\\"2:Indicator\\\":\\\"120:Unemployment \\\",\\\"GEO:None\\\":\\\"130:None\\\"},\\\"data\\\":{\\\"values\\\":[3.2,3.5,3.5,3.5,3.1,3.2,3.6,3.2,3.1,3.0,2.8,3.0,3.1,3.4,2.9,3.0,3.0,3.0,3.2,3.0,3.1,3.3,3.0,3.1,3.1,3.0,3.2,2.9,3.0,3.0,3.0,3.1,2.7,3.2,3.2,2.9,3.3,3.3,3.0,3.3,3.0,3.3,2.8,3.0,3.1,3.1,3.3,3.4,3.0,3.3,3.2,3.0,2.9,2.9,2.8,2.8,2.7,2.7,2.7,2.7,3.0,3.1,3.2,3.0,3.0,3.1,3.2,3.2,3.2,3.3,3.3,3.2,3.4,3.4,3.4,3.5,3.5,3.4,3.4,3.5,3.5,3.5,3.5,3.4,3.5,3.5,3.5,3.4,3.4,3.4,3.4,3.5,3.4,3.4,3.4,3.3,3.3,3.4,3.3,3.3,3.3,3.3,3.4,3.4,3.4,3.3,3.3,3.3,3.3,3.3,3.3,3.4,3.4,3.3,3.3,3.3,3.3,3.3,3.2,3.2,3.3,3.2,3.3,3.9,5.0,5.3,4.9,4.7,4.7,4.629,4.689,4.8,4.8,4.7,4.3,4.1,3.9],\\\"dates\\\":[\\\"2001-10-01\\\",\\\"2010-01-01\\\",\\\"2010-02-01\\\",\\\"2010-03-01\\\",\\\"2010-04-01\\\",\\\"2010-05-01\\\",\\\"2010-06-01\\\",\\\"2010-07-01\\\",\\\"2010-08-01\\\",\\\"2010-09-01\\\",\\\"2010-10-01\\\",\\\"2010-11-01\\\",\\\"2010-12-01\\\",\\\"2011-01-01\\\",\\\"2011-02-01\\\",\\\"2011-03-01\\\",\\\"2011-04-01\\\",\\\"2011-05-01\\\",\\\"2011-06-01\\\",\\\"2011-07-01\\\",\\\"2011-08-01\\\",\\\"2011-09-01\\\",\\\"2011-10-01\\\",\\\"2011-11-01\\\",\\\"2011-12-01\\\",\\\"2012-01-01\\\",\\\"2012-02-01\\\",\\\"2012-03-01\\\",\\\"2012-04-01\\\",\\\"2012-05-01\\\",\\\"2012-06-01\\\",\\\"2012-07-01\\\",\\\"2012-08-01\\\",\\\"2012-09-01\\\",\\\"2012-10-01\\\",\\\"2012-11-01\\\",\\\"2012-12-01\\\",\\\"2013-01-01\\\",\\\"2013-02-01\\\",\\\"2013-03-01\\\",\\\"2013-04-01\\\",\\\"2013-05-01\\\",\\\"2013-06-01\\\",\\\"2013-07-01\\\",\\\"2013-08-01\\\",\\\"2013-09-01\\\",\\\"2013-10-01\\\",\\\"2013-11-01\\\",\\\"2013-12-01\\\",\\\"2014-01-01\\\",\\\"2014-02-01\\\",\\\"2014-03-01\\\",\\\"2014-04-01\\\",\\\"2014-05-01\\\",\\\"2014-06-01\\\",\\\"2014-07-01\\\",\\\"2014-08-01\\\",\\\"2014-09-01\\\",\\\"2014-10-01\\\",\\\"2014-11-01\\\",\\\"2014-12-01\\\",\\\"2015-01-01\\\",\\\"2015-02-01\\\",\\\"2015-03-01\\\",\\\"2015-04-01\\\",\\\"2015-05-01\\\",\\\"2015-06-01\\\",\\\"2015-07-01\\\",\\\"2015-08-01\\\",\\\"2015-09-01\\\",\\\"2015-10-01\\\",\\\"2015-11-01\\\",\\\"2015-12-01\\\",\\\"2016-01-01\\\",\\\"2016-02-01\\\",\\\"2016-03-01\\\",\\\"2016-04-01\\\",\\\"2016-05-01\\\",\\\"2016-06-01\\\",\\\"2016-07-01\\\",\\\"2016-08-01\\\",\\\"2016-09-01\\\",\\\"2016-10-01\\\",\\\"2016-11-01\\\",\\\"2016-12-01\\\",\\\"2017-01-01\\\",\\\"2017-02-01\\\",\\\"2017-03-01\\\",\\\"2017-04-01\\\",\\\"2017-05-01\\\",\\\"2017-06-01\\\",\\\"2017-07-01\\\",\\\"2017-08-01\\\",\\\"2017-09-01\\\",\\\"2017-10-01\\\",\\\"2017-11-01\\\",\\\"2017-12-01\\\",\\\"2018-01-01\\\",\\\"2018-02-01\\\",\\\"2018-03-01\\\",\\\"2018-04-01\\\",\\\"2018-05-01\\\",\\\"2018-06-01\\\",\\\"2018-07-01\\\",\\\"2018-08-01\\\",\\\"2018-09-01\\\",\\\"2018-10-01\\\",\\\"2018-11-01\\\",\\\"2018-12-01\\\",\\\"2019-01-01\\\",\\\"2019-02-01\\\",\\\"2019-03-01\\\",\\\"2019-04-01\\\",\\\"2019-05-01\\\",\\\"2019-06-01\\\",\\\"2019-07-01\\\",\\\"2019-08-01\\\",\\\"2019-09-01\\\",\\\"2019-10-01\\\",\\\"2019-11-01\\\",\\\"2019-12-01\\\",\\\"2020-01-01\\\",\\\"2020-02-01\\\",\\\"2020-03-01\\\",\\\"2020-04-01\\\",\\\"2020-05-01\\\",\\\"2020-06-01\\\",\\\"2020-07-01\\\",\\\"2020-08-01\\\",\\\"2020-09-01\\\",\\\"2020-10-01\\\",\\\"2021-01-01\\\",\\\"2021-04-01\\\",\\\"2021-07-01\\\",\\\"2021-10-01\\\",\\\"2022-01-01\\\",\\\"2022-04-01\\\"],\\\"status\\\":[\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\",\\\"Final\\\"]}}\"\n\n\n \n{\n    \"ticker\": \"URATEMY\",\n    \"description\": \"Malaysia - Unemployment\",\n    \"geography\": \"Malaysia\",\n    \"frequency\": \"M\",\n    \"dataset\": \"BNM_UNEMP\",\n    \"units\": \"% of labour force\",\n    \"additional_metadata\": {\n        \"2:Indicator\": \"120:Unemployment \",\n        \"GEO:None\": \"130:None\"\n    },\n    \"data\": {\n        \"values\": [\n            3.2,\n            3.5,\n            3.5,\n            3.5,\n            3.1,\n            ..."
  },
  {
    "objectID": "presentation/index.html#section-44",
    "href": "presentation/index.html#section-44",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(jsonlite)\napi_data <- data.frame(fromJSON(content(r, \"text\"))$data)\n\n\n## # A tibble: 137 × 3\n##    values dates      status\n##     <dbl> <chr>      <chr> \n##  1    3.2 2001-10-01 Final \n##  2    3.5 2010-01-01 Final \n##  3    3.5 2010-02-01 Final \n##  4    3.5 2010-03-01 Final \n##  5    3.1 2010-04-01 Final \n##  6    3.2 2010-05-01 Final \n##  7    3.6 2010-06-01 Final \n##  8    3.2 2010-07-01 Final \n##  9    3.1 2010-08-01 Final \n## 10    3   2010-09-01 Final \n## # … with 127 more rows"
  },
  {
    "objectID": "presentation/index.html#section-45",
    "href": "presentation/index.html#section-45",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(ggplot2)\nlibrary(lubridate)\n\napi_data_clean <- api_data %>% \n  mutate(dates = ymd(dates)) %>% \n  filter(dates > ymd(\"2010-01-01\"))\n\nggplot(api_data_clean, aes(x = dates, y = values)) +\n  geom_line() +\n  labs(x = NULL, y = \"Unemployment rate\\nin Malaysia\")"
  },
  {
    "objectID": "presentation/index.html#your-turn-3",
    "href": "presentation/index.html#your-turn-3",
    "title": "APIs and web scraping",
    "section": "Your turn!",
    "text": "Your turn!"
  },
  {
    "objectID": "presentation/index.html#every-api-is-different",
    "href": "presentation/index.html#every-api-is-different",
    "title": "APIs and web scraping",
    "section": "Every API is different",
    "text": "Every API is different\n\n\nEach API will accept different arguments, use different URLs, return different variables and formats\nRead the documentation!"
  },
  {
    "objectID": "presentation/index.html#api-authentication",
    "href": "presentation/index.html#api-authentication",
    "title": "APIs and web scraping",
    "section": "API authentication",
    "text": "API authentication\n\nServices will often limit your access\n\n\n\nRate limiting (x API calls/hour)\nSubscription limiting (must have an account)"
  },
  {
    "objectID": "presentation/index.html#logging-in-to-an-api",
    "href": "presentation/index.html#logging-in-to-an-api",
    "title": "APIs and web scraping",
    "section": "“Logging in” to an API",
    "text": "“Logging in” to an API\n\n\n\nAPI key\nA special parameter that you must include in the query\n\noAuth authentication\nA special file called a “token” that contains the login information for the service\nHow to create an oAuth token with R"
  },
  {
    "objectID": "presentation/index.html#section-46",
    "href": "presentation/index.html#section-46",
    "title": "APIs and web scraping",
    "section": "",
    "text": "Polygon.io"
  },
  {
    "objectID": "presentation/index.html#section-47",
    "href": "presentation/index.html#section-47",
    "title": "APIs and web scraping",
    "section": "",
    "text": "Polygon API keys"
  },
  {
    "objectID": "presentation/index.html#section-48",
    "href": "presentation/index.html#section-48",
    "title": "APIs and web scraping",
    "section": "",
    "text": "Polygon API documentation"
  },
  {
    "objectID": "presentation/index.html#section-49",
    "href": "presentation/index.html#section-49",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(httr)\npolygon_url <- modify_url(\n  \"https://api.polygon.io\",\n  path = \"v2/aggs/ticker/AAPL/range/1/day/2022-08-01/2022-09-09\",\n  query = list(apiKey = \"SUPER_SECRET_THING\")\n)\n\n \nr <- GET(polygon_url)\nr\n## Response [https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/\n## 2022-08-01/2022-09-09?apiKey=SUPER_SECRET_THING]\n##   Date: 2022-09-11 16:45\n##   Status: 200\n##   Content-Type: application/json\n##   Size: 3.25 kB"
  },
  {
    "objectID": "presentation/index.html#section-50",
    "href": "presentation/index.html#section-50",
    "title": "APIs and web scraping",
    "section": "",
    "text": "content(r, \"text\")\n## [1] \"{\\\"ticker\\\":\\\"AAPL\\\",\\\"queryCount\\\":29,\\\"resultsCount\\\":29,\\\"adjusted\\\":true,\\\"results\\\":[{\\\"v\\\":6.7778379e+07,\\\"vw\\\":162.1045,\\\"o\\\":161.01,\\\"c\\\":161.51,\\\"h\\\":163.59,\\\"l\\\":160.89,\\\"t\\\":1659326400000,\\\"n\\\":594290},{\\\"v\\\":5.9907025e+07,\\\"vw\\\":160.6921,\\\"o\\\":160.1,\\\"c\\\":160.01,\\\"h\\\":162.41,\\\"l\\\":159.63,\\\"t\\\":1659412800000,\\\"n\\\":543549},{\\\"v\\\":8.2507488e+07,\\\"vw\\\":164.9105,\\\"o\\\":160.84,\\\"c\\\":166.13,\\\"h\\\":166.59,\\\"l\\\":160.75,\\\"t\\\":1659499200000,\\\"n\\\":682781},{\\\"v\\\":5.5474144e+07,\\\"vw\\\":165.5946,\\\"o\\\":166.005,\\\"c\\\":165.81,\\\"h\\\":167.19,\\\"l\\\":164.43,\\\"t\\\":1659585600000,\\\"n\\\":525012},{\\\"v\\\":5.6696985e+07,\\\"vw\\\":164.7432,\\\"o\\\":163.21,\\\"c\\\":165.35,\\\"h\\\":165.85,\\\"l\\\":163,\\\"t\\\":1659672000000,\\\"n\\\":491310},{\\\"v\\\":6.0362338e+07,\\\"vw\\\":165.8939,\\\"o\\\":166.37,\\\"c\\\":164.87,\\\"h\\\":167.81,\\\"l\\\":164.2,\\\"t\\\":1659931200000,\\\"n\\\":540017},{\\\"v\\\":6.3075503e+07,\\\"vw\\\":164.8395,\\\"o\\\":164.02,\\\"c\\\":164.92,\\\"h\\\":165.82,\\\"l\\\":163.25,\\\"t\\\":1660017600000,\\\"n\\\":480552},{\\\"v\\\":7.017054e+07,\\\"vw\\\":168.3496,\\\"o\\\":167.68,\\\"c\\\":169.24,\\\"h\\\":169.34,\\\"l\\\":166.9,\\\"t\\\":1660104000000,\\\"n\\\":559789},{\\\"v\\\":5.7142109e+07,\\\"vw\\\":169.3737,\\\"o\\\":170.06,\\\"c\\\":168.49,\\\"h\\\":170.99,\\\"l\\\":168.19,\\\"t\\\":1660190400000,\\\"n\\\":507914},{\\\"v\\\":6.8039382e+07,\\\"vw\\\":171.0754,\\\"o\\\":169.82,\\\"c\\\":172.1,\\\"h\\\":172.17,\\\"l\\\":169.4,\\\"t\\\":1660276800000,\\\"n\\\":557624},{\\\"v\\\":5.4091694e+07,\\\"vw\\\":172.6254,\\\"o\\\":171.52,\\\"c\\\":173.19,\\\"h\\\":173.39,\\\"l\\\":171.345,\\\"t\\\":1660536000000,\\\"n\\\":501625},{\\\"v\\\":5.637705e+07,\\\"vw\\\":172.7427,\\\"o\\\":172.78,\\\"c\\\":173.03,\\\"h\\\":173.71,\\\"l\\\":171.6618,\\\"t\\\":1660622400000,\\\"n\\\":515134},{\\\"v\\\":7.9542037e+07,\\\"vw\\\":174.3135,\\\"o\\\":172.77,\\\"c\\\":174.55,\\\"h\\\":176.15,\\\"l\\\":172.57,\\\"t\\\":1660708800000,\\\"n\\\":686577},{\\\"v\\\":6.2290075e+07,\\\"vw\\\":174.1366,\\\"o\\\":173.75,\\\"c\\\":174.15,\\\"h\\\":174.9,\\\"l\\\":173.12,\\\"t\\\":1660795200000,\\\"n\\\":545655},{\\\"v\\\":7.0336995e+07,\\\"vw\\\":172.2302,\\\"o\\\":173.03,\\\"c\\\":171.52,\\\"h\\\":173.74,\\\"l\\\":171.3101,\\\"t\\\":1660881600000,\\\"n\\\":573126},{\\\"v\\\":6.8975809e+07,\\\"vw\\\":168.2677,\\\"o\\\":169.69,\\\"c\\\":167.57,\\\"h\\\":169.86,\\\"l\\\":167.135,\\\"t\\\":1661140800000,\\\"n\\\":620800},{\\\"v\\\":5.4147079e+07,\\\"vw\\\":167.6231,\\\"o\\\":167.08,\\\"c\\\":167.23,\\\"h\\\":168.71,\\\"l\\\":166.65,\\\"t\\\":1661227200000,\\\"n\\\":494686},{\\\"v\\\":5.3841524e+07,\\\"vw\\\":167.3144,\\\"o\\\":167.32,\\\"c\\\":167.53,\\\"h\\\":168.11,\\\"l\\\":166.245,\\\"t\\\":1661313600000,\\\"n\\\":476970},{\\\"v\\\":5.1218209e+07,\\\"vw\\\":169.3503,\\\"o\\\":168.78,\\\"c\\\":170.03,\\\"h\\\":170.14,\\\"l\\\":168.35,\\\"t\\\":1661400000000,\\\"n\\\":465398},{\\\"v\\\":7.896098e+07,\\\"vw\\\":165.9997,\\\"o\\\":170.57,\\\"c\\\":163.62,\\\"h\\\":171.05,\\\"l\\\":163.56,\\\"t\\\":1661486400000,\\\"n\\\":722008},{\\\"v\\\":7.3313953e+07,\\\"vw\\\":161.5291,\\\"o\\\":161.145,\\\"c\\\":161.38,\\\"h\\\":162.9,\\\"l\\\":159.82,\\\"t\\\":1661745600000,\\\"n\\\":640593},{\\\"v\\\":7.7906197e+07,\\\"vw\\\":159.2926,\\\"o\\\":162.13,\\\"c\\\":158.91,\\\"h\\\":162.56,\\\"l\\\":157.72,\\\"t\\\":1661832000000,\\\"n\\\":644671},{\\\"v\\\":8.7991091e+07,\\\"vw\\\":158.3972,\\\"o\\\":160.305,\\\"c\\\":157.22,\\\"h\\\":160.58,\\\"l\\\":157.14,\\\"t\\\":1661918400000,\\\"n\\\":606827},{\\\"v\\\":7.4229896e+07,\\\"vw\\\":156.5232,\\\"o\\\":156.64,\\\"c\\\":157.96,\\\"h\\\":158.42,\\\"l\\\":154.67,\\\"t\\\":1662004800000,\\\"n\\\":654667},{\\\"v\\\":7.6807768e+07,\\\"vw\\\":157.6597,\\\"o\\\":159.75,\\\"c\\\":155.81,\\\"h\\\":160.362,\\\"l\\\":154.965,\\\"t\\\":1662091200000,\\\"n\\\":646414},{\\\"v\\\":7.3714843e+07,\\\"vw\\\":155.012,\\\"o\\\":156.47,\\\"c\\\":154.53,\\\"h\\\":157.09,\\\"l\\\":153.69,\\\"t\\\":1662436800000,\\\"n\\\":687436},{\\\"v\\\":8.7293824e+07,\\\"vw\\\":155.306,\\\"o\\\":154.825,\\\"c\\\":155.96,\\\"h\\\":156.67,\\\"l\\\":153.61,\\\"t\\\":1662523200000,\\\"n\\\":696954},{\\\"v\\\":8.4909447e+07,\\\"vw\\\":154.3949,\\\"o\\\":154.64,\\\"c\\\":154.46,\\\"h\\\":156.36,\\\"l\\\":152.68,\\\"t\\\":1662609600000,\\\"n\\\":697264},{\\\"v\\\":6.8081006e+07,\\\"vw\\\":156.6625,\\\"o\\\":155.47,\\\"c\\\":157.37,\\\"h\\\":157.82,\\\"l\\\":154.75,\\\"t\\\":1662696000000,\\\"n\\\":532851}],\\\"status\\\":\\\"OK\\\",\\\"request_id\\\":\\\"bffe0b9cec51d2103b1f6cac6cd63341\\\",\\\"count\\\":29}\"\n\n \n{\n    \"ticker\": \"AAPL\",\n    \"queryCount\": 29,\n    \"resultsCount\": 29,\n    \"adjusted\": true,\n    \"results\": [\n        {\n            \"v\": 6.7778379e+07,\n            \"vw\": 162.1045,\n            \"o\": 161.01,\n            \"c\": 161.51,\n            \"h\": 163.59,\n            \"l\": 160.89,\n            \"t\": 1659326400000,\n            \"n\": 594290\n        },\n        {\n            \"v\": 5.9907025e+07,\n            \"vw\": 160.6921,\n            \"o\": 160.1,\n            \"c\": 160.01,\n            \"h\": 162.41,\n            \"l\": 159.63,\n            \"t\": 1659412800000,\n            \"n\": 543549\n        },\n        ..."
  },
  {
    "objectID": "presentation/index.html#section-51",
    "href": "presentation/index.html#section-51",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(ggplot2)\nlibrary(lubridate)\n\naapl <- data.frame(fromJSON(content(r, \"text\"))$results) %>% \n  mutate(ts = as_datetime(t / 1000))\n  \nggplot(aapl, aes(x = ts, y = c)) +\n  geom_line() +\n  labs(x = NULL, y = \"Closing stock price\", title = \"AAPL stock price\", \n       subtitle = \"August 1-September 9, 2022\", caption = \"Source: Polygon.io\")"
  },
  {
    "objectID": "presentation/index.html#make-your-own-api",
    "href": "presentation/index.html#make-your-own-api",
    "title": "APIs and web scraping",
    "section": "Make your own API",
    "text": "Make your own API\n\n\n{plumber} R package"
  },
  {
    "objectID": "presentation/index.html#what-if-theres-no-api",
    "href": "presentation/index.html#what-if-theres-no-api",
    "title": "APIs and web scraping",
    "section": "What if there’s no API? :(",
    "text": "What if there’s no API? :(\n\n\nCopy and paste\nScrape the website(fancy copying and pasting)"
  },
  {
    "objectID": "presentation/index.html#section-52",
    "href": "presentation/index.html#section-52",
    "title": "APIs and web scraping",
    "section": "",
    "text": "{rvest} R package"
  },
  {
    "objectID": "presentation/index.html#section-53",
    "href": "presentation/index.html#section-53",
    "title": "APIs and web scraping",
    "section": "",
    "text": "List of Fed Chairs, Wikipedia"
  },
  {
    "objectID": "presentation/index.html#section-54",
    "href": "presentation/index.html#section-54",
    "title": "APIs and web scraping",
    "section": "",
    "text": "library(rvest)\n\nwiki_url <- \"https://en.wikipedia.org/wiki/Chair_of_the_Federal_Reserve\"\n\n# Even better to use the Internet Archive since web pages change over time\nwiki_url <- \"https://web.archive.org/web/20220908211042/https://en.wikipedia.org/wiki/Chair_of_the_Federal_Reserve\"\n\nwiki_raw <- read_html(wiki_url)\nwiki_raw\n\n## {html_document}\n## <html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">\n## [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset= ...\n## [2] <body class=\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-sub ..."
  },
  {
    "objectID": "presentation/index.html#section-55",
    "href": "presentation/index.html#section-55",
    "title": "APIs and web scraping",
    "section": "",
    "text": "List of Fed Chairs, Wikipedia"
  },
  {
    "objectID": "presentation/index.html#section-56",
    "href": "presentation/index.html#section-56",
    "title": "APIs and web scraping",
    "section": "",
    "text": "List of Fed Chairs, Wikipedia"
  },
  {
    "objectID": "presentation/index.html#section-57",
    "href": "presentation/index.html#section-57",
    "title": "APIs and web scraping",
    "section": "",
    "text": "wiki_raw %>% \n  html_nodes(xpath = \"/html/body/div[3]/div[3]/div[5]/div[1]/table[2]\") \n\n{xml_nodeset (1)}\n[1] <table class=\"wikitable\" style=\"text-align:center\"><tbody>\\n<tr>\\n<t ..."
  },
  {
    "objectID": "presentation/index.html#section-58",
    "href": "presentation/index.html#section-58",
    "title": "APIs and web scraping",
    "section": "",
    "text": "wiki_raw %>% \n  html_nodes(xpath = \"/html/body/div[3]/div[3]/div[5]/div[1]/table[2]\") %>% \n  html_table()\n\n[[1]]\n# A tibble: 18 × 7\n   `#`   Portrait   `Name(birth–death)`     Term …¹ Term …² Tenur…³ Appoi…⁴\n   <chr> <chr>      <chr>                   <chr>   <chr>   <chr>   <chr>  \n 1 #     \"Portrait\" Name(birth–death)       Start … End of… Tenure… Appoin…\n 2 -     \"\"         William Gibbs McAdoo(1… Decemb… August… 230 da… ex off…\n 3 1     \"\"         Charles Sumner Hamlin(… August… August… 1 year… Woodro…\n 4 2     \"\"         William P. G. Harding(… August… August… 5 year… Woodro…\n 5 3     \"\"         Daniel Richard Crissin… May 1,… Septem… 4 year… Warren…\n 6 4     \"\"         Roy A. Young(1882–1960) Octobe… August… 2 year… Calvin…\n 7 5     \"\"         Eugene Meyer(1875–1959) Septem… May 10… 2 year… Herber…\n 8 6     \"\"         Eugene Robert Black(18… May 19… August… 1 year… Frankl…\n 9 7     \"\"         Marriner S. Eccles[d](… Novemb… Januar… 13 yea… Frankl…\n10 8     \"\"         Thomas B. McCabe(1893–… April … March … 2 year… Harry …\n11 9     \"\"         William McChesney Mart… April … Januar… 18 yea… Harry …\n12 10    \"\"         Arthur F. Burns[e](190… Februa… Januar… 7 year… Richar…\n13 11    \"\"         G. William Miller(1925… March … August… 1 year… Jimmy …\n14 12    \"\"         Paul Volcker(1927–2019) August… August… 8 year… Jimmy …\n15 13    \"\"         Alan Greenspan[f](born… August… Januar… 18 yea… Ronald…\n16 14    \"\"         Ben Bernanke(born 1953) Februa… Januar… 7 year… George…\n17 15    \"\"         Janet Yellen(born 1946) Februa… Februa… 4 year… Barack…\n18 16    \"\"         Jerome Powell[g](born … Februa… Incumb… 4 year… Donald…\n# … with abbreviated variable names ¹​`Term of office[b]`,\n#   ²​`Term of office[b]`, ³​`Tenure length`, ⁴​`Appointed by`"
  },
  {
    "objectID": "presentation/index.html#section-59",
    "href": "presentation/index.html#section-59",
    "title": "APIs and web scraping",
    "section": "",
    "text": "wiki_raw %>% \n  html_nodes(xpath = \"/html/body/div[3]/div[3]/div[5]/div[1]/table[2]\") %>% \n  html_table() %>% \n  bind_rows()\n\n# A tibble: 18 × 7\n   `#`   Portrait   `Name(birth–death)`     Term …¹ Term …² Tenur…³ Appoi…⁴\n   <chr> <chr>      <chr>                   <chr>   <chr>   <chr>   <chr>  \n 1 #     \"Portrait\" Name(birth–death)       Start … End of… Tenure… Appoin…\n 2 -     \"\"         William Gibbs McAdoo(1… Decemb… August… 230 da… ex off…\n 3 1     \"\"         Charles Sumner Hamlin(… August… August… 1 year… Woodro…\n 4 2     \"\"         William P. G. Harding(… August… August… 5 year… Woodro…\n 5 3     \"\"         Daniel Richard Crissin… May 1,… Septem… 4 year… Warren…\n 6 4     \"\"         Roy A. Young(1882–1960) Octobe… August… 2 year… Calvin…\n 7 5     \"\"         Eugene Meyer(1875–1959) Septem… May 10… 2 year… Herber…\n 8 6     \"\"         Eugene Robert Black(18… May 19… August… 1 year… Frankl…\n 9 7     \"\"         Marriner S. Eccles[d](… Novemb… Januar… 13 yea… Frankl…\n10 8     \"\"         Thomas B. McCabe(1893–… April … March … 2 year… Harry …\n11 9     \"\"         William McChesney Mart… April … Januar… 18 yea… Harry …\n12 10    \"\"         Arthur F. Burns[e](190… Februa… Januar… 7 year… Richar…\n13 11    \"\"         G. William Miller(1925… March … August… 1 year… Jimmy …\n14 12    \"\"         Paul Volcker(1927–2019) August… August… 8 year… Jimmy …\n15 13    \"\"         Alan Greenspan[f](born… August… Januar… 18 yea… Ronald…\n16 14    \"\"         Ben Bernanke(born 1953) Februa… Januar… 7 year… George…\n17 15    \"\"         Janet Yellen(born 1946) Februa… Februa… 4 year… Barack…\n18 16    \"\"         Jerome Powell[g](born … Februa… Incumb… 4 year… Donald…\n# … with abbreviated variable names ¹​`Term of office[b]...4`,\n#   ²​`Term of office[b]...5`, ³​`Tenure length`, ⁴​`Appointed by`"
  },
  {
    "objectID": "presentation/index.html#section-60",
    "href": "presentation/index.html#section-60",
    "title": "APIs and web scraping",
    "section": "",
    "text": "wiki_clean <- wiki_raw %>% \n  html_nodes(xpath = \"/html/body/div[3]/div[3]/div[5]/div[1]/table[2]\") %>% \n  html_table() %>% \n  bind_rows() %>% \n  # Remove first row\n  slice(-1) %>% \n  # Extract name\n  separate(`Name(birth–death)`, into = c(\"Name\", \"birth-death\"), sep = \"\\\\(\") %>% \n  mutate(Name = str_remove(Name, \"\\\\[.\\\\]\")) %>% \n  # Calculate duration in office\n  mutate(tenure_length = as.period(`Tenure length`)) %>% \n  mutate(seconds = as.numeric(tenure_length)) %>% \n  mutate(years = seconds / 60 / 60 / 24 / 365.25) %>% \n  # Put name in order of duration\n  arrange(tenure_length) %>% \n  mutate(Name = fct_inorder(Name))"
  },
  {
    "objectID": "presentation/index.html#section-61",
    "href": "presentation/index.html#section-61",
    "title": "APIs and web scraping",
    "section": "",
    "text": "wiki_clean %>% \n  select(Name, `Tenure length`, years)\n\n# A tibble: 17 × 3\n   Name                      `Tenure length`     years\n   <fct>                     <chr>               <dbl>\n 1 William Gibbs McAdoo      230 days            0.630\n 2 Eugene Robert Black       1 year, 88 days     1.24 \n 3 G. William Miller         1 year, 151 days    1.41 \n 4 Charles Sumner Hamlin     1 year, 365 days    2.00 \n 5 Eugene Meyer              2 years, 236 days   2.65 \n 6 Roy A. Young              2 years, 331 days   2.91 \n 7 Thomas B. McCabe          2 years, 350 days   2.96 \n 8 Janet Yellen              4 years, 0 days     4    \n 9 Daniel Richard Crissinger 4 years, 137 days   4.38 \n10 Jerome Powell             4 years, 218 days   4.60 \n11 William P. G. Harding     5 years, 364 days   6.00 \n12 Arthur F. Burns           7 years, 364 days   8.00 \n13 Ben Bernanke              7 years, 364 days   8.00 \n14 Paul Volcker              8 years, 5 days     8.01 \n15 Marriner S. Eccles        13 years, 77 days  13.2  \n16 Alan Greenspan            18 years, 173 days 18.5  \n17 William McChesney Martin  18 years, 304 days 18.8"
  },
  {
    "objectID": "presentation/index.html#section-62",
    "href": "presentation/index.html#section-62",
    "title": "APIs and web scraping",
    "section": "",
    "text": "ggplot(wiki_clean, aes(x = years, y = Name)) +\n  geom_col(fill = \"darkgreen\") +\n  labs(x = \"Years in office\", y = NULL)"
  },
  {
    "objectID": "presentation/index.html#more-complex-scraping",
    "href": "presentation/index.html#more-complex-scraping",
    "title": "APIs and web scraping",
    "section": "More complex scraping",
    "text": "More complex scraping\n\n\nWhat if there are multiple tables, or entries, or sections, or web pages?\n\nStar Wars example\n\nLoops!\n\nDo it politely"
  },
  {
    "objectID": "presentation/index.html#your-turn-4",
    "href": "presentation/index.html#your-turn-4",
    "title": "APIs and web scraping",
    "section": "Your turn!",
    "text": "Your turn!"
  },
  {
    "objectID": "presentation/index.html#real-world-data-is-a-mess",
    "href": "presentation/index.html#real-world-data-is-a-mess",
    "title": "APIs and web scraping",
    "section": "Real world data is a mess",
    "text": "Real world data is a mess\n\n\nEvery dataset is unique\nEvery API is unique\nEvery website is unique"
  },
  {
    "objectID": "presentation/index.html#general-principles",
    "href": "presentation/index.html#general-principles",
    "title": "APIs and web scraping",
    "section": "General principles",
    "text": "General principles\n\n\nTry to use APIs to access data directly from data sources\n\nIdeally use a pre-built R package\nIf not, use {httr}\nConsider making an API package (best practices)\n\nIf there’s no API, scrape (politely) with {rvest}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Medical Research",
    "section": "",
    "text": "Jan. 4\n\nSession 6 videos are posted.\nOur final session, Basic Tables and Reproducible Publication, will tie everything together.\n\nJan. 3\n\nSession 5 videos are posted. It turned out to be a bit more advanced. I will record a simpler video if anyone got lost.\nSlides for session 6, basic modeling, are available\n\nDec. 12\n\nSession 4 videos are posted\nNo slides for Session 5\n\nNov. 16:\n\nSession 3 videos are posted\nIn response to feedback, future sessions will be mostly hands-on\nSession 4 slides are posted (shorter). I encourage reviewing them before the session.\nSession 4 is shorter, Nov. 23, 12:30-1\n\nNov. 15:\n\nSession 2 videos are posted\nNov. 16 slides are posted.\n\nNov. 4:\n\nSession 1 videos are posted\nNov. 4 and Nov. 9 slides are updated (material covered, and up next)\nSome registrants did not have the passcode to attend on Zoom. Please consult the original announcement or email me (see “contact” above) ahead of time! I will start the next session, Wed, 11/9 at 12 to help anyone with questions. It is easy to catch up!"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "R for Medical Research",
    "section": "Slides",
    "text": "Slides"
  },
  {
    "objectID": "presentation2/index.html#load-data",
    "href": "presentation2/index.html#load-data",
    "title": "R for Stata Users 1",
    "section": "Load Data",
    "text": "Load Data\n\ndf <- tibble(\n  id = c(\"id01\", \"id02\", \"id03\", \"id01\", \"id02\", \"id03\"),     \n  v1 = rep(c(\"M\", \"F\", \"M\"), 2),                          \n  v2 = seq(0, 10, by = 2) \n)\n\nwrite_csv(df, \"df.csv\")\ndf <- read_csv(\"df.csv\")\nfile.remove(\"df.csv\")\n\n[1] TRUE\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10\n\n\ntibble is a easy-to-read kind of data.frame, and similar to a dataset. You can create them manually, or from files."
  },
  {
    "objectID": "presentation2/index.html#select-columns",
    "href": "presentation2/index.html#select-columns",
    "title": "R for Stata Users 1",
    "section": "Select columns",
    "text": "Select columns\nTo select a few columns from a dataset:\n\n\n\nStata\nkeep id v1\n\n\ndplyr\ndf %>% select(id, v1)\n\n\n\nIn Stata, wildcards allow to select multiple variables. In dplyr, helper functions allow very similar results:\n\n\n\nStata\nkeep v*\n\n\ndplyr\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "presentation2/index.html#select",
    "href": "presentation2/index.html#select",
    "title": "R for Stata Users 1",
    "section": "Select",
    "text": "Select\n\ndf |> select(id, v1)\n\n# A tibble: 6 × 2\n  id    v1   \n  <chr> <chr>\n1 id01  M    \n2 id02  F    \n3 id03  M    \n4 id01  M    \n5 id02  F    \n6 id03  M    \n\ndf |> select(starts_with(\"v\"))\n\n# A tibble: 6 × 2\n  v1       v2\n  <chr> <dbl>\n1 M         0\n2 F         2\n3 M         4\n4 M         6\n5 F         8\n6 M        10"
  },
  {
    "objectID": "presentation2/index.html#select-columns-2",
    "href": "presentation2/index.html#select-columns-2",
    "title": "R for Stata Users 1",
    "section": "Select columns 2",
    "text": "Select columns 2\n\n\n\n\n\n\nNote\n\n\nContrary to Stata, R returns a new dataset without destroying the existing one. This does not always require more memory: when subsetting columns, the new dataset is a shallow copy of the existing one - at least until the new dataset is modified."
  },
  {
    "objectID": "presentation2/index.html#select-helpers",
    "href": "presentation2/index.html#select-helpers",
    "title": "R for Stata Users 1",
    "section": "Select helpers",
    "text": "Select helpers\nThis table gives the list of helper functions:\n\n\n\nStata\ndplyr\n\n\n\n\nkeep v*\nselect(df, starts_with(“v”))\n\n\nkeep *v\nselect(df, ends_with(“v”))\n\n\nkeep *v*\nselect(df, contains(“v”))\n\n\nkeep v?\nselect(df, matches(“^v.$”))\n\n\nkeep *\nselect(df, everything())\n\n\ndrop v1\nselect(df, -v1)\n\n\nkeep id-v2\nselect(df, id:v2)"
  },
  {
    "objectID": "presentation2/index.html#modify-columns",
    "href": "presentation2/index.html#modify-columns",
    "title": "R for Stata Users 1",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\nTo rename columns\nStata\nrename id id1\n\n\n\ndplyr\ndf %>% rename(id1 = id)\n\n\n\n\n\n\nTo reorder columns\nStata\norder v1\n\n\n\ndplyr\ndf %>% select(DT, v1, everything())"
  },
  {
    "objectID": "presentation2/index.html#quarto",
    "href": "presentation2/index.html#quarto",
    "title": "R for Stata Users 1",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see https://quarto.org/docs/presentations/."
  },
  {
    "objectID": "presentation2/index.html#bullets",
    "href": "presentation2/index.html#bullets",
    "title": "R for Stata Users 1",
    "section": "Bullets",
    "text": "Bullets\nWhen you click the Render button a document will be generated that includes:\n\nContent authored with markdown\nOutput from executable code"
  },
  {
    "objectID": "presentation2/index.html#code",
    "href": "presentation2/index.html#code",
    "title": "R for Stata Users 1",
    "section": "Code",
    "text": "Code\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\n\nfile.remove(\"df.csv\")\n\n[1] TRUE"
  },
  {
    "objectID": "presentation2/index.html#modify-columns-1",
    "href": "presentation2/index.html#modify-columns-1",
    "title": "R for Stata Users 1",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\nTo rename columns\nStata\nrename id id1\n\n\n\ndplyr\ndf %>% rename(id1 = id)\n\n\nTo reorder columns\nStata\norder v1\n\n\n\ndplyr\ndf %>% select(DT, v1, everything())"
  },
  {
    "objectID": "presentation2/index.html#modify-columns-2",
    "href": "presentation2/index.html#modify-columns-2",
    "title": "R for Stata Users 1",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\nTo create new columns\nStata\ngen new = 1\n\n\n\ndplyr\ndf %>% mutate(new = 1)\n\n\nTo modify a column\nStata\negen cov = cov(v1, v2)\n\n\n\ndplyr\ndf %>%  mutate(cov = cov(v1, v2))"
  },
  {
    "objectID": "presentation2/index.html#collapse-datasets",
    "href": "presentation2/index.html#collapse-datasets",
    "title": "R for Stata Users 1",
    "section": "Collapse Datasets",
    "text": "Collapse Datasets\n\n\n\n\n\n\n\n\nTo apply each function\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\n\n\n\n\n\n\n\n\n\nmultiple columns\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))"
  },
  {
    "objectID": "presentation2/index.html#modify-columns-3",
    "href": "presentation2/index.html#modify-columns-3",
    "title": "R for Stata Users 1",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\n\n\n\n\n\nTo apply a function\nStata\ntostring v1 v2, replace force\n\n\n\ndplyr\ndf %>% mutate(across(c(v1, v2), as.character))"
  },
  {
    "objectID": "presentation2/index.html#syntax",
    "href": "presentation2/index.html#syntax",
    "title": "R for Stata Users 1",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 6\n\n# hip\ndf |> nrow()\n\n[1] 6\n\n# hip also\ndf %>% nrow()\n\n[1] 6\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe place the variable behind it in the first position of the function."
  },
  {
    "objectID": "presentation2/index.html#why-bother",
    "href": "presentation2/index.html#why-bother",
    "title": "R for Stata Users 1",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |> \n  strsplit(split = \" \") |>\n  unlist() |> \n  unique() |> \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "presentation2/index.html#basics",
    "href": "presentation2/index.html#basics",
    "title": "R for Stata Users 1",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nTo select a few columns\nStata\nkeep id v1\n\n\n\ndplyr\ndf %>% select(id, v1)\n\n\nWildcard -> helper function\nStata\nkeep v*\n\n\n\ndplyr\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "presentation2/index.html#demo",
    "href": "presentation2/index.html#demo",
    "title": "R for Stata Users 1",
    "section": "Demo",
    "text": "Demo\n\ndf |> select(id, v1)\n\n# A tibble: 6 × 2\n  id    v1   \n  <chr> <chr>\n1 id01  M    \n2 id02  F    \n3 id03  M    \n4 id01  M    \n5 id02  F    \n6 id03  M    \n\ndf |> select(starts_with(\"v\"))\n\n# A tibble: 6 × 2\n  v1       v2\n  <chr> <dbl>\n1 M         0\n2 F         2\n3 M         4\n4 M         6\n5 F         8\n6 M        10"
  },
  {
    "objectID": "presentation2/index.html#under-the-hood",
    "href": "presentation2/index.html#under-the-hood",
    "title": "R for Stata Users 1",
    "section": "Under the hood",
    "text": "Under the hood\n\n\n\n\n\n\nNote\n\n\nContrary to Stata, R returns a new dataset without destroying the existing one. This does not always require more memory: when subsetting columns, the new dataset is a shallow copy of the existing one - at least until the new dataset is modified."
  },
  {
    "objectID": "presentation2/index.html#basics-1",
    "href": "presentation2/index.html#basics-1",
    "title": "R for Stata Users 1",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nTo apply each function\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\nmultiple columns\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\nBy group\nStata\ncollapse (mean) v1 (sd) v2, by(id)\n\n\n\ndplyr\ndf %\\>% group_by(id) %>% summarize(mean(v1), sd(v2))\n\n\n\nNote: we will discuss group_by() more later."
  },
  {
    "objectID": "presentation2/index.html#demo-1",
    "href": "presentation2/index.html#demo-1",
    "title": "R for Stata Users 1",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "presentation2/index.html#basics-2",
    "href": "presentation2/index.html#basics-2",
    "title": "R for Stata Users 1",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nusing logical conditions\nStata\nkeep if v1 >= 2\n\n\n\ndplyr\ndf %>% filter(v1 >= 2)\n\n\nbased on their position\nStata\nkeep if _n <= 100\n\n\n\ndplyr\ndf %>% filter(row_number() <= 100)\n\n\ninlist is %in%\nStata\nkeep if inlist(id, \"id01\", \"id02\")\n\n\n\ndplyr\ndf %>% filter(id %in% c(\"id01\", \"id02\"))\n\n\ninrange is between\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(between(v2, 3, 5))\n\n\nempty rows\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(is.na(v1))"
  },
  {
    "objectID": "presentation2/index.html#demo-2",
    "href": "presentation2/index.html#demo-2",
    "title": "R for Stata Users 1",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "presentation2/index.html#miscellaneous",
    "href": "presentation2/index.html#miscellaneous",
    "title": "R for Stata Users 1",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\n\n\nto sort rows\nStata\nsort id v1\n\n\n\ndplyr\narrange(df, id, v1)"
  },
  {
    "objectID": "presentation3/index.html#disclaimer",
    "href": "presentation3/index.html#disclaimer",
    "title": "R for Stata Users 2",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell us!"
  },
  {
    "objectID": "presentation3/index.html#basics",
    "href": "presentation3/index.html#basics",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n“Vector” can mean a lot of things. Here I mean just an ordered list of things that may repeat, usually all numbers, all characters, or all dates.\n\n(v1 <- c(\"1\", \"2\", \"3\"))\n\n[1] \"1\" \"2\" \"3\"\n\n(v2 <- c(\"a\", \"b\", \"c\"))\n\n[1] \"a\" \"b\" \"c\"\n\n(v3 <- c(1, 2, 3))\n\n[1] 1 2 3\n\n(v4 <- list(\"1\", \"2\", \"3\"))\n\n[[1]]\n[1] \"1\"\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] \"3\"\n\n\nUsually we mean v1, v2, v3. In R, lists are very important, but more general, and so good for doing complex things to complex objects. For another day!"
  },
  {
    "objectID": "presentation3/index.html#uses",
    "href": "presentation3/index.html#uses",
    "title": "R for Stata Users 2",
    "section": "Uses",
    "text": "Uses\nA vector can have names, and you can do math on them.\n\nnames(v3) <- v2\nv3\n\na b c \n1 2 3 \n\nmean(v3)\n\n[1] 2\n\n\nVectors of equal length make up a tibble or data.frame. Then we don’t care about the names.\n\ndf <- tibble(v1, v2, v3)\ndf\n\n# A tibble: 3 × 3\n  v1    v2       v3\n  <chr> <chr> <dbl>\n1 1     a         1\n2 2     b         2\n3 3     c         3\n\n\nNotice that v1 and v3 are different types."
  },
  {
    "objectID": "presentation3/index.html#load-data",
    "href": "presentation3/index.html#load-data",
    "title": "R for Stata Users 2",
    "section": "Load Data",
    "text": "Load Data\nToday we will use these vectors.\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\n\ndob <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by=\"day\"), 6)\ndod <- sample(seq(as.Date('2016/01/01'), as.Date('2017/01/01'), by=\"day\"), 6) |> as.character()\n\nweight <- rnorm(n = 6, mean = 170, sd = 5)\n\ntrt1 <- sample(c(\"trt1\", \"crl1\"), 6, replace = TRUE)\ntrt2 <- sample(c(\"trt2\", \"crl2\"), 6, replace = TRUE)\n\nmed <- paste(\n  sample(c(\"10\", \"100\", \"5\"), 6, replace = TRUE), \n  sample(c(\"ml\", \"units\", \"Ml\"), 6, replace = TRUE), \n  sep = \" \"\n)\n\nAny guesses about what is going on here?"
  },
  {
    "objectID": "presentation3/index.html#view-data",
    "href": "presentation3/index.html#view-data",
    "title": "R for Stata Users 2",
    "section": "View data",
    "text": "View data\n\ntibble(id,\n       dob,\n       dod,\n       trt1,\n       trt2,\n       med,\n       weight)\n\n# A tibble: 6 × 7\n  id    dob        dod        trt1  trt2  med     weight\n  <chr> <date>     <chr>      <chr> <chr> <chr>    <dbl>\n1 id1   1999-06-28 2016-08-16 trt1  crl2  5 units   167.\n2 id2   1999-01-14 2016-08-31 crl1  trt2  100 Ml    168.\n3 id3   1999-07-14 2016-01-14 trt1  trt2  10 Ml     176.\n4 id4   1999-11-02 2016-06-01 crl1  trt2  5 ml      172.\n5 id5   1999-04-28 2016-03-30 trt1  trt2  10 Ml     172.\n6 id6   1999-10-26 2016-03-31 crl1  crl2  10 ml     171."
  },
  {
    "objectID": "presentation3/index.html#syntax",
    "href": "presentation3/index.html#syntax",
    "title": "R for Stata Users 2",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 3\n\n# hip\ndf |> nrow()\n\n[1] 3\n\n# hip also\ndf %>% nrow()\n\n[1] 3\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe place the variable behind it in the first position of the function."
  },
  {
    "objectID": "presentation3/index.html#why-bother",
    "href": "presentation3/index.html#why-bother",
    "title": "R for Stata Users 2",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |> \n  strsplit(split = \" \") |>\n  unlist() |> \n  unique() |> \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "presentation3/index.html#overview",
    "href": "presentation3/index.html#overview",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nmax(v1)\nmax(v1)\n\n\nmin(v1)\nmin(v1)\n\n\nmax(v1, v2)\npmax(v1, v2)\n\n\nmin(v1, v2)\npmin(v1, v2)\n\n\ncond(v1 > 3, 0, 1)\nifelse(v1 > 3, 0, 1)\n\n\nnvals\nn_distinct\n\n\ngroup\ninteraction\n\n\ntag\nrow_number() == 1"
  },
  {
    "objectID": "presentation3/index.html#demo",
    "href": "presentation3/index.html#demo",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "presentation3/index.html#overview-1",
    "href": "presentation3/index.html#overview-1",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nlower\ntolower\n\n\nupper\ntoupper\n\n\ntrim\nstr_strim\n\n\nstrlen\nstr_length\n\n\nsubstr\nstr_sub"
  },
  {
    "objectID": "presentation3/index.html#stringr",
    "href": "presentation3/index.html#stringr",
    "title": "R for Stata Users 2",
    "section": "stringr",
    "text": "stringr\n\n\n\n\n\n\n\n\n\nstringr\nStata (fixed)\nStata (wildcard)\nStata (regex)\n\n\n\n\nstr_detect\n\nstrmatch\nregexm\n\n\nstr_locate\nstrpos\n\n\n\n\nstr_match\n\n\nregexs if regexm\n\n\nstr_replace\nsubinstr(,1)\n\nregexr\n\n\nstr_replace_all\nsubinstr(,.)\n\n\n\n\nstr_split\nsplit"
  },
  {
    "objectID": "presentation3/index.html#demo-1",
    "href": "presentation3/index.html#demo-1",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "presentation3/index.html#overview-2",
    "href": "presentation3/index.html#overview-2",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\n\n\n\n\n\nto convert to date format\nStata\ngenerate dob=date(bday,\"MDY\")\n\n\n\nlubridate\ndf %>% select(id, v1)\n\n\nMonth\nStata\ngenerate m=month(dob)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nDay\nStata\ngenerate d=day(birthday)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nYear\nStata\ngenerate y=year(birthday)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "presentation2/index.html#disclaimer",
    "href": "presentation2/index.html#disclaimer",
    "title": "R for Stata Users 1",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell me!"
  },
  {
    "objectID": "presentation2/index.html#advanced",
    "href": "presentation2/index.html#advanced",
    "title": "R for Stata Users 1",
    "section": "Advanced",
    "text": "Advanced\n\n\n\n\n\n\n\n\ndistinct rows\nStata\nduplicates drop v1 v2, force\n\n\n\ndplyr\ndistinct(df, v1, v2)\n\n\nbut keep the rest\nStata\n???\n\n\n\ndplyr\ndistinct(df, v1, v2, .keep = TRUE)\n\n\nlook at dupes\nStata\n??\n\n\n\ndplyr\ndf %>% group_by(ID) |> filter(n() > 1)\n\n\ncount combinations\nStata\ndistinct v1 v2, joint\n\n\n\ndplyr\ndf %>% group_by(v1, v2) %>% n_groups()\n\n\nempty rows\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(is.na(v1))"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "R for Medical Research",
    "section": "Schedule",
    "text": "Schedule\nThis workshop is virtual-first, but we will meet in-person pending location availability.\nWe will use Pitt’s Zoom service and make the recordings available internally.\n\n\n\nDate (Weekly)\n\nTopic\nRoom\nSlides\nLinks\n\n\n\n\n02-20-2024\n0\nInstallation, packages, basics, questions\nNA\nweb\nR, RStudio\n\n\n02-27-2024\n1\nClinical trials and data manipulation\n\n\nmedicaldata, dplyr, pipe style\n\n\n03-05-2024\n2\nTable-1s and reports\n\n\ngtsummary, quarto\n\n\n03-12-2024\n3\nEHR data and joining it together\n\n\nMIMIC-IV, tidyr\n\n\n03-19-2024\n4\nSummarizing and plotting\n\n\ndplyr, ggplot2\n\n\n03-26-2024\n\nCancelled\n\n\n\n\n\n04-02-2024\n5\nLinear, logistic, and cox models.\n\n\nsurvival\n\n\n04-09-2024\n6\nReview topics of interest\n\n\n?\n\n\n04-16-2024\n7\nbasics of scRNAseq, causal inference\n\n\nSeurat, mediation"
  },
  {
    "objectID": "presentation3/index.html#basics-1",
    "href": "presentation3/index.html#basics-1",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\nid |> toupper()\n\n[1] \"ID1\" \"ID2\" \"ID3\" \"ID4\" \"ID5\" \"ID6\"\n\nmed |> str_detect(\"ml\")\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\nmed |> str_split(pattern = \" \")\n\n[[1]]\n[1] \"5\"     \"units\"\n\n[[2]]\n[1] \"100\" \"Ml\" \n\n[[3]]\n[1] \"10\" \"Ml\"\n\n[[4]]\n[1] \"5\"  \"ml\"\n\n[[5]]\n[1] \"10\" \"Ml\"\n\n[[6]]\n[1] \"10\" \"ml\"\n\n\nWhat explains the last result?"
  },
  {
    "objectID": "presentation3/index.html#more-common",
    "href": "presentation3/index.html#more-common",
    "title": "R for Stata Users 2",
    "section": "More Common",
    "text": "More Common\nThe problem is we want to manipulate these in the context of a dataset.\n\ntibble(med) |> \n  separate(med, into = c(\"amount\", \"unit\"), sep = \" \") |> \n  mutate(amount = amount |> as.numeric())\n\n# A tibble: 6 × 2\n  amount unit \n   <dbl> <chr>\n1      5 units\n2    100 Ml   \n3     10 Ml   \n4      5 ml   \n5     10 Ml   \n6     10 ml"
  },
  {
    "objectID": "presentation3/index.html#warning",
    "href": "presentation3/index.html#warning",
    "title": "R for Stata Users 2",
    "section": "Warning",
    "text": "Warning\n\n\n\n\n\n\nNote\n\n\nArithmetic with dates is not intuitive and a major source of errors."
  },
  {
    "objectID": "presentation3/index.html#basics-2",
    "href": "presentation3/index.html#basics-2",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\n# \n\"2020-05-01\" |> as.Date()\n\n[1] \"2020-05-01\"\n\n\"May 1, 2020\" |> as.Date()\n\nError in charToDate(x): character string is not in a standard unambiguous format\n\n\"May 1, 2020\" |> lubridate::mdy()\n\n[1] \"2020-05-01\"\n\n# vector math, beware\n(dod |> as.Date() - dob)\n\nTime differences in days\n[1] 6259 6439 6028 6056 6181 6001"
  },
  {
    "objectID": "presentation3/index.html#more-common-1",
    "href": "presentation3/index.html#more-common-1",
    "title": "R for Stata Users 2",
    "section": "More common",
    "text": "More common\n\nlibrary(lubridate)\n\ntibble(dod, dob) |> \n  mutate(dod = as.Date(dod)) |>\n  mutate(intv = interval(dob, dod)) |> \n  mutate(age = intv / years(1))\n\n# A tibble: 6 × 4\n  dod        dob        intv                             age\n  <date>     <date>     <Interval>                     <dbl>\n1 2016-08-16 1999-06-28 1999-06-28 UTC--2016-08-16 UTC  17.1\n2 2016-08-31 1999-01-14 1999-01-14 UTC--2016-08-31 UTC  17.6\n3 2016-01-14 1999-07-14 1999-07-14 UTC--2016-01-14 UTC  16.5\n4 2016-06-01 1999-11-02 1999-11-02 UTC--2016-06-01 UTC  16.6\n5 2016-03-30 1999-04-28 1999-04-28 UTC--2016-03-30 UTC  16.9\n6 2016-03-31 1999-10-26 1999-10-26 UTC--2016-03-31 UTC  16.4"
  },
  {
    "objectID": "index.html#schedule-1",
    "href": "index.html#schedule-1",
    "title": "R for Medical Research",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nDate\nTopic\nSlides\nPDF\n\n\n\n\nOct 10\nR for Stata 1: Data Manipulation\nhere\nTo come\n\n\nOct 17\nR for Stata 2: Vector Manipulation\nhere\nTo come\n\n\nOct 24\nRStudio and Reproducibility\nhere\nTo come\n\n\nNov 3\nR for Stata 3: Join and Reshape\nTo come\nTo come\n\n\nTBA\nSummarizing\n\n\n\n\nTBA\nBasic Modeling\n\n\n\n\nTBA\nBasic Plotting\n\n\n\n\nTBA\nBasic Tables\n\n\n\n\nTBA\nPipelines and Iteration"
  },
  {
    "objectID": "pres_r4stata1/index.html#disclaimer",
    "href": "pres_r4stata1/index.html#disclaimer",
    "title": "R for Medical Research",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell me!"
  },
  {
    "objectID": "pres_r4stata1/index.html#load-data",
    "href": "pres_r4stata1/index.html#load-data",
    "title": "R for Medical Research",
    "section": "Load Data",
    "text": "Load Data\nData comes to us in many forms. R has utilities for most of them.\nid,v1,v2\nid01,M,0\nid02,F,2\nid03,M,4\nid01,M,6\nid02,F,8\nid03,M,10\n\n# read the csv file above\ndf &lt;- readr::read_csv(\"data/df.csv\")\n\n# read Stata .dta files\ndf &lt;- haven::read_dta(\"data/df.dta\")\n\n# read excel files\ndf &lt;- readxl::read_excel(\"data/df.xlsx\")"
  },
  {
    "objectID": "pres_r4stata1/index.html#syntax",
    "href": "pres_r4stata1/index.html#syntax",
    "title": "R for Medical Research",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 6\n\n# hip\ndf |&gt; nrow()\n\n[1] 6\n\n# hip also\ndf %&gt;% nrow()\n\n[1] 6\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe place the variable behind it in the first position of the function."
  },
  {
    "objectID": "pres_r4stata1/index.html#why-bother",
    "href": "pres_r4stata1/index.html#why-bother",
    "title": "R for Medical Research",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |&gt; \n  strsplit(split = \" \") |&gt;\n  unlist() |&gt; \n  unique() |&gt; \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "pres_r4stata1/index.html#basics",
    "href": "pres_r4stata1/index.html#basics",
    "title": "R for Medical Research",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nTo select a few columns\nStata\nkeep id v1\n\n\n\ndplyr\ndf %&gt;% select(id, v1)\n\n\nWildcard -&gt; helper function\nStata\nkeep v*\n\n\n\ndplyr\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "pres_r4stata1/index.html#demo",
    "href": "pres_r4stata1/index.html#demo",
    "title": "R for Medical Research",
    "section": "Demo",
    "text": "Demo\n\ndf |&gt; select(id, v1)\n\n# A tibble: 6 × 2\n  id    v1   \n  &lt;chr&gt; &lt;chr&gt;\n1 id01  M    \n2 id02  F    \n3 id03  M    \n4 id01  M    \n5 id02  F    \n6 id03  M    \n\ndf |&gt; select(starts_with(\"v\"))\n\n# A tibble: 6 × 2\n  v1       v2\n  &lt;chr&gt; &lt;dbl&gt;\n1 M         0\n2 F         2\n3 M         4\n4 M         6\n5 F         8\n6 M        10"
  },
  {
    "objectID": "pres_r4stata1/index.html#under-the-hood",
    "href": "pres_r4stata1/index.html#under-the-hood",
    "title": "R for Medical Research",
    "section": "Under the hood",
    "text": "Under the hood\n\n\n\n\n\n\nNote\n\n\nContrary to Stata, R returns a new dataset without destroying the existing one. This does not always require more memory: when subsetting columns, the new dataset is a shallow copy of the existing one - at least until the new dataset is modified."
  },
  {
    "objectID": "pres_r4stata1/index.html#select-helpers",
    "href": "pres_r4stata1/index.html#select-helpers",
    "title": "R for Medical Research",
    "section": "Select helpers",
    "text": "Select helpers\nThis table gives the list of helper functions:\n\n\n\nStata\ndplyr\n\n\n\n\nkeep v*\nselect(df, starts_with(“v”))\n\n\nkeep *v\nselect(df, ends_with(“v”))\n\n\nkeep *v*\nselect(df, contains(“v”))\n\n\nkeep v?\nselect(df, matches(“^v.$”))\n\n\nkeep *\nselect(df, everything())\n\n\ndrop v1\nselect(df, -v1)\n\n\nkeep id-v2\nselect(df, id:v2)"
  },
  {
    "objectID": "pres_r4stata1/index.html#modify-columns-1",
    "href": "pres_r4stata1/index.html#modify-columns-1",
    "title": "R for Medical Research",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\nTo rename columns\nStata\nrename id id1\n\n\n\ndplyr\ndf %&gt;% rename(id1 = id)\n\n\nTo reorder columns\nStata\norder v1\n\n\n\ndplyr\ndf %&gt;% select(DT, v1, everything())"
  },
  {
    "objectID": "pres_r4stata1/index.html#modify-columns-2",
    "href": "pres_r4stata1/index.html#modify-columns-2",
    "title": "R for Medical Research",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\nTo create new columns\nStata\ngen new = 1\n\n\n\ndplyr\ndf %&gt;% mutate(new = 1)\n\n\nTo modify a column\nStata\negen cov = cov(v1, v2)\n\n\n\ndplyr\ndf %&gt;%  mutate(cov = cov(v1, v2))"
  },
  {
    "objectID": "pres_r4stata1/index.html#modify-columns-3",
    "href": "pres_r4stata1/index.html#modify-columns-3",
    "title": "R for Medical Research",
    "section": "Modify columns",
    "text": "Modify columns\n\n\n\n\n\n\n\n\nTo apply a function\nStata\ntostring v1 v2, replace force\n\n\n\ndplyr\ndf %&gt;% mutate(across(c(v1, v2), as.character))"
  },
  {
    "objectID": "pres_r4stata1/index.html#basics-1",
    "href": "pres_r4stata1/index.html#basics-1",
    "title": "R for Stata Users 1",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nTo apply each function\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\nmultiple columns\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\nBy group\nStata\ncollapse (mean) v1 (sd) v2, by(id)\n\n\n\ndplyr\ndf %\\>% group_by(id) %>% summarize(mean(v1), sd(v2))\n\n\n\nNote: we will discuss group_by() more later."
  },
  {
    "objectID": "pres_r4stata1/index.html#demo-1",
    "href": "pres_r4stata1/index.html#demo-1",
    "title": "R for Stata Users 1",
    "section": "Demo",
    "text": "Demo\n\n\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10\n\n\n\n\ndf |> \n  summarize(avg = mean(v2, na.rm = TRUE))\n\n# A tibble: 1 × 1\n    avg\n  <dbl>\n1     5\n\ndf |> \n  group_by(v1) |> \n  summarise(average = mean(v2, na.rm = TRUE))\n\n# A tibble: 2 × 2\n  v1    average\n  <chr>   <dbl>\n1 F           5\n2 M           5\n\ndf |> \n  group_by(id) |> \n  summarise(mean = mean(v2, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  id     mean\n  <chr> <dbl>\n1 id01      3\n2 id02      5\n3 id03      7"
  },
  {
    "objectID": "pres_r4stata1/index.html#basics-2",
    "href": "pres_r4stata1/index.html#basics-2",
    "title": "R for Stata Users 1",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nusing logical conditions\nStata\nkeep if v1 >= 2\n\n\n\ndplyr\ndf %>% filter(v1 >= 2)\n\n\nbased on their position\nStata\nkeep if _n <= 100\n\n\n\ndplyr\ndf %>% filter(row_number() <= 100)\n\n\ninlist is %in%\nStata\nkeep if inlist(id, \"id01\", \"id02\")\n\n\n\ndplyr\ndf %>% filter(id %in% c(\"id01\", \"id02\"))\n\n\ninrange is between\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(between(v2, 3, 5))\n\n\nempty rows\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(is.na(v1))"
  },
  {
    "objectID": "pres_r4stata1/index.html#advanced",
    "href": "pres_r4stata1/index.html#advanced",
    "title": "R for Stata Users 1",
    "section": "Advanced",
    "text": "Advanced\n\n\n\n\n\n\n\n\ndistinct rows\nStata\nduplicates drop v1 v2, force\n\n\n\ndplyr\ndistinct(df, v1, v2)\n\n\nbut keep the rest\nStata\n???\n\n\n\ndplyr\ndistinct(df, v1, v2, .keep = TRUE)\n\n\nlook at dupes\nStata\n??\n\n\n\ndplyr\ndf %>% group_by(ID) |> filter(n() > 1)\n\n\ncount combinations\nStata\ndistinct v1 v2, joint\n\n\n\ndplyr\ndf %>% group_by(v1, v2) %>% n_groups()\n\n\nempty rows\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(is.na(v1))"
  },
  {
    "objectID": "pres_r4stata1/index.html#demo-2",
    "href": "pres_r4stata1/index.html#demo-2",
    "title": "R for Stata Users 1",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "pres_r4stata1/index.html#miscellaneous",
    "href": "pres_r4stata1/index.html#miscellaneous",
    "title": "R for Stata Users 1",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\n\n\nto sort rows\nStata\nsort id v1\n\n\n\ndplyr\narrange(df, id, v1)"
  },
  {
    "objectID": "pres_r4stata2/index.html#disclaimer",
    "href": "pres_r4stata2/index.html#disclaimer",
    "title": "R for Stata Users 2",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell us!"
  },
  {
    "objectID": "pres_r4stata2/index.html#basics",
    "href": "pres_r4stata2/index.html#basics",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nTo apply each function\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\nmultiple columns\nStata\ncollapse (mean) v1 (sd) v2\n\n\n\ndplyr\ndf %>% summarize(mean(v1, na.rm = TRUE), sd(v2, na.rm = TRUE))\n\n\nBy group\nStata\ncollapse (mean) v1 (sd) v2, by(id)\n\n\n\ndplyr\ndf %\\>% group_by(id) %>% summarize(mean(v1), sd(v2))\n\n\n\nNote: we will discuss group_by() more later."
  },
  {
    "objectID": "pres_r4stata2/index.html#uses",
    "href": "pres_r4stata2/index.html#uses",
    "title": "R for Stata Users 2",
    "section": "Uses",
    "text": "Uses\nA vector can have names, and you can do math on them.\n\nnames(v3) <- v2\nv3\n\na b c \n1 2 3 \n\nmean(v3)\n\n[1] 2\n\n\nVectors of equal length make up a tibble or data.frame. Then we don’t care about the names.\n\ndf <- tibble(v1, v2, v3)\ndf\n\n# A tibble: 3 × 3\n  v1    v2       v3\n  <chr> <chr> <dbl>\n1 1     a         1\n2 2     b         2\n3 3     c         3\n\n\nNotice that v1 and v3 are different types."
  },
  {
    "objectID": "pres_r4stata2/index.html#load-data",
    "href": "pres_r4stata2/index.html#load-data",
    "title": "R for Stata Users 2",
    "section": "Load Data",
    "text": "Load Data\nToday we will use these vectors.\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\n\ndob <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by=\"day\"), 6)\ndod <- sample(seq(as.Date('2016/01/01'), as.Date('2017/01/01'), by=\"day\"), 6) |> as.character()\n\nweight <- rnorm(n = 6, mean = 170, sd = 5)\n\ntrt1 <- sample(c(\"trt1\", \"crl1\"), 6, replace = TRUE)\ntrt2 <- sample(c(\"trt2\", \"crl2\"), 6, replace = TRUE)\n\nmed <- paste(\n  sample(c(\"10\", \"100\", \"5\"), 6, replace = TRUE), \n  sample(c(\"ml\", \"units\", \"Ml\"), 6, replace = TRUE), \n  sep = \" \"\n)\n\nAny guesses about what is going on here?"
  },
  {
    "objectID": "pres_r4stata2/index.html#view-data",
    "href": "pres_r4stata2/index.html#view-data",
    "title": "R for Stata Users 2",
    "section": "View data",
    "text": "View data\n\ntibble(id,\n       dob,\n       dod,\n       trt1,\n       trt2,\n       med,\n       weight)\n\n# A tibble: 6 × 7\n  id    dob        dod        trt1  trt2  med     weight\n  <chr> <date>     <chr>      <chr> <chr> <chr>    <dbl>\n1 id1   1999-06-28 2016-08-16 trt1  crl2  5 units   167.\n2 id2   1999-01-14 2016-08-31 crl1  trt2  100 Ml    168.\n3 id3   1999-07-14 2016-01-14 trt1  trt2  10 Ml     176.\n4 id4   1999-11-02 2016-06-01 crl1  trt2  5 ml      172.\n5 id5   1999-04-28 2016-03-30 trt1  trt2  10 Ml     172.\n6 id6   1999-10-26 2016-03-31 crl1  crl2  10 ml     171."
  },
  {
    "objectID": "pres_r4stata2/index.html#syntax",
    "href": "pres_r4stata2/index.html#syntax",
    "title": "R for Stata Users 2",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 3\n\n# hip\ndf |> nrow()\n\n[1] 3\n\n# hip also\ndf %>% nrow()\n\n[1] 3\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe places the variable behind it in the first position of the function."
  },
  {
    "objectID": "pres_r4stata2/index.html#why-bother",
    "href": "pres_r4stata2/index.html#why-bother",
    "title": "R for Stata Users 2",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |> \n  strsplit(split = \" \") |>\n  unlist() |> \n  unique() |> \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "pres_r4stata2/index.html#overview",
    "href": "pres_r4stata2/index.html#overview",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nmax(v1)\nmax(v1)\n\n\nmin(v1)\nmin(v1)\n\n\nmax(v1, v2)\npmax(v1, v2)\n\n\nmin(v1, v2)\npmin(v1, v2)\n\n\ncond(v1 > 3, 0, 1)\nifelse(v1 > 3, 0, 1)\n\n\nnvals\nn_distinct\n\n\ngroup\ninteraction\n\n\ntag\nrow_number() == 1"
  },
  {
    "objectID": "pres_r4stata2/index.html#demo",
    "href": "pres_r4stata2/index.html#demo",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo\n\n\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10\n\n\n\n\ndf |> \n  summarize(avg = mean(v2, na.rm = TRUE))\n\n# A tibble: 1 × 1\n    avg\n  <dbl>\n1     5\n\ndf |> \n  group_by(v1) |> \n  summarise(average = mean(v2, na.rm = TRUE))\n\n# A tibble: 2 × 2\n  v1    average\n  <chr>   <dbl>\n1 F           5\n2 M           5\n\ndf |> \n  group_by(id) |> \n  summarise(mean = mean(v2, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  id     mean\n  <chr> <dbl>\n1 id01      3\n2 id02      5\n3 id03      7"
  },
  {
    "objectID": "pres_r4stata2/index.html#overview-1",
    "href": "pres_r4stata2/index.html#overview-1",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nlower\ntolower\n\n\nupper\ntoupper\n\n\ntrim\nstr_strim\n\n\nstrlen\nstr_length\n\n\nsubstr\nstr_sub"
  },
  {
    "objectID": "pres_r4stata2/index.html#stringr",
    "href": "pres_r4stata2/index.html#stringr",
    "title": "R for Stata Users 2",
    "section": "stringr",
    "text": "stringr\n\n\n\n\n\n\n\n\n\nstringr\nStata (fixed)\nStata (wildcard)\nStata (regex)\n\n\n\n\nstr_detect\n\nstrmatch\nregexm\n\n\nstr_locate\nstrpos\n\n\n\n\nstr_match\n\n\nregexs if regexm\n\n\nstr_replace\nsubinstr(,1)\n\nregexr\n\n\nstr_replace_all\nsubinstr(,.)\n\n\n\n\nstr_split\nsplit"
  },
  {
    "objectID": "pres_r4stata2/index.html#basics-1",
    "href": "pres_r4stata2/index.html#basics-1",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\n\n\n\n\n\n\n\nusing logical conditions\nStata\nkeep if v1 >= 2\n\n\n\ndplyr\ndf %>% filter(v1 >= 2)\n\n\nbased on their position\nStata\nkeep if _n <= 100\n\n\n\ndplyr\ndf %>% filter(row_number() <= 100)\n\n\ninlist is %in%\nStata\nkeep if inlist(id, \"id01\", \"id02\")\n\n\n\ndplyr\ndf %>% filter(id %in% c(\"id01\", \"id02\"))\n\n\ninrange is between\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(between(v2, 3, 5))\n\n\nempty rows\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(is.na(v1))"
  },
  {
    "objectID": "pres_r4stata2/index.html#more-common",
    "href": "pres_r4stata2/index.html#more-common",
    "title": "R for Stata Users 2",
    "section": "More Common",
    "text": "More Common\nThe problem is we want to manipulate these in the context of a dataset.\n\ntibble(med) |> \n  separate(med, into = c(\"amount\", \"unit\"), sep = \" \") |> \n  mutate(amount = amount |> as.numeric())\n\n# A tibble: 6 × 2\n  amount unit \n   <dbl> <chr>\n1      5 units\n2    100 Ml   \n3     10 Ml   \n4      5 ml   \n5     10 Ml   \n6     10 ml"
  },
  {
    "objectID": "pres_r4stata2/index.html#warning",
    "href": "pres_r4stata2/index.html#warning",
    "title": "R for Stata Users 2",
    "section": "Warning",
    "text": "Warning\n\n\n\n\n\n\nNote\n\n\nArithmetic with dates is not intuitive and a major source of errors."
  },
  {
    "objectID": "pres_r4stata2/index.html#overview-2",
    "href": "pres_r4stata2/index.html#overview-2",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\n\n\n\n\n\nto convert to date format\nStata\ngenerate dob=date(bday,\"MDY\")\n\n\n\nlubridate\ndf %>% select(id, v1)\n\n\nMonth\nStata\ngenerate m=month(dob)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nDay\nStata\ngenerate d=day(dob)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nYear\nStata\ngenerate y=year(dob)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "pres_r4stata2/index.html#basics-2",
    "href": "pres_r4stata2/index.html#basics-2",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n“Vector” can mean a lot of things. Here I mean just an ordered list of things that may repeat, usually all numbers, all characters, or all dates.\n\n(v1 <- c(\"1\", \"2\", \"3\"))\n\n[1] \"1\" \"2\" \"3\"\n\n(v2 <- c(\"a\", \"b\", \"c\"))\n\n[1] \"a\" \"b\" \"c\"\n\n(v3 <- c(1, 2, 3))\n\n[1] 1 2 3\n\n(v4 <- list(\"1\", \"2\", \"3\"))\n\n[[1]]\n[1] \"1\"\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] \"3\"\n\n\nUsually we mean v1, v2, v3. In R, lists are very important, but more general, and so good for doing complex things to complex objects. For another day!"
  },
  {
    "objectID": "pres_r4stata2/index.html#more-common-1",
    "href": "pres_r4stata2/index.html#more-common-1",
    "title": "R for Stata Users 2",
    "section": "More common",
    "text": "More common\n\ntibble(dod, dob) |> \n  mutate(dod = as.Date(dod)) |>\n  mutate(intv = interval(dob, dod)) |> \n  mutate(age = intv / years(1))\n\n# A tibble: 6 × 4\n  dod        dob        intv                             age\n  <date>     <date>     <Interval>                     <dbl>\n1 2016-08-16 1999-06-28 1999-06-28 UTC--2016-08-16 UTC  17.1\n2 2016-08-31 1999-01-14 1999-01-14 UTC--2016-08-31 UTC  17.6\n3 2016-01-14 1999-07-14 1999-07-14 UTC--2016-01-14 UTC  16.5\n4 2016-06-01 1999-11-02 1999-11-02 UTC--2016-06-01 UTC  16.6\n5 2016-03-30 1999-04-28 1999-04-28 UTC--2016-03-30 UTC  16.9\n6 2016-03-31 1999-10-26 1999-10-26 UTC--2016-03-31 UTC  16.4"
  },
  {
    "objectID": "pres_r4stata3/index.html#disclaimer",
    "href": "pres_r4stata3/index.html#disclaimer",
    "title": "R for Stata Users 2",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell us!"
  },
  {
    "objectID": "pres_r4stata3/index.html#basics",
    "href": "pres_r4stata3/index.html#basics",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n“Vector” can mean a lot of things. Here I mean just an ordered list of things that may repeat, usually all numbers, all characters, or all dates.\n\n(v1 <- c(\"1\", \"2\", \"3\"))\n\n[1] \"1\" \"2\" \"3\"\n\n(v2 <- c(\"a\", \"b\", \"c\"))\n\n[1] \"a\" \"b\" \"c\"\n\n(v3 <- c(1, 2, 3))\n\n[1] 1 2 3\n\n(v4 <- list(\"1\", \"2\", \"3\"))\n\n[[1]]\n[1] \"1\"\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] \"3\"\n\n\nUsually we mean v1, v2, v3. In R, lists are very important, but more general, and so good for doing complex things to complex objects. For another day!"
  },
  {
    "objectID": "pres_r4stata3/index.html#uses",
    "href": "pres_r4stata3/index.html#uses",
    "title": "R for Stata Users 2",
    "section": "Uses",
    "text": "Uses\nA vector can have names, and you can do math on them.\n\nnames(v3) <- v2\nv3\n\na b c \n1 2 3 \n\nmean(v3)\n\n[1] 2\n\n\nVectors of equal length make up a tibble or data.frame. Then we don’t care about the names.\n\ndf <- tibble(v1, v2, v3)\ndf\n\n# A tibble: 3 × 3\n  v1    v2       v3\n  <chr> <chr> <dbl>\n1 1     a         1\n2 2     b         2\n3 3     c         3\n\n\nNotice that v1 and v3 are different types."
  },
  {
    "objectID": "pres_r4stata3/index.html#load-data",
    "href": "pres_r4stata3/index.html#load-data",
    "title": "R for Stata Users 2",
    "section": "Load Data",
    "text": "Load Data\nToday we will use these vectors.\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\n\ndob <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by=\"day\"), 6)\ndod <- sample(seq(as.Date('2016/01/01'), as.Date('2017/01/01'), by=\"day\"), 6) |> as.character()\n\nweight <- rnorm(n = 6, mean = 170, sd = 5)\n\ntrt1 <- sample(c(\"trt1\", \"crl1\"), 6, replace = TRUE)\ntrt2 <- sample(c(\"trt2\", \"crl2\"), 6, replace = TRUE)\n\nmed <- paste(\n  sample(c(\"10\", \"100\", \"5\"), 6, replace = TRUE), \n  sample(c(\"ml\", \"units\", \"Ml\"), 6, replace = TRUE), \n  sep = \" \"\n)\n\nAny guesses about what is going on here?"
  },
  {
    "objectID": "pres_r4stata3/index.html#view-data",
    "href": "pres_r4stata3/index.html#view-data",
    "title": "R for Stata Users 2",
    "section": "View data",
    "text": "View data\n\ntibble(id,\n       dob,\n       dod,\n       trt1,\n       trt2,\n       med,\n       weight)\n\n# A tibble: 6 × 7\n  id    dob        dod        trt1  trt2  med     weight\n  <chr> <date>     <chr>      <chr> <chr> <chr>    <dbl>\n1 id1   1999-06-28 2016-08-16 trt1  crl2  5 units   167.\n2 id2   1999-01-14 2016-08-31 crl1  trt2  100 Ml    168.\n3 id3   1999-07-14 2016-01-14 trt1  trt2  10 Ml     176.\n4 id4   1999-11-02 2016-06-01 crl1  trt2  5 ml      172.\n5 id5   1999-04-28 2016-03-30 trt1  trt2  10 Ml     172.\n6 id6   1999-10-26 2016-03-31 crl1  crl2  10 ml     171."
  },
  {
    "objectID": "pres_r4stata3/index.html#syntax",
    "href": "pres_r4stata3/index.html#syntax",
    "title": "R for Stata Users 2",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 3\n\n# hip\ndf |> nrow()\n\n[1] 3\n\n# hip also\ndf %>% nrow()\n\n[1] 3\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe place the variable behind it in the first position of the function."
  },
  {
    "objectID": "pres_r4stata3/index.html#why-bother",
    "href": "pres_r4stata3/index.html#why-bother",
    "title": "R for Stata Users 2",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |> \n  strsplit(split = \" \") |>\n  unlist() |> \n  unique() |> \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "pres_r4stata3/index.html#overview",
    "href": "pres_r4stata3/index.html#overview",
    "title": "R for Medical Research 3",
    "section": "Overview",
    "text": "Overview\nToday we will convert data from a long format to a wide format, and join together separate datasets. This completes the basic data manipulation series."
  },
  {
    "objectID": "pres_r4stata3/index.html#demo",
    "href": "pres_r4stata3/index.html#demo",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "pres_r4stata3/index.html#overview-1",
    "href": "pres_r4stata3/index.html#overview-1",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nlower\ntolower\n\n\nupper\ntoupper\n\n\ntrim\nstr_strim\n\n\nstrlen\nstr_length\n\n\nsubstr\nstr_sub"
  },
  {
    "objectID": "pres_r4stata3/index.html#stringr",
    "href": "pres_r4stata3/index.html#stringr",
    "title": "R for Stata Users 2",
    "section": "stringr",
    "text": "stringr\n\n\n\n\n\n\n\n\n\nstringr\nStata (fixed)\nStata (wildcard)\nStata (regex)\n\n\n\n\nstr_detect\n\nstrmatch\nregexm\n\n\nstr_locate\nstrpos\n\n\n\n\nstr_match\n\n\nregexs if regexm\n\n\nstr_replace\nsubinstr(,1)\n\nregexr\n\n\nstr_replace_all\nsubinstr(,.)\n\n\n\n\nstr_split\nsplit"
  },
  {
    "objectID": "pres_r4stata3/index.html#basics-1",
    "href": "pres_r4stata3/index.html#basics-1",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\nid |> toupper()\n\n[1] \"ID1\" \"ID2\" \"ID3\" \"ID4\" \"ID5\" \"ID6\"\n\nmed |> str_detect(\"ml\")\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\nmed |> str_split(pattern = \" \")\n\n[[1]]\n[1] \"5\"     \"units\"\n\n[[2]]\n[1] \"100\" \"Ml\" \n\n[[3]]\n[1] \"10\" \"Ml\"\n\n[[4]]\n[1] \"5\"  \"ml\"\n\n[[5]]\n[1] \"10\" \"Ml\"\n\n[[6]]\n[1] \"10\" \"ml\"\n\n\nWhat explains the last result?"
  },
  {
    "objectID": "pres_r4stata3/index.html#more-common",
    "href": "pres_r4stata3/index.html#more-common",
    "title": "R for Stata Users 2",
    "section": "More Common",
    "text": "More Common\nThe problem is we want to manipulate these in the context of a dataset.\n\ntibble(med) |> \n  separate(med, into = c(\"amount\", \"unit\"), sep = \" \") |> \n  mutate(amount = amount |> as.numeric())\n\n# A tibble: 6 × 2\n  amount unit \n   <dbl> <chr>\n1      5 units\n2    100 Ml   \n3     10 Ml   \n4      5 ml   \n5     10 Ml   \n6     10 ml"
  },
  {
    "objectID": "pres_r4stata3/index.html#warning",
    "href": "pres_r4stata3/index.html#warning",
    "title": "R for Stata Users 2",
    "section": "Warning",
    "text": "Warning\n\n\n\n\n\n\nNote\n\n\nArithmetic with dates is not intuitive and a major source of errors."
  },
  {
    "objectID": "pres_r4stata3/index.html#overview-2",
    "href": "pres_r4stata3/index.html#overview-2",
    "title": "R for Stata Users 2",
    "section": "Overview",
    "text": "Overview\n\n\n\n\n\n\n\n\nto convert to date format\nStata\ngenerate dob=date(bday,\"MDY\")\n\n\n\nlubridate\ndf %>% select(id, v1)\n\n\nMonth\nStata\ngenerate m=month(dob)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nDay\nStata\ngenerate d=day(birthday)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nYear\nStata\ngenerate y=year(birthday)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "pres_r4stata3/index.html#basics-2",
    "href": "pres_r4stata3/index.html#basics-2",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\n# \n\"2020-05-01\" |> as.Date()\n\n[1] \"2020-05-01\"\n\n\"May 1, 2020\" |> as.Date()\n\nError in charToDate(x): character string is not in a standard unambiguous format\n\n\"May 1, 2020\" |> lubridate::mdy()\n\n[1] \"2020-05-01\"\n\n# vector math, beware\n(dod |> as.Date() - dob)\n\nTime differences in days\n[1] 6259 6439 6028 6056 6181 6001"
  },
  {
    "objectID": "pres_r4stata3/index.html#more-common-1",
    "href": "pres_r4stata3/index.html#more-common-1",
    "title": "R for Stata Users 2",
    "section": "More common",
    "text": "More common\n\nlibrary(lubridate)\n\ntibble(dod, dob) |> \n  mutate(dod = as.Date(dod)) |>\n  mutate(intv = interval(dob, dod)) |> \n  mutate(age = intv / years(1))\n\n# A tibble: 6 × 4\n  dod        dob        intv                             age\n  <date>     <date>     <Interval>                     <dbl>\n1 2016-08-16 1999-06-28 1999-06-28 UTC--2016-08-16 UTC  17.1\n2 2016-08-31 1999-01-14 1999-01-14 UTC--2016-08-31 UTC  17.6\n3 2016-01-14 1999-07-14 1999-07-14 UTC--2016-01-14 UTC  16.5\n4 2016-06-01 1999-11-02 1999-11-02 UTC--2016-06-01 UTC  16.6\n5 2016-03-30 1999-04-28 1999-04-28 UTC--2016-03-30 UTC  16.9\n6 2016-03-31 1999-10-26 1999-10-26 UTC--2016-03-31 UTC  16.4"
  },
  {
    "objectID": "pres_rstudio/index.html#disclaimer",
    "href": "pres_rstudio/index.html#disclaimer",
    "title": "R for Stata Users 2",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell us!"
  },
  {
    "objectID": "pres_rstudio/index.html#basics",
    "href": "pres_rstudio/index.html#basics",
    "title": "RStudio and Reproducibility",
    "section": "Basics",
    "text": "Basics\n“Vector” can mean a lot of things. Here I mean just an ordered list of things that may repeat, usually all numbers, all characters, or all dates.\n\n(v1 <- c(\"1\", \"2\", \"3\"))\n\n[1] \"1\" \"2\" \"3\"\n\n(v2 <- c(\"a\", \"b\", \"c\"))\n\n[1] \"a\" \"b\" \"c\"\n\n(v3 <- c(1, 2, 3))\n\n[1] 1 2 3\n\n(v4 <- list(\"1\", \"2\", \"3\"))\n\n[[1]]\n[1] \"1\"\n\n[[2]]\n[1] \"2\"\n\n[[3]]\n[1] \"3\"\n\n\nUsually we mean v1, v2, v3. In R, lists are very important, but more general, and so good for doing complex things to complex objects. For another day!"
  },
  {
    "objectID": "pres_rstudio/index.html#uses",
    "href": "pres_rstudio/index.html#uses",
    "title": "RStudio and Reproducibility",
    "section": "Uses",
    "text": "Uses\nA vector can have names, and you can do math on them.\n\nnames(v3) <- v2\nv3\n\na b c \n1 2 3 \n\nmean(v3)\n\n[1] 2\n\n\nVectors of equal length make up a tibble or data.frame. Then we don’t care about the names.\n\ndf <- tibble(v1, v2, v3)\ndf\n\n# A tibble: 3 × 3\n  v1    v2       v3\n  <chr> <chr> <dbl>\n1 1     a         1\n2 2     b         2\n3 3     c         3\n\n\nNotice that v1 and v3 are different types."
  },
  {
    "objectID": "pres_rstudio/index.html#load-data",
    "href": "pres_rstudio/index.html#load-data",
    "title": "RStudio and Reproducibility",
    "section": "Load Data",
    "text": "Load Data\nToday we will use these vectors.\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\n\ndob <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by=\"day\"), 6)\ndod <- sample(seq(as.Date('2016/01/01'), as.Date('2017/01/01'), by=\"day\"), 6) |> as.character()\n\nweight <- rnorm(n = 6, mean = 170, sd = 5)\n\ntrt1 <- sample(c(\"trt1\", \"crl1\"), 6, replace = TRUE)\ntrt2 <- sample(c(\"trt2\", \"crl2\"), 6, replace = TRUE)\n\nmed <- paste(\n  sample(c(\"10\", \"100\", \"5\"), 6, replace = TRUE), \n  sample(c(\"ml\", \"units\", \"Ml\"), 6, replace = TRUE), \n  sep = \" \"\n)\n\nAny guesses about what is going on here?"
  },
  {
    "objectID": "pres_rstudio/index.html#view-data",
    "href": "pres_rstudio/index.html#view-data",
    "title": "RStudio and Reproducibility",
    "section": "View data",
    "text": "View data\n\ntibble(id,\n       dob,\n       dod,\n       trt1,\n       trt2,\n       med,\n       weight)\n\n# A tibble: 6 × 7\n  id    dob        dod        trt1  trt2  med     weight\n  <chr> <date>     <chr>      <chr> <chr> <chr>    <dbl>\n1 id1   1999-06-28 2016-08-16 trt1  crl2  5 units   167.\n2 id2   1999-01-14 2016-08-31 crl1  trt2  100 Ml    168.\n3 id3   1999-07-14 2016-01-14 trt1  trt2  10 Ml     176.\n4 id4   1999-11-02 2016-06-01 crl1  trt2  5 ml      172.\n5 id5   1999-04-28 2016-03-30 trt1  trt2  10 Ml     172.\n6 id6   1999-10-26 2016-03-31 crl1  crl2  10 ml     171."
  },
  {
    "objectID": "pres_rstudio/index.html#syntax",
    "href": "pres_rstudio/index.html#syntax",
    "title": "RStudio and Reproducibility",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 3\n\n# hip\ndf |> nrow()\n\n[1] 3\n\n# hip also\ndf %>% nrow()\n\n[1] 3\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe place the variable behind it in the first position of the function."
  },
  {
    "objectID": "pres_rstudio/index.html#why-bother",
    "href": "pres_rstudio/index.html#why-bother",
    "title": "RStudio and Reproducibility",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |> \n  strsplit(split = \" \") |>\n  unlist() |> \n  unique() |> \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "pres_rstudio/index.html#overview",
    "href": "pres_rstudio/index.html#overview",
    "title": "RStudio and Reproducibility",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nmax(v1)\nmax(v1)\n\n\nmin(v1)\nmin(v1)\n\n\nmax(v1, v2)\npmax(v1, v2)\n\n\nmin(v1, v2)\npmin(v1, v2)\n\n\ncond(v1 > 3, 0, 1)\nifelse(v1 > 3, 0, 1)\n\n\nnvals\nn_distinct\n\n\ngroup\ninteraction\n\n\ntag\nrow_number() == 1"
  },
  {
    "objectID": "pres_rstudio/index.html#demo",
    "href": "pres_rstudio/index.html#demo",
    "title": "RStudio and Reproducibility",
    "section": "Demo",
    "text": "Demo\nYou’re first reproducible document."
  },
  {
    "objectID": "pres_rstudio/index.html#overview-1",
    "href": "pres_rstudio/index.html#overview-1",
    "title": "RStudio and Reproducibility",
    "section": "Overview",
    "text": "Overview\n\n\n\nStata\nR\n\n\n\n\nlower\ntolower\n\n\nupper\ntoupper\n\n\ntrim\nstr_strim\n\n\nstrlen\nstr_length\n\n\nsubstr\nstr_sub"
  },
  {
    "objectID": "pres_rstudio/index.html#stringr",
    "href": "pres_rstudio/index.html#stringr",
    "title": "RStudio and Reproducibility",
    "section": "stringr",
    "text": "stringr\n\n\n\n\n\n\n\n\n\nstringr\nStata (fixed)\nStata (wildcard)\nStata (regex)\n\n\n\n\nstr_detect\n\nstrmatch\nregexm\n\n\nstr_locate\nstrpos\n\n\n\n\nstr_match\n\n\nregexs if regexm\n\n\nstr_replace\nsubinstr(,1)\n\nregexr\n\n\nstr_replace_all\nsubinstr(,.)\n\n\n\n\nstr_split\nsplit"
  },
  {
    "objectID": "pres_rstudio/index.html#basics-1",
    "href": "pres_rstudio/index.html#basics-1",
    "title": "RStudio and Reproducibility",
    "section": "Basics",
    "text": "Basics\n\nid |> toupper()\n\n[1] \"ID1\" \"ID2\" \"ID3\" \"ID4\" \"ID5\" \"ID6\"\n\nmed |> str_detect(\"ml\")\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\nmed |> str_split(pattern = \" \")\n\n[[1]]\n[1] \"5\"     \"units\"\n\n[[2]]\n[1] \"100\" \"Ml\" \n\n[[3]]\n[1] \"10\" \"Ml\"\n\n[[4]]\n[1] \"5\"  \"ml\"\n\n[[5]]\n[1] \"10\" \"Ml\"\n\n[[6]]\n[1] \"10\" \"ml\"\n\n\nWhat explains the last result?"
  },
  {
    "objectID": "pres_rstudio/index.html#more-common",
    "href": "pres_rstudio/index.html#more-common",
    "title": "RStudio and Reproducibility",
    "section": "More Common",
    "text": "More Common\nThe problem is we want to manipulate these in the context of a dataset.\n\ntibble(med) |> \n  separate(med, into = c(\"amount\", \"unit\"), sep = \" \") |> \n  mutate(amount = amount |> as.numeric())\n\n# A tibble: 6 × 2\n  amount unit \n   <dbl> <chr>\n1      5 units\n2    100 Ml   \n3     10 Ml   \n4      5 ml   \n5     10 Ml   \n6     10 ml"
  },
  {
    "objectID": "pres_rstudio/index.html#warning",
    "href": "pres_rstudio/index.html#warning",
    "title": "RStudio and Reproducibility",
    "section": "Warning",
    "text": "Warning\n\n\n\n\n\n\nNote\n\n\nArithmetic with dates is not intuitive and a major source of errors."
  },
  {
    "objectID": "pres_rstudio/index.html#overview-2",
    "href": "pres_rstudio/index.html#overview-2",
    "title": "RStudio and Reproducibility",
    "section": "Overview",
    "text": "Overview\n\n\n\n\n\n\n\n\nto convert to date format\nStata\ngenerate dob=date(bday,\"MDY\")\n\n\n\nlubridate\ndf %>% select(id, v1)\n\n\nMonth\nStata\ngenerate m=month(dob)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nDay\nStata\ngenerate d=day(birthday)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))\n\n\nYear\nStata\ngenerate y=year(birthday)\n\n\n\nlubridate\nselect(df, starts_with(\"v\"))"
  },
  {
    "objectID": "pres_rstudio/index.html#basics-2",
    "href": "pres_rstudio/index.html#basics-2",
    "title": "RStudio and Reproducibility",
    "section": "Basics",
    "text": "Basics\n\n# \n\"2020-05-01\" |> as.Date()\n\n[1] \"2020-05-01\"\n\n\"May 1, 2020\" |> as.Date()\n\nError in charToDate(x): character string is not in a standard unambiguous format\n\n\"May 1, 2020\" |> lubridate::mdy()\n\n[1] \"2020-05-01\"\n\n# vector math, beware\n(dod |> as.Date() - dob)\n\nTime differences in days\n[1] 6259 6439 6028 6056 6181 6001"
  },
  {
    "objectID": "pres_rstudio/index.html#more-common-1",
    "href": "pres_rstudio/index.html#more-common-1",
    "title": "RStudio and Reproducibility",
    "section": "More common",
    "text": "More common\n\nlibrary(lubridate)\n\ntibble(dod, dob) |> \n  mutate(dod = as.Date(dod)) |>\n  mutate(intv = interval(dob, dod)) |> \n  mutate(age = intv / years(1))\n\n# A tibble: 6 × 4\n  dod        dob        intv                             age\n  <date>     <date>     <Interval>                     <dbl>\n1 2016-08-16 1999-06-28 1999-06-28 UTC--2016-08-16 UTC  17.1\n2 2016-08-31 1999-01-14 1999-01-14 UTC--2016-08-31 UTC  17.6\n3 2016-01-14 1999-07-14 1999-07-14 UTC--2016-01-14 UTC  16.5\n4 2016-06-01 1999-11-02 1999-11-02 UTC--2016-06-01 UTC  16.6\n5 2016-03-30 1999-04-28 1999-04-28 UTC--2016-03-30 UTC  16.9\n6 2016-03-31 1999-10-26 1999-10-26 UTC--2016-03-31 UTC  16.4"
  },
  {
    "objectID": "pres_rstudio/index.html#the-ide-idea",
    "href": "pres_rstudio/index.html#the-ide-idea",
    "title": "RStudio and Reproducibility",
    "section": "The IDE Idea",
    "text": "The IDE Idea\n\n\n\n\nR is a complete programming language.\nRStudio is an Integrated Development Environment that interacts with R (and other languages you have installed, like python).\nIt gives you lots of graphical interfaces, but almost every action is recorded in code or can be executed with code.\nRStudio is designed to gently push you towards writing things down, which makes them more reproducible."
  },
  {
    "objectID": "pres_rstudio/index.html#the-project",
    "href": "pres_rstudio/index.html#the-project",
    "title": "RStudio and Reproducibility",
    "section": "The Project",
    "text": "The Project\n\n\nMost of the time, RStudio encapsulates your work in a project. You’re project is in a folder, and comes with a .Rproj file, a .Rhistory file, and some other optional things (like git, renv)."
  },
  {
    "objectID": "pres_rstudio/index.html#gui",
    "href": "pres_rstudio/index.html#gui",
    "title": "RStudio and Reproducibility",
    "section": "GUI",
    "text": "GUI"
  },
  {
    "objectID": "pres_rstudio/index.html#with-code",
    "href": "pres_rstudio/index.html#with-code",
    "title": "RStudio and Reproducibility",
    "section": "With Code",
    "text": "With Code\nUsually, you need to install some packages to get started.\n\ninstall.packages(\"tidyverse\")\n\nR is open source software, meaning there is less top-down coordination, and fewer guarantees than from Stata. However, that means that there are typically many more options and many fewer limitations.\nHowever, you should try to vet (and cite!) the software you use.\nTip: Search ___ r package cran or ___ r package github. If the updated dates you find here are in the last few years, you are probably good to go."
  },
  {
    "objectID": "pres_rstudio/index.html#r-session-and-packages",
    "href": "pres_rstudio/index.html#r-session-and-packages",
    "title": "RStudio and Reproducibility",
    "section": "R session and packages",
    "text": "R session and packages\nWhen you open RStudio, it starts an R session for you. You can have multiple sessions on the same computer, and multiple RStudios running at the same time. Each one starts it’s own R process.\nThis is nice if you want to work on multiple projects at the same time.\nA session contains loaded libraries.\n\n# several packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stringr)\n\n# or a meta-package\nlibrary(tidyverse)\n\nIf something crashes, and your session restarts, you will have to reload these."
  },
  {
    "objectID": "pres_rstudio/index.html#console",
    "href": "pres_rstudio/index.html#console",
    "title": "RStudio and Reproducibility",
    "section": "Console",
    "text": "Console\n\n\nThe console is the “written record.” Everything that happens, happens in the console. There are helpful messages that appear in the console. These appear only here. Errors happen here.\n\n\n\n\n\n\nTip\n\n\nPaste errors in the console into google!\n\n\n\n\n\n\n\n\nWhen you start RStudio, you can see it starts R for you."
  },
  {
    "objectID": "pres_rstudio/index.html#source",
    "href": "pres_rstudio/index.html#source",
    "title": "RStudio and Reproducibility",
    "section": "Source",
    "text": "Source\nSource refers to code files. The two main ones are R scripts and Rmarkdown (or Quarto, which is like version 2 of Rmarkdown).\n\n\n\n\n\n\n\nR script (.R)\nRmarkdown/Quarto (.Rmd/.qmd)\n\n\n\n\n.R extension\n.Rmd or .qmd extension\n\n\njust a text file\nformatted text file (markdown) containing code chunks (R, python, Latex)\n\n\nstays a text file\n“compiles” or “knits” to rich output, like .html or .docx\n\n\nplain\ncontains plots, and intermediate steps.\n\n\nneeds R to run\nneeds RStudio to run\n\n\nmakes up packages\nmakes up analysis\n\n\nbackbone of R\nreproducible anaylsis,"
  },
  {
    "objectID": "pres_rstudio/index.html#files",
    "href": "pres_rstudio/index.html#files",
    "title": "RStudio and Reproducibility",
    "section": "Files",
    "text": "Files"
  },
  {
    "objectID": "pres_rstudio/index.html#environment-pane",
    "href": "pres_rstudio/index.html#environment-pane",
    "title": "RStudio and Reproducibility",
    "section": "Environment pane",
    "text": "Environment pane\n\nThe most important pane for new users is the environment pane.\nIf in doubt, this will always tell you the current state of your variables (by default)."
  },
  {
    "objectID": "pres_rstudio/index.html#history",
    "href": "pres_rstudio/index.html#history",
    "title": "RStudio and Reproducibility",
    "section": "History",
    "text": "History"
  },
  {
    "objectID": "pres_rstudio/index.html#connections",
    "href": "pres_rstudio/index.html#connections",
    "title": "RStudio and Reproducibility",
    "section": "Connections",
    "text": "Connections"
  },
  {
    "objectID": "pres_rstudio/index.html#plots",
    "href": "pres_rstudio/index.html#plots",
    "title": "RStudio and Reproducibility",
    "section": "Plots",
    "text": "Plots\n\n\nBy default, plots will show in the source pane for Rmarkdown and the “Plots” pane for scripts. You can have them all show in the “Plots” pane by going to Preferences > R Markdown and unchecking Show all output inline .\n\niris |>\n  ggplot(aes(x = Sepal.Length,\n             y = Sepal.Width)) +\n  geom_point()"
  },
  {
    "objectID": "pres_rstudio/index.html#help",
    "href": "pres_rstudio/index.html#help",
    "title": "RStudio and Reproducibility",
    "section": "Help",
    "text": "Help\nFinally, if you are having issues, and you don’t want to explore the internet for answers, all functions, and built-in data, come with documentation. Just put ? before the item of interest.\n\n?iris\n\n?rnorm"
  },
  {
    "objectID": "pres_rstudio/index.html#packages-pane",
    "href": "pres_rstudio/index.html#packages-pane",
    "title": "RStudio and Reproducibility",
    "section": "Packages Pane",
    "text": "Packages Pane\nThe install button helps with autocomplete. You can also manage which packages are loaded by checking them."
  },
  {
    "objectID": "pres_r4stata1/index.html#tidyverse",
    "href": "pres_r4stata1/index.html#tidyverse",
    "title": "R for Medical Research",
    "section": "tidyverse",
    "text": "tidyverse\nThe tidyverse is an opinionated set of tools that work well together. They have gotten popular in the R community in the last 8 years, and this workshop defaults to them.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "pres_r4stata1/index.html#data-formats",
    "href": "pres_r4stata1/index.html#data-formats",
    "title": "R for Stata Users 1",
    "section": "Data formats",
    "text": "Data formats\nData comes to us in many forms. R has utilities for most of them.\nid,v1,v2\nid01,M,0\nid02,F,2\nid03,M,4\nid01,M,6\nid02,F,8\nid03,M,10\n\n# read the csv file above\ndf <- readr::read_csv(\"data/df.csv\")\n# read Stata .dta files\ndf <- haven::read_dta(\"data/df.dta\")\n# read excel files\ndf <- readxl::read_excel(\"data/df.xlsx\")"
  },
  {
    "objectID": "pres_r4stata1/index.html#create-data",
    "href": "pres_r4stata1/index.html#create-data",
    "title": "R for Medical Research",
    "section": "Create Data",
    "text": "Create Data\nYou can also create data.\n\ndf &lt;- tibble(\n  id = c(\"id01\", \"id02\", \"id03\", \"id01\", \"id02\", \"id03\"),     \n  v1 = rep(c(\"M\", \"F\", \"M\"), 2),                          \n  v2 = seq(0, 10, by = 2) \n)\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10\n\n\ntibble is a easy-to-read kind of data.frame, and similar to a dataset. You can create them manually, or from files."
  },
  {
    "objectID": "index.html#registration",
    "href": "index.html#registration",
    "title": "R for Medical Research",
    "section": "Registration",
    "text": "Registration\nRegistration is closed."
  },
  {
    "objectID": "index.html#sec-reg",
    "href": "index.html#sec-reg",
    "title": "R for Medical Research",
    "section": "Registration",
    "text": "Registration\n\nLoading…"
  },
  {
    "objectID": "pres_r4stata1/index.html#variable-types-1",
    "href": "pres_r4stata1/index.html#variable-types-1",
    "title": "R for Medical Research",
    "section": "Variable types 1",
    "text": "Variable types 1\nUsually built-in functions can figure things out. To be specific, a quick fix is to declare the types:\n\ndf1 &lt;- readr::read_csv(\"data/df.csv\")\n\ndf2 &lt;- readr::read_csv(\"data/df.csv\", \n                      # \"f\" means factor\n                      # \"c\" means character\n                      col_types = \"ffc\")\ndf1 |&gt; head(1)\n\n# A tibble: 1 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0\n\ndf2 |&gt; head(1)\n\n# A tibble: 1 × 3\n  id    v1    v2   \n  &lt;fct&gt; &lt;fct&gt; &lt;chr&gt;\n1 id01  M     0    \n\n\nNotice that I can have multiple datasets running at once, each assigned to a variable."
  },
  {
    "objectID": "pres_r4stata1/index.html#variable-types-2",
    "href": "pres_r4stata1/index.html#variable-types-2",
    "title": "R for Medical Research",
    "section": "Variable types 2",
    "text": "Variable types 2\nOr you can modify them as needed later (more on this later)\n\ndf &lt;- readr::read_csv(\"data/df.csv\")\n\ndf |&gt; \n  mutate(id = as.factor(id)) |&gt; \n  head(1)\n\n# A tibble: 1 × 3\n  id    v1       v2\n  &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0"
  },
  {
    "objectID": "pres_r4stata2/index.html#go-to-your-rstudio-session",
    "href": "pres_r4stata2/index.html#go-to-your-rstudio-session",
    "title": "R for Stata Users 2",
    "section": "Go to your RStudio session",
    "text": "Go to your RStudio session"
  },
  {
    "objectID": "pres_r4stata1/index.html#rstudio-project",
    "href": "pres_r4stata1/index.html#rstudio-project",
    "title": "R for Medical Research",
    "section": "RStudio project",
    "text": "RStudio project\nGet this going during the presentation:\nhttps://rstudio.cloud/content/4697823"
  },
  {
    "objectID": "pres_r4stata1/index.html#ptrc",
    "href": "pres_r4stata1/index.html#ptrc",
    "title": "R for Medical Research",
    "section": "PTRC",
    "text": "PTRC\nThese presentations are hosted and supported by the Pulmonary Translational Research Core:\n\n\n\nDr. Jessica Bohn\nDirector\n\n\nDr. Tim Corcoran\nAssociate Director\n\n\nDr. S. Mehdi Nouraie\nLead, Biometrics Core\n\n\nMatt Broerman\nBiostatistician\n\n\nXiaoping Chen\nData Manager"
  },
  {
    "objectID": "pres_r4stata1/index.html#ptrc-services",
    "href": "pres_r4stata1/index.html#ptrc-services",
    "title": "R for Stata Users 1",
    "section": "PTRC Services",
    "text": "PTRC Services\n\n\nRequest services: https://www.ctsiredcap.pitt.edu/redcap/surveys/?s=493FWXAWA8\n\n\nA short list of services:\n\nExperimental Design\n\nPower analysis\nProtocol Review\nRandomization\n\nDatabase Design\n\nEHR extraction and storage\nData Collection with REDCap\n\nAnalysis\n\nStatistics\nVisualization\nTables\nInteractive Apps\n\nand much more"
  },
  {
    "objectID": "pres_r4stata1/index.html#ptrc-biometric-services",
    "href": "pres_r4stata1/index.html#ptrc-biometric-services",
    "title": "R for Medical Research",
    "section": "PTRC Biometric Services",
    "text": "PTRC Biometric Services\n\n\nRequest services: https://www.ctsiredcap.pitt.edu/redcap/surveys/?s=493FWXAWA8\n\n\nServices:\n\nExperimental Design\nDatabase Design\nAnalysis\n\nWe are especially interested in enrolling studies in PULCE2, an intergrated set of support services from study conception to publication. Please ask me more! mjb357 “at” pitt :dot: edu"
  },
  {
    "objectID": "pres_r4stata1/index.html#stop",
    "href": "pres_r4stata1/index.html#stop",
    "title": "R for Stata Users 1",
    "section": "Stop",
    "text": "Stop\nThat’s enough for today"
  },
  {
    "objectID": "pres_r4stata2/index.html#create-data",
    "href": "pres_r4stata2/index.html#create-data",
    "title": "R for Stata Users 2",
    "section": "Create Data",
    "text": "Create Data\nRecall this data from last time.\n\ndf <- tibble(\n  id = c(\"id01\", \"id02\", \"id03\", \"id01\", \"id02\", \"id03\"),     \n  v1 = rep(c(\"M\", \"F\", \"M\"), 2),                          \n  v2 = seq(0, 10, by = 2) \n)\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10"
  },
  {
    "objectID": "pres_r4stata2/index.html#demo-1",
    "href": "pres_r4stata2/index.html#demo-1",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo\n\ndf |> \n  filter(v1 == \"M\")\n\n# A tibble: 4 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id03  M         4\n3 id01  M         6\n4 id03  M        10\n\ndf %>% filter(id %in% c(\"id01\", \"id02\"))\n\n# A tibble: 4 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id02  F         2\n3 id01  M         6\n4 id02  F         8"
  },
  {
    "objectID": "pres_r4stata2/index.html#advanced",
    "href": "pres_r4stata2/index.html#advanced",
    "title": "R for Stata Users 2",
    "section": "Advanced",
    "text": "Advanced\n\n\n\n\n\n\n\n\ndistinct rows\nStata\nduplicates drop v1 v2, force\n\n\n\ndplyr\ndistinct(df, v1, v2)\n\n\nbut keep the rest\nStata\nbysort ID:keep if _n>1\n\n\n\ndplyr\ndistinct(df, v1, v2, .keep = TRUE)\n\n\nlook at dupes\nStata\nbysort ID:keep if _n==1\n\n\n\ndplyr\ndf %>% group_by(ID) |> filter(n() > 1)\n\n\ncount combinations\nStata\ndistinct v1 v2, joint\n\n\n\ndplyr\ndf %>% group_by(v1, v2) %>% n_groups()\n\n\nempty rows\nStata\nkeep if inrange(v1, 3, 5)\n\n\n\ndplyr\ndf %>% filter(is.na(v1))"
  },
  {
    "objectID": "pres_r4stata2/index.html#demo-2",
    "href": "pres_r4stata2/index.html#demo-2",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo\n\ndf |> filter(str_detect(id, \"03\"))\n\n# A tibble: 2 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id03  M         4\n2 id03  M        10\n\ndf_mod <- df\ndf_mod$v1[4:6] <- NA\n\ndf_mod |> filter(is.na(v1))\n\n# A tibble: 3 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  <NA>      6\n2 id02  <NA>      8\n3 id03  <NA>     10"
  },
  {
    "objectID": "pres_r4stata2/index.html#basic",
    "href": "pres_r4stata2/index.html#basic",
    "title": "R for Stata Users 2",
    "section": "Basic",
    "text": "Basic\nGetting good at counting is a superpower.\n\ndf |> \n  count(v1)\n\n# A tibble: 2 × 2\n  v1        n\n  <chr> <int>\n1 F         2\n2 M         4\n\ndf |> \n  count(v1, sort = TRUE)\n\n# A tibble: 2 × 2\n  v1        n\n  <chr> <int>\n1 M         4\n2 F         2"
  },
  {
    "objectID": "pres_r4stata2/index.html#double-up",
    "href": "pres_r4stata2/index.html#double-up",
    "title": "R for Stata Users 2",
    "section": "Double up",
    "text": "Double up\nSurprisingly often, you want to count on counts. But this comes in with big datasets. More later.\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  <chr> <chr> <dbl>\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10\n\ndf |> \n  count(id) |> \n  count(n)\n\n# A tibble: 1 × 2\n      n    nn\n  <int> <int>\n1     2     3"
  },
  {
    "objectID": "pres_r4stata2/index.html#example",
    "href": "pres_r4stata2/index.html#example",
    "title": "R for Stata Users 2",
    "section": "Example",
    "text": "Example\nThis dataset is kinda small, but already hard to make sense of.\nWith counting, right away, we know that cars with gear 3 and cylinder 8 dominate.\n\nmtcars |> head(4)\n\n                mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n\nmtcars |> \n  tibble() |> \n  count(gear, cyl)\n\n# A tibble: 8 × 3\n   gear   cyl     n\n  <dbl> <dbl> <int>\n1     3     4     1\n2     3     6     2\n3     3     8    12\n4     4     4     8\n5     4     6     4\n6     5     4     2\n7     5     6     1\n8     5     8     2"
  },
  {
    "objectID": "pres_r4stata2/index.html#demo-3",
    "href": "pres_r4stata2/index.html#demo-3",
    "title": "R for Stata Users 2",
    "section": "Demo",
    "text": "Demo\n\nweight\n\nweight |> max()\nweight |> n_distinct()\nweight |> ifelse(_ > 170, \"more\", \"less\")\nifelse(weight > 170, \"more\", \"less\")\n\nError: invalid use of pipe placeholder"
  },
  {
    "objectID": "pres_r4stata2/index.html#basics-3",
    "href": "pres_r4stata2/index.html#basics-3",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\nid |> toupper()\n\n[1] \"ID1\" \"ID2\" \"ID3\" \"ID4\" \"ID5\" \"ID6\"\n\nmed |> str_detect(\"ml\")\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE\n\nmed |> str_split(pattern = \" \")\n\n[[1]]\n[1] \"5\"     \"units\"\n\n[[2]]\n[1] \"100\" \"Ml\" \n\n[[3]]\n[1] \"10\" \"Ml\"\n\n[[4]]\n[1] \"5\"  \"ml\"\n\n[[5]]\n[1] \"10\" \"Ml\"\n\n[[6]]\n[1] \"10\" \"ml\"\n\n\nWhat explains the last result?"
  },
  {
    "objectID": "pres_r4stata2/index.html#basics-4",
    "href": "pres_r4stata2/index.html#basics-4",
    "title": "R for Stata Users 2",
    "section": "Basics",
    "text": "Basics\n\n# \n\"2020-05-01\" |> as.Date()\n\n[1] \"2020-05-01\"\n\n\"May 1, 2020\" |> as.Date()\n\nError in charToDate(x): character string is not in a standard unambiguous format\n\n\"May 1, 2020\" |> lubridate::mdy()\n\n[1] \"2020-05-01\"\n\n# vector math, beware\n(dod |> as.Date() - dob)\n\nTime differences in days\n[1] 6259 6439 6028 6056 6181 6001"
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "R for Medical Research",
    "section": "Materials",
    "text": "Materials\nAll the materials we’ll use in this workshop are in this RStudio project. You can open this project in your browser without needing to install or download anything on your computer. Open this RStudio.cloud project (you’ll need to create a free account really quick):\n\n  RStudio.cloud project"
  },
  {
    "objectID": "pres_rstudio/index.html#console-and-history",
    "href": "pres_rstudio/index.html#console-and-history",
    "title": "RStudio and Reproducibility",
    "section": "Console and History",
    "text": "Console and History\n\n\nThe console is the “written record.” Everything that happens, happens in the console. There are helpful messages that appear in the console. These appear only here. Errors happen here.\n\n\n\n\n\n\nTip\n\n\nPaste errors in the console into google!\n\n\n\n\n\n\n\n\nWhen you start RStudio, you can see it starts R for you."
  },
  {
    "objectID": "pres_rstudio/index.html#source-example",
    "href": "pres_rstudio/index.html#source-example",
    "title": "RStudio and Reproducibility",
    "section": "Source example",
    "text": "Source example\n\nIn an R script, all of the space is code, except comments.\nIn a .Rmd o .qmd, there is a header with metadata (in yml), code chunks in R or python, among others. And formating in markdown or latex. Compares to jupyter notebooks, but clean separation between code and output."
  },
  {
    "objectID": "pres_rstudio/index.html#intro",
    "href": "pres_rstudio/index.html#intro",
    "title": "RStudio and Reproducibility",
    "section": "Intro",
    "text": "Intro\n\nToday we will quickly tour RStudio and then demonstrate a good way to start your next reproducible analysis.\nSince code notebooks can confuse users about the current state of a variable, we will discuss where problems come up and how to troubleshoot."
  },
  {
    "objectID": "pres_rstudio/index.html#state-demo-downstream",
    "href": "pres_rstudio/index.html#state-demo-downstream",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Downstream",
    "text": "State Demo Downstream\n\ntv <- c(1:4)\n\ntv2 <- tv\n\ntv2 <- c(tv, NA)\n\ntv"
  },
  {
    "objectID": "pres_rstudio/index.html#state-demo-1",
    "href": "pres_rstudio/index.html#state-demo-1",
    "title": "RStudio and Reproducibility",
    "section": "State Demo 1",
    "text": "State Demo 1\n\ntv <- c(1:4)\n\ntv2 <- tv\n\ntv2 <- c(tv, NA)\n\ntv\n\n[1] 1 2 3 4"
  },
  {
    "objectID": "pres_rstudio/index.html#state-demo-downstream-1",
    "href": "pres_rstudio/index.html#state-demo-downstream-1",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Downstream",
    "text": "State Demo Downstream\n\ntv <- c(1:4)\n\ntv2 <- tv\n\ntv2 <- c(tv, NA)\n\ntv\n\n[1] 1 2 3 4\n\n\nChanges to variables downstream don’t change the variables that depend on them."
  },
  {
    "objectID": "pres_rstudio/index.html#state-demo-upstream",
    "href": "pres_rstudio/index.html#state-demo-upstream",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Upstream",
    "text": "State Demo Upstream\n\ntv <- c(1:4)\n\ntv2 <- tv\n\ntv <- c(tv, 5:6)\n\ntv2"
  },
  {
    "objectID": "pres_rstudio/index.html#state-demo-upstream-1",
    "href": "pres_rstudio/index.html#state-demo-upstream-1",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Upstream",
    "text": "State Demo Upstream\n\ntv <- c(1:4) #1\n\ntv2 <- tv #3\n\ntv <- c(tv, 5:6) #2\n\ntv2 #4\n\n[1] 1 2 3 4\n\n\n\nChanges to variables first defined upstream don’t change the variables that depend on them…\nIF the depending variables were defined even further upstream.\nWhat happens if the code was run in the order of the numbers?"
  },
  {
    "objectID": "pres_rstudio/index.html#state-demo",
    "href": "pres_rstudio/index.html#state-demo",
    "title": "RStudio and Reproducibility",
    "section": "State Demo",
    "text": "State Demo\n\nAgain, for the sake of reproducibility, you will need to compile the whole document eventually in a clean environment.\n\nRemember: code wants to be run sequentially. You can get into trouble if you define things somewhere downstream, but then depend on it upstream. The best guard against this is to use these options:"
  },
  {
    "objectID": "pres_r4stata3/index.html#load-data-1",
    "href": "pres_r4stata3/index.html#load-data-1",
    "title": "R for Medical Research 3",
    "section": "Load Data 1",
    "text": "Load Data 1\nWe will use this toy dataset.\n\n\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\ndob <- \n  sample(seq(as.Date('1999/01/01'),\n             as.Date('2000/01/01'),\n             by=\"day\"), 6)\ndod <- \n  sample(seq(as.Date('2016/01/01'),\n             as.Date('2017/01/01'),\n             by=\"day\"), 6)\nweight <- \n  rnorm(n = 6, mean = 170, sd = 5)\n\ndemo <- \n  tibble(id, dob, dod, weight) |> \n  # id6 lost to follow-up\n  head(5)\n\n\n\n\n# A tibble: 5 × 4\n  id    dob        dod        weight\n  <chr> <date>     <date>      <dbl>\n1 id1   1999-06-28 2016-08-16   167.\n2 id2   1999-01-14 2016-08-31   168.\n3 id3   1999-07-14 2016-01-14   176.\n4 id4   1999-11-02 2016-06-01   172.\n5 id5   1999-04-28 2016-03-30   172."
  },
  {
    "objectID": "pres_r4stata3/index.html#load-data-2",
    "href": "pres_r4stata3/index.html#load-data-2",
    "title": "R for Medical Research 3",
    "section": "Load Data 2",
    "text": "Load Data 2\nAnd this toy dataset.\n\n\n\nid2 <- rep(id, times = 2)\ntrt <- rep(c(\"trt\", \"crl\"), \n           times = 6)\nvst <- rep(c(\"vst1\", \"vst2\"), \n           each = 6)\nres <- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\ntrial <- tibble(id2, vst, trt) |> \n  arrange(vst, trt) |> \n  mutate(res = res) |> \n  arrange(vst, id2)\n\ntrial[12, 4] <- NA\n\n\n\n\n# A tibble: 12 × 4\n   id2   vst   trt     res\n   <chr> <chr> <chr> <dbl>\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA"
  },
  {
    "objectID": "pres_r4stata3/index.html#long-to-wide-pivot",
    "href": "pres_r4stata3/index.html#long-to-wide-pivot",
    "title": "R for Medical Research 3",
    "section": "Long to Wide (Pivot)",
    "text": "Long to Wide (Pivot)\n\ntrial |> \n  pivot_wider(id_cols = id2, names_from = vst, values_from = res)\n\n# A tibble: 6 × 3\n  id2    vst1  vst2\n  <chr> <dbl> <dbl>\n1 id1    8.03  16.3\n2 id2    9.44  10.9\n3 id3   10.7   16.4\n4 id4   11.8   11.8\n5 id5    9.53  15.3\n6 id6   10.5   NA  \n\n\nNotice that we loose the treatment variable."
  },
  {
    "objectID": "pres_r4stata3/index.html#calculate",
    "href": "pres_r4stata3/index.html#calculate",
    "title": "R for Medical Research 3",
    "section": "Calculate",
    "text": "Calculate\n\ntrial_wide <- trial |> \n  pivot_wider(id_cols = id2, names_from = vst, values_from = res) |> \n  mutate(diff_vst = vst2 - vst1)\n\ntrial_wide\n\n# A tibble: 6 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id1    8.03  16.3  8.24   \n2 id2    9.44  10.9  1.49   \n3 id3   10.7   16.4  5.67   \n4 id4   11.8   11.8 -0.00489\n5 id5    9.53  15.3  5.79   \n6 id6   10.5   NA   NA      \n\n\nNow we can add on the difference, and save the result to a new variable."
  },
  {
    "objectID": "pres_r4stata3/index.html#left-join",
    "href": "pres_r4stata3/index.html#left-join",
    "title": "R for Medical Research 3",
    "section": "Left Join",
    "text": "Left Join\n\ndemo |> \n  left_join(trial_wide, by = c(\"id\" = \"id2\"))\n\n# A tibble: 5 × 7\n  id    dob        dod        weight  vst1  vst2 diff_vst\n  <chr> <date>     <date>      <dbl> <dbl> <dbl>    <dbl>\n1 id1   1999-06-28 2016-08-16   167.  8.03  16.3  8.24   \n2 id2   1999-01-14 2016-08-31   168.  9.44  10.9  1.49   \n3 id3   1999-07-14 2016-01-14   176. 10.7   16.4  5.67   \n4 id4   1999-11-02 2016-06-01   172. 11.8   11.8 -0.00489\n5 id5   1999-04-28 2016-03-30   172.  9.53  15.3  5.79   \n\n\nUsually you have one main dataset, and you want to add to it. You don’t care about everything in the other dataset. This is a “left join,” and the most common."
  },
  {
    "objectID": "pres_r4stata3/index.html#full-join",
    "href": "pres_r4stata3/index.html#full-join",
    "title": "R for Medical Research 3",
    "section": "Full Join",
    "text": "Full Join\n\ndemo |> \n  full_join(trial_wide, by = c(\"id\" = \"id2\"))\n\n# A tibble: 6 × 7\n  id    dob        dod        weight  vst1  vst2 diff_vst\n  <chr> <date>     <date>      <dbl> <dbl> <dbl>    <dbl>\n1 id1   1999-06-28 2016-08-16   167.  8.03  16.3  8.24   \n2 id2   1999-01-14 2016-08-31   168.  9.44  10.9  1.49   \n3 id3   1999-07-14 2016-01-14   176. 10.7   16.4  5.67   \n4 id4   1999-11-02 2016-06-01   172. 11.8   11.8 -0.00489\n5 id5   1999-04-28 2016-03-30   172.  9.53  15.3  5.79   \n6 id6   NA         NA            NA  10.5   NA   NA      \n\n\nFull joins treat both datasets as equal, and includes all data from both sets. Notice id6 shows up again."
  },
  {
    "objectID": "pres_r4stata3/index.html#anti-join-reverse",
    "href": "pres_r4stata3/index.html#anti-join-reverse",
    "title": "R for Medical Research 3",
    "section": "Anti Join (reverse)",
    "text": "Anti Join (reverse)\n\ntrial_wide |> \n  anti_join(demo, by = c(\"id2\" = \"id\"))\n\n# A tibble: 1 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id6    10.5    NA       NA\n\n\nHere, we are getting all the rows in trial_wide that are not in demo."
  },
  {
    "objectID": "pres_r4stata3/index.html#semi-join",
    "href": "pres_r4stata3/index.html#semi-join",
    "title": "R for Stata Users 3",
    "section": "Semi Join",
    "text": "Semi Join\n\ntrial_wide |> \n  semi_join(demo, by = c(\"id2\" = \"id\"))\n\n# A tibble: 5 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id1    8.03  16.3  8.24   \n2 id2    9.44  10.9  1.49   \n3 id3   10.7   16.4  5.67   \n4 id4   11.8   11.8 -0.00489\n5 id5    9.53  15.3  5.79"
  },
  {
    "objectID": "pres_r4stata3/index.html#semi-join-reverse",
    "href": "pres_r4stata3/index.html#semi-join-reverse",
    "title": "R for Medical Research 3",
    "section": "Semi Join (reverse)",
    "text": "Semi Join (reverse)\n\ntrial_wide |> \n  semi_join(demo, by = c(\"id2\" = \"id\"))\n\n# A tibble: 5 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id1    8.03  16.3  8.24   \n2 id2    9.44  10.9  1.49   \n3 id3   10.7   16.4  5.67   \n4 id4   11.8   11.8 -0.00489\n5 id5    9.53  15.3  5.79   \n\n\nHere, we are getting only the rows in trial_wide that are also in demo (but not the columns from it)"
  },
  {
    "objectID": "pres_r4stata3/index.html#demographics",
    "href": "pres_r4stata3/index.html#demographics",
    "title": "R for Medical Research 3",
    "section": "Demographics",
    "text": "Demographics\nWe will use this toy dataset.\n\n\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\ndob <- \n  sample(seq(as.Date('1999/01/01'),\n             as.Date('2000/01/01'),\n             by=\"day\"), 6)\ndod <- \n  sample(seq(as.Date('2016/01/01'),\n             as.Date('2017/01/01'),\n             by=\"day\"), 6)\nweight <- \n  rnorm(n = 6, mean = 170, sd = 5)\n\ndemo <- \n  tibble(id, dob, dod, weight) |> \n  # id6 lost to follow-up\n  head(5)\n\n\n\n\n# A tibble: 5 × 4\n  id    dob        dod        weight\n  <chr> <date>     <date>      <dbl>\n1 id1   1999-06-28 2016-08-16   167.\n2 id2   1999-01-14 2016-08-31   168.\n3 id3   1999-07-14 2016-01-14   176.\n4 id4   1999-11-02 2016-06-01   172.\n5 id5   1999-04-28 2016-03-30   172."
  },
  {
    "objectID": "pres_r4stata3/index.html#trial-data",
    "href": "pres_r4stata3/index.html#trial-data",
    "title": "R for Medical Research 3",
    "section": "Trial data",
    "text": "Trial data\nAnd this toy dataset.\n\n\n\nid2 <- rep(id, times = 2)\ntrt <- rep(c(\"trt\", \"crl\"), \n           times = 6)\nvst <- rep(c(\"vst1\", \"vst2\"), \n           each = 6)\nres <- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\ntrial <- tibble(id2, vst, trt) |> \n  arrange(vst, trt) |> \n  mutate(res = res) |> \n  arrange(vst, id2)\n\ntrial[12, 4] <- NA\n\n\n\n\n# A tibble: 12 × 4\n   id2   vst   trt     res\n   <chr> <chr> <chr> <dbl>\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA"
  },
  {
    "objectID": "pres_r4stata4/index.html",
    "href": "pres_r4stata4/index.html",
    "title": "R for Medical Research 3",
    "section": "",
    "text": "Today we will convert data from a long format to a wide format, and join together separate datasets. This completes the basic data manipulation series."
  },
  {
    "objectID": "pres_r4stata4/index.html#demographics",
    "href": "pres_r4stata4/index.html#demographics",
    "title": "R for Medical Research 6",
    "section": "Demographics",
    "text": "Demographics\nWe will use this toy dataset.\n\n\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\ndob <- \n  sample(seq(as.Date('1999/01/01'),\n             as.Date('2000/01/01'),\n             by=\"day\"), 6)\ndod <- \n  sample(seq(as.Date('2016/01/01'),\n             as.Date('2017/01/01'),\n             by=\"day\"), 6)\nweight <- \n  rnorm(n = 6, mean = 170, sd = 5)\n\ndemo <- \n  tibble(id, dob, dod, weight) |> \n  # id6 lost to follow-up\n  head(5)\n\n\n\n\n# A tibble: 5 × 4\n  id    dob        dod        weight\n  <chr> <date>     <date>      <dbl>\n1 id1   1999-06-28 2016-08-16   167.\n2 id2   1999-01-14 2016-08-31   168.\n3 id3   1999-07-14 2016-01-14   176.\n4 id4   1999-11-02 2016-06-01   172.\n5 id5   1999-04-28 2016-03-30   172."
  },
  {
    "objectID": "pres_r4stata4/index.html#trial-data",
    "href": "pres_r4stata4/index.html#trial-data",
    "title": "R for Medical Research 6",
    "section": "Trial data",
    "text": "Trial data\nAnd this toy dataset.\n\n\n\nid2 <- rep(id, times = 2)\ngrp <- rep(c(\"trt\", \"crl\"), \n           times = 6)\nvst <- rep(c(\"vst1\", \"vst2\"), \n           each = 6)\nres <- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\ntrial <- tibble(id2, vst, grp) |> \n  arrange(vst, grp) |> \n  mutate(res = res) |> \n  arrange(vst, id2)\n\ntrial[12, 4] <- NA\n\n\n\n\n# A tibble: 12 × 4\n   id2   vst   grp     res\n   <chr> <chr> <chr> <dbl>\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA"
  },
  {
    "objectID": "pres_r4stata4/index.html#long-to-wide-pivot",
    "href": "pres_r4stata4/index.html#long-to-wide-pivot",
    "title": "R for Medical Research 3",
    "section": "Long to Wide (Pivot)",
    "text": "Long to Wide (Pivot)\n\ntrial |> \n  pivot_wider(id_cols = id2, names_from = vst, values_from = res)\n\n# A tibble: 6 × 3\n  id2    vst1  vst2\n  <chr> <dbl> <dbl>\n1 id1    8.03  16.3\n2 id2    9.44  10.9\n3 id3   10.7   16.4\n4 id4   11.8   11.8\n5 id5    9.53  15.3\n6 id6   10.5   NA  \n\n\nNotice that we loose the treatment variable."
  },
  {
    "objectID": "pres_r4stata4/index.html#calculate",
    "href": "pres_r4stata4/index.html#calculate",
    "title": "R for Medical Research 3",
    "section": "Calculate",
    "text": "Calculate\n\ntrial_wide <- trial |> \n  pivot_wider(id_cols = id2, names_from = vst, values_from = res) |> \n  mutate(diff_vst = vst2 - vst1)\n\ntrial_wide\n\n# A tibble: 6 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id1    8.03  16.3  8.24   \n2 id2    9.44  10.9  1.49   \n3 id3   10.7   16.4  5.67   \n4 id4   11.8   11.8 -0.00489\n5 id5    9.53  15.3  5.79   \n6 id6   10.5   NA   NA      \n\n\nNow we can add on the difference, and save the result to a new variable."
  },
  {
    "objectID": "pres_r4stata4/index.html#left-join",
    "href": "pres_r4stata4/index.html#left-join",
    "title": "R for Medical Research 3",
    "section": "Left Join",
    "text": "Left Join\n\ndemo |> \n  left_join(trial_wide, by = c(\"id\" = \"id2\"))\n\n# A tibble: 5 × 7\n  id    dob        dod        weight  vst1  vst2 diff_vst\n  <chr> <date>     <date>      <dbl> <dbl> <dbl>    <dbl>\n1 id1   1999-06-28 2016-08-16   167.  8.03  16.3  8.24   \n2 id2   1999-01-14 2016-08-31   168.  9.44  10.9  1.49   \n3 id3   1999-07-14 2016-01-14   176. 10.7   16.4  5.67   \n4 id4   1999-11-02 2016-06-01   172. 11.8   11.8 -0.00489\n5 id5   1999-04-28 2016-03-30   172.  9.53  15.3  5.79   \n\n\nUsually you have one main dataset, and you want to add to it. You don’t care about everything in the other dataset. This is a “left join,” and the most common."
  },
  {
    "objectID": "pres_r4stata4/index.html#full-join",
    "href": "pres_r4stata4/index.html#full-join",
    "title": "R for Medical Research 3",
    "section": "Full Join",
    "text": "Full Join\n\ndemo |> \n  full_join(trial_wide, by = c(\"id\" = \"id2\"))\n\n# A tibble: 6 × 7\n  id    dob        dod        weight  vst1  vst2 diff_vst\n  <chr> <date>     <date>      <dbl> <dbl> <dbl>    <dbl>\n1 id1   1999-06-28 2016-08-16   167.  8.03  16.3  8.24   \n2 id2   1999-01-14 2016-08-31   168.  9.44  10.9  1.49   \n3 id3   1999-07-14 2016-01-14   176. 10.7   16.4  5.67   \n4 id4   1999-11-02 2016-06-01   172. 11.8   11.8 -0.00489\n5 id5   1999-04-28 2016-03-30   172.  9.53  15.3  5.79   \n6 id6   NA         NA            NA  10.5   NA   NA      \n\n\nFull joins treat both datasets as equal, and includes all data from both sets. Notice id6 shows up again."
  },
  {
    "objectID": "pres_r4stata4/index.html#anti-join-reverse",
    "href": "pres_r4stata4/index.html#anti-join-reverse",
    "title": "R for Medical Research 3",
    "section": "Anti Join (reverse)",
    "text": "Anti Join (reverse)\n\ntrial_wide |> \n  anti_join(demo, by = c(\"id2\" = \"id\"))\n\n# A tibble: 1 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id6    10.5    NA       NA\n\n\nHere, we are getting all the rows in trial_wide that are not in demo."
  },
  {
    "objectID": "pres_r4stata4/index.html#semi-join-reverse",
    "href": "pres_r4stata4/index.html#semi-join-reverse",
    "title": "R for Medical Research 3",
    "section": "Semi Join (reverse)",
    "text": "Semi Join (reverse)\n\ntrial_wide |> \n  semi_join(demo, by = c(\"id2\" = \"id\"))\n\n# A tibble: 5 × 4\n  id2    vst1  vst2 diff_vst\n  <chr> <dbl> <dbl>    <dbl>\n1 id1    8.03  16.3  8.24   \n2 id2    9.44  10.9  1.49   \n3 id3   10.7   16.4  5.67   \n4 id4   11.8   11.8 -0.00489\n5 id5    9.53  15.3  5.79   \n\n\nHere, we are getting only the rows in trial_wide that are also in demo (but not the columns from it)"
  },
  {
    "objectID": "pres_r4stata4/index.html#overview",
    "href": "pres_r4stata4/index.html#overview",
    "title": "R for Medical Research 6",
    "section": "Overview",
    "text": "Overview\nToday we will explore the basics of modeling with a toy dataset and show how to compare multiple models in a nice format."
  },
  {
    "objectID": "pres_r4stata4/index.html#disclaimer",
    "href": "pres_r4stata4/index.html#disclaimer",
    "title": "R for Medical Research 5",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell us!"
  },
  {
    "objectID": "pres_r4stata4/index.html#notice",
    "href": "pres_r4stata4/index.html#notice",
    "title": "R for Medical Research 6",
    "section": "Notice",
    "text": "Notice\n\n\n\nres <- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\n\n\n# A tibble: 12 × 4\n   id2   vst   grp     res\n   <chr> <chr> <chr> <dbl>\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA   \n\n\n\nSince this is a toy dataset, we know the data generating process. All subjects start at visit one with a test result drawn from \\(N(10, 1)\\) distribution. The control subjects then have a followup visit from \\(N(12, 1)\\), while the treatment subjects are from \\(N(17, 1)\\). One control subject was lost to followup."
  },
  {
    "objectID": "pres_r4stata4/index.html#reshape",
    "href": "pres_r4stata4/index.html#reshape",
    "title": "R for Medical Research 6",
    "section": "Reshape",
    "text": "Reshape\nA simple way to handle this data is to just model the difference between visit 1 and visit 2. To do that, we need to pivot. Notice I name the difference res_diff.\n\ntrial_wide <- \n  trial |> \n  pivot_wider(names_from = vst, values_from = res) |> \n  mutate(res_diff =  vst2 - vst1)\n\ntrial_wide\n\n# A tibble: 6 × 5\n  id2   grp    vst1  vst2 res_diff\n  <chr> <chr> <dbl> <dbl>    <dbl>\n1 id1   trt    8.03  16.3  8.24   \n2 id2   crl    9.44  10.9  1.49   \n3 id3   trt   10.7   16.4  5.67   \n4 id4   crl   11.8   11.8 -0.00489\n5 id5   trt    9.53  15.3  5.79   \n6 id6   crl   10.5   NA   NA"
  },
  {
    "objectID": "pres_r4stata4/index.html#first-model-1",
    "href": "pres_r4stata4/index.html#first-model-1",
    "title": "R for Medical Research 6",
    "section": "First model 1",
    "text": "First model 1\nHere is the basic syntax for a linear model. We can save the model to a variable.\nWe use a “formula syntax” to write our model down. res_diff ~ grp says, predict the mean of the pre-post difference as a function of the group.\n\nmod1 <- lm(res_diff ~ grp, data = trial_wide)\n\nmod1\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nCoefficients:\n(Intercept)       grptrt  \n     0.7416       5.8242"
  },
  {
    "objectID": "pres_r4stata4/index.html#first-model-2",
    "href": "pres_r4stata4/index.html#first-model-2",
    "title": "R for Medical Research 6",
    "section": "First model 2",
    "text": "First model 2\nNotice that in this short summary, the lm() function appends the effect class trt (as opposed to the reference class crl) to the exposure variable, grp, so we get grptrt. The coefficient is 5.82. This estimate is close to the “difference of difference” we expect. The difference between\n\\((N_{vst2,trt}(17, 1) - N_{vst1,trt}(10, 1))\\) and\n\\((N_{vst2,crl}(12, 1) - N_{vst1,crl}(10, 1))\\) equals\n\\(N(5, 4)\\)\n\nmod1 <- lm(res_diff ~ grp, data = trial_wide)\n\nmod1\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nCoefficients:\n(Intercept)       grptrt  \n     0.7416       5.8242"
  },
  {
    "objectID": "pres_r4stata4/index.html#model-object",
    "href": "pres_r4stata4/index.html#model-object",
    "title": "R for Medical Research 6",
    "section": "Model Object",
    "text": "Model Object\nThe model object bundles several pieces of our model. Many of these have “accessor” functions, or you can just use the $ to access them.\n\nmod1 |> names()\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"na.action\"     \"contrasts\"     \"xlevels\"       \"call\"         \n[13] \"terms\"         \"model\"        \n\nmod1 |> coef()\n\n(Intercept)      grptrt \n  0.7415647   5.8242449 \n\nmod1$coefficients\n\n(Intercept)      grptrt \n  0.7415647   5.8242449"
  },
  {
    "objectID": "pres_r4stata4/index.html#summary",
    "href": "pres_r4stata4/index.html#summary",
    "title": "R for Medical Research 5",
    "section": "Summary",
    "text": "Summary\nThe most common way to inspect the model is to use the summary() function. Note the output is too large.\n\nmod1 |> summary()\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nResiduals:\n      1       2       3       4       5 \n 1.6719  0.7465 -0.8922 -0.7465 -0.7797 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)   0.7416     0.9411   0.788   0.4882  \ngrptrt        5.8242     1.2149   4.794   0.0173 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.331 on 3 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.8845,    Adjusted R-squared:  0.846 \nF-statistic: 22.98 on 1 and 3 DF,  p-value: 0.01727"
  },
  {
    "objectID": "pres_r4stata4/index.html#summary-1",
    "href": "pres_r4stata4/index.html#summary-1",
    "title": "R for Medical Research 6",
    "section": "Summary 1",
    "text": "Summary 1\nThe most common way to inspect the model is to use the summary() function. Note the output is too large.\n\nmod1 |> summary()\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nResiduals:\n      1       2       3       4       5 \n 1.6719  0.7465 -0.8922 -0.7465 -0.7797 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)   0.7416     0.9411   0.788   0.4882  \ngrptrt        5.8242     1.2149   4.794   0.0173 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.331 on 3 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.8845,    Adjusted R-squared:  0.846 \nF-statistic: 22.98 on 1 and 3 DF,  p-value: 0.01727"
  },
  {
    "objectID": "pres_r4stata4/index.html#metrics",
    "href": "pres_r4stata4/index.html#metrics",
    "title": "R for Medical Research 5",
    "section": "Metrics",
    "text": "Metrics\nThere are two basic classes of measures associated with a model:\n\neffect estimates\nfit metrics.\n\nEach of these can be extracted in a convenient tibble form from the model object with the {broom} package.\n\nbroom::tidy(mod1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    0.742     0.941     0.788  0.488 \n2 grptrt         5.82      1.21      4.79   0.0173\n\nbroom::glance(mod1)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.885   0.846  1.33    23.0  0.0173     1  -7.25  20.5  19.3    5.31       3\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual"
  },
  {
    "objectID": "pres_r4stata4/index.html#model-measures-1",
    "href": "pres_r4stata4/index.html#model-measures-1",
    "title": "R for Medical Research 5",
    "section": "Model measures 1",
    "text": "Model measures 1\nThere are two basic classes of measures associated with a model:\n\neffect estimates\nfit metrics"
  },
  {
    "objectID": "pres_r4stata4/index.html#model-measures-2",
    "href": "pres_r4stata4/index.html#model-measures-2",
    "title": "R for Medical Research 5",
    "section": "Model measures 2",
    "text": "Model measures 2\nEach of these can be extracted in a convenient tibble form from the model object with the {broom} package. Why bother? Because we can treat our model measures like data measures and group measures together from multiple models and see how they compare.\n\nbroom::tidy(mod1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    0.742     0.941     0.788  0.488 \n2 grptrt         5.82      1.21      4.79   0.0173\n\nbroom::glance(mod1)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.885   0.846  1.33    23.0  0.0173     1  -7.25  20.5  19.3    5.31       3\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual"
  },
  {
    "objectID": "pres_r4stata4/index.html#model-measures-3",
    "href": "pres_r4stata4/index.html#model-measures-3",
    "title": "R for Medical Research 5",
    "section": "Model measures 3",
    "text": "Model measures 3\nEach of these can be extracted in a convenient tibble form from the model object with the {broom} package.\n\nbroom::tidy(mod1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    0.742     0.941     0.788  0.488 \n2 grptrt         5.82      1.21      4.79   0.0173\n\nbroom::glance(mod1)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.885   0.846  1.33    23.0  0.0173     1  -7.25  20.5  19.3    5.31       3\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual"
  },
  {
    "objectID": "pres_r4stata4/index.html#join-on-more-information",
    "href": "pres_r4stata4/index.html#join-on-more-information",
    "title": "R for Medical Research 6",
    "section": "Join on more information",
    "text": "Join on more information\nLet’s make a second model. This time we will grab some covariates from the demo object. Notice that one id is missing information.\n\ntrial_joint <- \n  trial_wide |> \n  left_join(demo, by = c(\"id2\" = \"id\")) |> \n  mutate(age = (dod - dob)/lubridate::dyears(1))\n\ntrial_joint\n\n# A tibble: 6 × 9\n  id2   grp    vst1  vst2 res_diff dob        dod        weight   age\n  <chr> <chr> <dbl> <dbl>    <dbl> <date>     <date>      <dbl> <dbl>\n1 id1   trt    8.03  16.3  8.24    1999-06-28 2016-08-16   167.  17.1\n2 id2   crl    9.44  10.9  1.49    1999-01-14 2016-08-31   168.  17.6\n3 id3   trt   10.7   16.4  5.67    1999-07-14 2016-01-14   176.  16.5\n4 id4   crl   11.8   11.8 -0.00489 1999-11-02 2016-06-01   172.  16.6\n5 id5   trt    9.53  15.3  5.79    1999-04-28 2016-03-30   172.  16.9\n6 id6   crl   10.5   NA   NA       NA         NA            NA   NA"
  },
  {
    "objectID": "pres_r4stata4/index.html#second-model",
    "href": "pres_r4stata4/index.html#second-model",
    "title": "R for Medical Research 6",
    "section": "Second model",
    "text": "Second model\nmod2 is the same, except we are using augmented data, and we are adding the weight covariate from the demo data. The formula syntax is meant to resemble the mathematical formula.\n\nmod2 <- lm(res_diff ~ grp + weight, data = trial_joint)\n\nmod2\n\n\nCall:\nlm(formula = res_diff ~ grp + weight, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_r4stata4/index.html#summary-2",
    "href": "pres_r4stata4/index.html#summary-2",
    "title": "R for Medical Research 6",
    "section": "Summary 2",
    "text": "Summary 2\nThis raises the related issue that in research we often we want to compare many models at once. Maybe we want to see which of many blood labs has the strongest effect on mortality. Or maybe we want to see which model explains the most variation across many subgroups or units.\nOut of the box, R isn’t too great at “workflow” like this. But some great packages make it easy."
  },
  {
    "objectID": "pres_r4stata4/index.html#measures",
    "href": "pres_r4stata4/index.html#measures",
    "title": "R for Medical Research 6",
    "section": "Measures",
    "text": "Measures\nThere are two basic classes of measures associated with a model:\n\neffect estimates\nfit metrics"
  },
  {
    "objectID": "pres_r4stata4/index.html#extract",
    "href": "pres_r4stata4/index.html#extract",
    "title": "R for Medical Research 6",
    "section": "Extract",
    "text": "Extract\nEach of these can be extracted in a convenient tibble form from the model object with the {broom} package and the functions tidy() and glance(). Why bother? Because we can treat our model measures like data measures and group measures together from multiple models and see how they compare.\n\nlibrary(broom)\n\ntidy(mod1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    0.742     0.941     0.788  0.488 \n2 grptrt         5.82      1.21      4.79   0.0173\n\nglance(mod1)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.885   0.846  1.33    23.0  0.0173     1  -7.25  20.5  19.3    5.31       3\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual"
  },
  {
    "objectID": "pres_r4stata4/index.html#comparison",
    "href": "pres_r4stata4/index.html#comparison",
    "title": "R for Medical Research 6",
    "section": "Comparison",
    "text": "Comparison\nNow that we have two models, we can keep everything is organized in a tibble, and we can readily make comparisons.\n\nmod1_coef <- tidy(mod1) |> mutate(mod = \"mod1\")\nmod2_coef <- tidy(mod2) |> mutate(mod = \"mod2\")\ncoefs <- bind_rows(mod1_coef, mod2_coef) |> relocate(mod)\ncoefs\n\n# A tibble: 5 × 6\n  mod   term        estimate std.error statistic p.value\n  <chr> <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 mod1  (Intercept)    0.742    0.941      0.788 0.488  \n2 mod1  grptrt         5.82     1.21       4.79  0.0173 \n3 mod2  (Intercept)   50.3     13.8        3.65  0.0676 \n4 mod2  grptrt         6.34     0.563     11.3   0.00779\n5 mod2  weight        -0.292    0.0811    -3.60  0.0694 \n\ncoefs |> filter(term == \"grptrt\")\n\n# A tibble: 2 × 6\n  mod   term   estimate std.error statistic p.value\n  <chr> <chr>     <dbl>     <dbl>     <dbl>   <dbl>\n1 mod1  grptrt     5.82     1.21       4.79 0.0173 \n2 mod2  grptrt     6.34     0.563     11.3  0.00779"
  },
  {
    "objectID": "pres_r4stata4/index.html#comparison-2",
    "href": "pres_r4stata4/index.html#comparison-2",
    "title": "R for Medical Research 6",
    "section": "Comparison 2",
    "text": "Comparison 2\nLikewise for metrics\n\nmod1_met <- glance(mod1) |> mutate(mod = \"mod1\")\nmod2_met <- glance(mod2) |> mutate(mod = \"mod2\")\nmets <- bind_rows(mod1_met, mod2_met) |> relocate(mod)\nmets\n\n# A tibble: 2 × 13\n  mod   r.squared adj.r…¹ sigma stati…² p.value    df logLik   AIC   BIC devia…³\n  <chr>     <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>\n1 mod1      0.885   0.846 1.33     23.0  0.0173     1  -7.25  20.5  19.3   5.31 \n2 mod2      0.985   0.969 0.596    63.7  0.0155     2  -2.22  12.4  10.9   0.712\n# … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names ¹​adj.r.squared, ²​statistic, ³​deviance\n\nmets |> select(mod, r.squared, p.value, df)\n\n# A tibble: 2 × 4\n  mod   r.squared p.value    df\n  <chr>     <dbl>   <dbl> <dbl>\n1 mod1      0.885  0.0173     1\n2 mod2      0.985  0.0155     2"
  },
  {
    "objectID": "pres_r4stata4/index.html#better-style",
    "href": "pres_r4stata4/index.html#better-style",
    "title": "R for Medical Research 6",
    "section": "Better style",
    "text": "Better style\nCreating intermediate variables like mod1_met and mod2_met make clutter and is usually bad form. A better, more advanced approach is to apply a function on each object in a list. Then we can bind together all the results. More on this later.\n\nlist(\"mod1\" = mod1, \n     \"mod2\" = mod2) |> \n  map(tidy) |> \n  list_rbind(names_to = \"mod\")\n\n# A tibble: 5 × 6\n  mod   term        estimate std.error statistic p.value\n  <chr> <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 mod1  (Intercept)    0.742    0.941      0.788 0.488  \n2 mod1  grptrt         5.82     1.21       4.79  0.0173 \n3 mod2  (Intercept)   50.3     13.8        3.65  0.0676 \n4 mod2  grptrt         6.34     0.563     11.3   0.00779\n5 mod2  weight        -0.292    0.0811    -3.60  0.0694"
  },
  {
    "objectID": "pres_r4stata4/index.html#table-presentation",
    "href": "pres_r4stata4/index.html#table-presentation",
    "title": "R for Medical Research 5",
    "section": "Table presentation",
    "text": "Table presentation\nFrom here, it is very easy to display our models in a variety of formats.\n\nmets |> \n  select(mod, r.squared, p.value, df) |> \n  knitr::kable(digits = 3)\n\n\n\n\nmod\nr.squared\np.value\ndf\n\n\n\n\nmod1\n0.885\n0.017\n1\n\n\nmod2\n0.985\n0.015\n2\n\n\n\n\ncoefs |> \n  ggplot(aes(x = estimate, y = p.value, color = mod, shape = term)) +\n  geom_point()"
  },
  {
    "objectID": "pres_r4stata4/index.html#presentation-1",
    "href": "pres_r4stata4/index.html#presentation-1",
    "title": "R for Medical Research 6",
    "section": "Presentation 1",
    "text": "Presentation 1\nFrom here, it is very easy to display our models in a variety of formats.\n\nmets |> \n  select(mod, r.squared, p.value, df) |> \n  knitr::kable(digits = 3, \"html\")\n\n\n\n \n  \n    mod \n    r.squared \n    p.value \n    df \n  \n \n\n  \n    mod1 \n    0.885 \n    0.017 \n    1 \n  \n  \n    mod2 \n    0.985 \n    0.015 \n    2"
  },
  {
    "objectID": "pres_r4stata4/index.html#presentation-2",
    "href": "pres_r4stata4/index.html#presentation-2",
    "title": "R for Medical Research 6",
    "section": "Presentation 2",
    "text": "Presentation 2\nFrom here, it is very easy to display our models in a variety of formats.\n\ncoefs |> \n  ggplot(aes(x = estimate, y = p.value, color = mod, shape = term)) +\n  geom_point(size = 4)"
  },
  {
    "objectID": "pres_r4stata4/index.html#comparison-to-stata",
    "href": "pres_r4stata4/index.html#comparison-to-stata",
    "title": "R for Medical Research 6",
    "section": "Comparison to Stata",
    "text": "Comparison to Stata\n\n\n\nStata\nR\n\n\n\n\ny x1 x2\ny ~ x1 + x2\n\n\ny x1,nocons\ny ~ 0 + x1\n\n\ny c.x1#c.x2\ny ~ x1:x2\n\n\ny c.x1##c.x2\ny ~ x1*x2"
  },
  {
    "objectID": "pres_r4stata4/index.html#other-models-1",
    "href": "pres_r4stata4/index.html#other-models-1",
    "title": "R for Medical Research 5",
    "section": "Other models 1",
    "text": "Other models 1\nThe : in a formula is for interactions; the * in a formula is for crossing. Notice these two are equivalent\n\nlm(res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095  \n\nlm(res_diff ~ grp + weight*age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095"
  },
  {
    "objectID": "pres_r4stata4/index.html#other-models-2",
    "href": "pres_r4stata4/index.html#other-models-2",
    "title": "R for Medical Research 5",
    "section": "Other models 2",
    "text": "Other models 2\nThe ^x crosses something with itself x many times. For a single continuous variable, this is equivalent to polynomial regression.\n\nlm(res_diff ~ grp + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918  \n\nlm(res_diff ~ grp + weight + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918  \n\nlm(res_diff ~ grp + weight:weight, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight:weight, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_r4stata4/index.html#other-models-3",
    "href": "pres_r4stata4/index.html#other-models-3",
    "title": "R for Medical Research 5",
    "section": "Other models 3",
    "text": "Other models 3\nFinally, the - in a formula removes that term.\n\nlm(res_diff ~ grp + weight*age - weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age - weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age  \n     46.846        6.352       -0.282        0.104"
  },
  {
    "objectID": "pres_r4stata4/index.html#interactions",
    "href": "pres_r4stata4/index.html#interactions",
    "title": "R for Medical Research 6",
    "section": "Interactions",
    "text": "Interactions\nThe : in a formula is for interactions; the * in a formula is for crossing. Notice these two are equivalent\n\nlm(res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095  \n\nlm(res_diff ~ grp + weight*age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095"
  },
  {
    "objectID": "pres_r4stata4/index.html#powers",
    "href": "pres_r4stata4/index.html#powers",
    "title": "R for Medical Research 6",
    "section": "Powers",
    "text": "Powers\nThe ^x crosses something with itself x many times. For a single continuous variable, this is equivalent to polynomial regression.\n\nlm(res_diff ~ grp + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918  \n\nlm(res_diff ~ grp + weight + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_r4stata4/index.html#removing",
    "href": "pres_r4stata4/index.html#removing",
    "title": "R for Medical Research 6",
    "section": "Removing",
    "text": "Removing\nFinally, the - in a formula removes that term.\n\nlm(res_diff ~ grp + weight*age - weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age - weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age  \n     46.846        6.352       -0.282        0.104"
  },
  {
    "objectID": "pres_basic_mod/index.html#overview",
    "href": "pres_basic_mod/index.html#overview",
    "title": "R for Medical Research 6",
    "section": "Overview",
    "text": "Overview\nToday we will explore the basics of modeling with a toy dataset and show how to compare multiple models in a nice format."
  },
  {
    "objectID": "pres_basic_mod/index.html#demographics",
    "href": "pres_basic_mod/index.html#demographics",
    "title": "R for Medical Research 6",
    "section": "Demographics",
    "text": "Demographics\nWe will use this toy dataset.\n\n\n\nset.seed(123)\n\nid <- paste0(\"id\", seq(1:6))\ndob <- \n  sample(seq(as.Date('1999/01/01'),\n             as.Date('2000/01/01'),\n             by=\"day\"), 6)\ndod <- \n  sample(seq(as.Date('2016/01/01'),\n             as.Date('2017/01/01'),\n             by=\"day\"), 6)\nweight <- \n  rnorm(n = 6, mean = 170, sd = 5)\n\ndemo <- \n  tibble(id, dob, dod, weight) |> \n  # id6 lost to follow-up\n  head(5)\n\n\n\n\n# A tibble: 5 × 4\n  id    dob        dod        weight\n  <chr> <date>     <date>      <dbl>\n1 id1   1999-06-28 2016-08-16   167.\n2 id2   1999-01-14 2016-08-31   168.\n3 id3   1999-07-14 2016-01-14   176.\n4 id4   1999-11-02 2016-06-01   172.\n5 id5   1999-04-28 2016-03-30   172."
  },
  {
    "objectID": "pres_basic_mod/index.html#trial-data",
    "href": "pres_basic_mod/index.html#trial-data",
    "title": "R for Medical Research 6",
    "section": "Trial data",
    "text": "Trial data\nAnd this toy dataset.\n\n\n\nid2 <- rep(id, times = 2)\ngrp <- rep(c(\"trt\", \"crl\"), \n           times = 6)\nvst <- rep(c(\"vst1\", \"vst2\"), \n           each = 6)\nres <- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\ntrial <- tibble(id2, vst, grp) |> \n  arrange(vst, grp) |> \n  mutate(res = res) |> \n  arrange(vst, id2)\n\ntrial[12, 4] <- NA\n\n\n\n\n# A tibble: 12 × 4\n   id2   vst   grp     res\n   <chr> <chr> <chr> <dbl>\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA"
  },
  {
    "objectID": "pres_basic_mod/index.html#notice",
    "href": "pres_basic_mod/index.html#notice",
    "title": "R for Medical Research 6",
    "section": "Notice",
    "text": "Notice\n\n\n\nres <- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\n\n\n# A tibble: 12 × 4\n   id2   vst   grp     res\n   <chr> <chr> <chr> <dbl>\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA   \n\n\n\nSince this is a toy dataset, we know the data generating process. All subjects start at visit one with a test result drawn from \\(N(10, 1)\\) distribution. The control subjects then have a followup visit from \\(N(12, 1)\\), while the treatment subjects are from \\(N(17, 1)\\). One control subject was lost to followup."
  },
  {
    "objectID": "pres_basic_mod/index.html#reshape",
    "href": "pres_basic_mod/index.html#reshape",
    "title": "R for Medical Research 6",
    "section": "Reshape",
    "text": "Reshape\nA simple way to handle this data is to just model the difference between visit 1 and visit 2. To do that, we need to pivot. Notice I name the difference res_diff.\n\ntrial_wide <- \n  trial |> \n  pivot_wider(names_from = vst, values_from = res) |> \n  mutate(res_diff =  vst2 - vst1)\n\ntrial_wide\n\n# A tibble: 6 × 5\n  id2   grp    vst1  vst2 res_diff\n  <chr> <chr> <dbl> <dbl>    <dbl>\n1 id1   trt    8.03  16.3  8.24   \n2 id2   crl    9.44  10.9  1.49   \n3 id3   trt   10.7   16.4  5.67   \n4 id4   crl   11.8   11.8 -0.00489\n5 id5   trt    9.53  15.3  5.79   \n6 id6   crl   10.5   NA   NA"
  },
  {
    "objectID": "pres_basic_mod/index.html#first-model-1",
    "href": "pres_basic_mod/index.html#first-model-1",
    "title": "R for Medical Research 6",
    "section": "First model 1",
    "text": "First model 1\nHere is the basic syntax for a linear model. We can save the model to a variable.\nWe use a “formula syntax” to write our model down. res_diff ~ grp says, predict the mean of the pre-post difference as a function of the group.\n\nmod1 <- lm(res_diff ~ grp, data = trial_wide)\n\nmod1\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nCoefficients:\n(Intercept)       grptrt  \n     0.7416       5.8242"
  },
  {
    "objectID": "pres_basic_mod/index.html#first-model-2",
    "href": "pres_basic_mod/index.html#first-model-2",
    "title": "R for Medical Research 6",
    "section": "First model 2",
    "text": "First model 2\nNotice that in this short summary, the lm() function appends the effect class trt (as opposed to the reference class crl) to the exposure variable, grp, so we get grptrt. The coefficient is 5.82. This estimate is close to the “difference of difference” we expect. The difference between\n\\((N_{vst2,trt}(17, 1) - N_{vst1,trt}(10, 1))\\) and\n\\((N_{vst2,crl}(12, 1) - N_{vst1,crl}(10, 1))\\) equals\n\\(N(5, 4)\\)\n\nmod1 <- lm(res_diff ~ grp, data = trial_wide)\n\nmod1\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nCoefficients:\n(Intercept)       grptrt  \n     0.7416       5.8242"
  },
  {
    "objectID": "pres_basic_mod/index.html#model-object",
    "href": "pres_basic_mod/index.html#model-object",
    "title": "R for Medical Research 6",
    "section": "Model Object",
    "text": "Model Object\nThe model object bundles several pieces of our model. Many of these have “accessor” functions, or you can just use the $ to access them.\n\nmod1 |> names()\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"na.action\"     \"contrasts\"     \"xlevels\"       \"call\"         \n[13] \"terms\"         \"model\"        \n\nmod1 |> coef()\n\n(Intercept)      grptrt \n  0.7415647   5.8242449 \n\nmod1$coefficients\n\n(Intercept)      grptrt \n  0.7415647   5.8242449"
  },
  {
    "objectID": "pres_basic_mod/index.html#summary-1",
    "href": "pres_basic_mod/index.html#summary-1",
    "title": "R for Medical Research 6",
    "section": "Summary 1",
    "text": "Summary 1\nThe most common way to inspect the model is to use the summary() function. Note the output is too large.\n\nmod1 |> summary()\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nResiduals:\n      1       2       3       4       5 \n 1.6719  0.7465 -0.8922 -0.7465 -0.7797 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)   0.7416     0.9411   0.788   0.4882  \ngrptrt        5.8242     1.2149   4.794   0.0173 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.331 on 3 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.8845,    Adjusted R-squared:  0.846 \nF-statistic: 22.98 on 1 and 3 DF,  p-value: 0.01727"
  },
  {
    "objectID": "pres_basic_mod/index.html#summary-2",
    "href": "pres_basic_mod/index.html#summary-2",
    "title": "R for Medical Research 6",
    "section": "Summary 2",
    "text": "Summary 2\nThis raises the related issue that in research we often we want to compare many models at once. Maybe we want to see which of many blood labs has the strongest effect on mortality. Or maybe we want to see which model explains the most variation across many subgroups or units.\nOut of the box, R isn’t too great at “workflow” like this. But some great packages make it easy."
  },
  {
    "objectID": "pres_basic_mod/index.html#measures",
    "href": "pres_basic_mod/index.html#measures",
    "title": "R for Medical Research 6",
    "section": "Measures",
    "text": "Measures\nThere are two basic classes of measures associated with a model:\n\neffect estimates\nfit metrics"
  },
  {
    "objectID": "pres_basic_mod/index.html#extract",
    "href": "pres_basic_mod/index.html#extract",
    "title": "R for Medical Research 6",
    "section": "Extract",
    "text": "Extract\nEach of these can be extracted in a convenient tibble form from the model object with the {broom} package and the functions tidy() and glance(). Why bother? Because we can treat our model measures like data measures and group measures together from multiple models and see how they compare.\n\nlibrary(broom)\n\ntidy(mod1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    0.742     0.941     0.788  0.488 \n2 grptrt         5.82      1.21      4.79   0.0173\n\nglance(mod1)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.885   0.846  1.33    23.0  0.0173     1  -7.25  20.5  19.3    5.31       3\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual"
  },
  {
    "objectID": "pres_basic_mod/index.html#join-on-more-information",
    "href": "pres_basic_mod/index.html#join-on-more-information",
    "title": "R for Medical Research 6",
    "section": "Join on more information",
    "text": "Join on more information\nLet’s make a second model. This time we will grab some covariates from the demo object. Notice that one id is missing information.\n\ntrial_joint <- \n  trial_wide |> \n  left_join(demo, by = c(\"id2\" = \"id\")) |> \n  mutate(age = (dod - dob)/lubridate::dyears(1))\n\ntrial_joint\n\n# A tibble: 6 × 9\n  id2   grp    vst1  vst2 res_diff dob        dod        weight   age\n  <chr> <chr> <dbl> <dbl>    <dbl> <date>     <date>      <dbl> <dbl>\n1 id1   trt    8.03  16.3  8.24    1999-06-28 2016-08-16   167.  17.1\n2 id2   crl    9.44  10.9  1.49    1999-01-14 2016-08-31   168.  17.6\n3 id3   trt   10.7   16.4  5.67    1999-07-14 2016-01-14   176.  16.5\n4 id4   crl   11.8   11.8 -0.00489 1999-11-02 2016-06-01   172.  16.6\n5 id5   trt    9.53  15.3  5.79    1999-04-28 2016-03-30   172.  16.9\n6 id6   crl   10.5   NA   NA       NA         NA            NA   NA"
  },
  {
    "objectID": "pres_basic_mod/index.html#second-model",
    "href": "pres_basic_mod/index.html#second-model",
    "title": "R for Medical Research 6",
    "section": "Second model",
    "text": "Second model\nmod2 is the same, except we are using augmented data, and we are adding the weight covariate from the demo data. The formula syntax is meant to resemble the mathematical formula.\n\nmod2 <- lm(res_diff ~ grp + weight, data = trial_joint)\n\nmod2\n\n\nCall:\nlm(formula = res_diff ~ grp + weight, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_basic_mod/index.html#interactions",
    "href": "pres_basic_mod/index.html#interactions",
    "title": "R for Medical Research 6",
    "section": "Interactions",
    "text": "Interactions\nThe : in a formula is for interactions; the * in a formula is for crossing. Notice these two are equivalent\n\nlm(res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095  \n\nlm(res_diff ~ grp + weight*age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095"
  },
  {
    "objectID": "pres_basic_mod/index.html#powers",
    "href": "pres_basic_mod/index.html#powers",
    "title": "R for Medical Research 6",
    "section": "Powers",
    "text": "Powers\nThe ^x crosses something with itself x many times. For a single continuous variable, this is equivalent to polynomial regression.\n\nlm(res_diff ~ grp + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918  \n\nlm(res_diff ~ grp + weight + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_basic_mod/index.html#removing",
    "href": "pres_basic_mod/index.html#removing",
    "title": "R for Medical Research 6",
    "section": "Removing",
    "text": "Removing\nFinally, the - in a formula removes that term.\n\nlm(res_diff ~ grp + weight*age - weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age - weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age  \n     46.846        6.352       -0.282        0.104"
  },
  {
    "objectID": "pres_basic_mod/index.html#comparison-to-stata",
    "href": "pres_basic_mod/index.html#comparison-to-stata",
    "title": "R for Medical Research 6",
    "section": "Comparison to Stata",
    "text": "Comparison to Stata\n\n\n\nStata\nR\n\n\n\n\ny x1 x2\ny ~ x1 + x2\n\n\ny x1,nocons\ny ~ 0 + x1\n\n\ny c.x1#c.x2\ny ~ x1:x2\n\n\ny c.x1##c.x2\ny ~ x1*x2"
  },
  {
    "objectID": "pres_basic_mod/index.html#comparison",
    "href": "pres_basic_mod/index.html#comparison",
    "title": "R for Medical Research 6",
    "section": "Comparison",
    "text": "Comparison\nNow that we have two models, we can keep everything is organized in a tibble, and we can readily make comparisons.\n\nmod1_coef <- tidy(mod1) |> mutate(mod = \"mod1\")\nmod2_coef <- tidy(mod2) |> mutate(mod = \"mod2\")\ncoefs <- bind_rows(mod1_coef, mod2_coef) |> relocate(mod)\ncoefs\n\n# A tibble: 5 × 6\n  mod   term        estimate std.error statistic p.value\n  <chr> <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 mod1  (Intercept)    0.742    0.941      0.788 0.488  \n2 mod1  grptrt         5.82     1.21       4.79  0.0173 \n3 mod2  (Intercept)   50.3     13.8        3.65  0.0676 \n4 mod2  grptrt         6.34     0.563     11.3   0.00779\n5 mod2  weight        -0.292    0.0811    -3.60  0.0694 \n\ncoefs |> filter(term == \"grptrt\")\n\n# A tibble: 2 × 6\n  mod   term   estimate std.error statistic p.value\n  <chr> <chr>     <dbl>     <dbl>     <dbl>   <dbl>\n1 mod1  grptrt     5.82     1.21       4.79 0.0173 \n2 mod2  grptrt     6.34     0.563     11.3  0.00779"
  },
  {
    "objectID": "pres_basic_mod/index.html#comparison-2",
    "href": "pres_basic_mod/index.html#comparison-2",
    "title": "R for Medical Research 6",
    "section": "Comparison 2",
    "text": "Comparison 2\nLikewise for metrics\n\nmod1_met <- glance(mod1) |> mutate(mod = \"mod1\")\nmod2_met <- glance(mod2) |> mutate(mod = \"mod2\")\nmets <- bind_rows(mod1_met, mod2_met) |> relocate(mod)\nmets\n\n# A tibble: 2 × 13\n  mod   r.squared adj.r…¹ sigma stati…² p.value    df logLik   AIC   BIC devia…³\n  <chr>     <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>\n1 mod1      0.885   0.846 1.33     23.0  0.0173     1  -7.25  20.5  19.3   5.31 \n2 mod2      0.985   0.969 0.596    63.7  0.0155     2  -2.22  12.4  10.9   0.712\n# … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names ¹​adj.r.squared, ²​statistic, ³​deviance\n\nmets |> select(mod, r.squared, p.value, df)\n\n# A tibble: 2 × 4\n  mod   r.squared p.value    df\n  <chr>     <dbl>   <dbl> <dbl>\n1 mod1      0.885  0.0173     1\n2 mod2      0.985  0.0155     2"
  },
  {
    "objectID": "pres_basic_mod/index.html#better-style",
    "href": "pres_basic_mod/index.html#better-style",
    "title": "R for Medical Research 6",
    "section": "Better style",
    "text": "Better style\nCreating intermediate variables like mod1_met and mod2_met make clutter and is usually bad form. A better, more advanced approach is to apply a function on each object in a list. Then we can bind together all the results. More on this later.\n\nlist(\"mod1\" = mod1, \n     \"mod2\" = mod2) |> \n  map(tidy) |> \n  list_rbind(names_to = \"mod\")\n\n# A tibble: 5 × 6\n  mod   term        estimate std.error statistic p.value\n  <chr> <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 mod1  (Intercept)    0.742    0.941      0.788 0.488  \n2 mod1  grptrt         5.82     1.21       4.79  0.0173 \n3 mod2  (Intercept)   50.3     13.8        3.65  0.0676 \n4 mod2  grptrt         6.34     0.563     11.3   0.00779\n5 mod2  weight        -0.292    0.0811    -3.60  0.0694"
  },
  {
    "objectID": "pres_basic_mod/index.html#presentation-1",
    "href": "pres_basic_mod/index.html#presentation-1",
    "title": "R for Medical Research 6",
    "section": "Presentation 1",
    "text": "Presentation 1\nFrom here, it is very easy to display our models in a variety of formats.\n\nmets |> \n  select(mod, r.squared, p.value, df) |> \n  knitr::kable(digits = 3, \"html\")\n\n\n\n \n  \n    mod \n    r.squared \n    p.value \n    df \n  \n \n\n  \n    mod1 \n    0.885 \n    0.017 \n    1 \n  \n  \n    mod2 \n    0.985 \n    0.015 \n    2"
  },
  {
    "objectID": "pres_basic_mod/index.html#presentation-2",
    "href": "pres_basic_mod/index.html#presentation-2",
    "title": "R for Medical Research 6",
    "section": "Presentation 2",
    "text": "Presentation 2\nFrom here, it is very easy to display our models in a variety of formats.\n\ncoefs |> \n  ggplot(aes(x = estimate, y = p.value, color = mod, shape = term)) +\n  geom_point(size = 4)"
  },
  {
    "objectID": "pres_r4med_data/index.html#ptrc",
    "href": "pres_r4med_data/index.html#ptrc",
    "title": "R for Medical Research",
    "section": "PTRC",
    "text": "PTRC\nThese presentations are hosted and supported by the Pulmonary Translational Research Core:\n\n\n\nDr. Jessica Bohn\nDirector\n\n\nDr. Tim Corcoran\nAssociate Director\n\n\nDr. S. Mehdi Nouraie\nLead, Biometrics Core\n\n\nMatt Broerman\nBiostatistician\n\n\nXiaoping Chen\nData Manager"
  },
  {
    "objectID": "pres_r4med_data/index.html#ptrc-biometric-services",
    "href": "pres_r4med_data/index.html#ptrc-biometric-services",
    "title": "R for Medical Research",
    "section": "PTRC Biometric Services",
    "text": "PTRC Biometric Services\n\n\nRequest services: https://www.ctsiredcap.pitt.edu/redcap/surveys/?s=493FWXAWA8\n\n\nServices:\n\nExperimental Design\nDatabase Design\nAnalysis\n\nWe are especially interested in enrolling studies in PULCE2, an intergrated set of support services from study conception to publication. Please ask me more! mjb357 “at” pitt :dot: edu"
  },
  {
    "objectID": "pres_r4med_data/index.html#rstudio-project",
    "href": "pres_r4med_data/index.html#rstudio-project",
    "title": "R for Medical Research",
    "section": "RStudio project",
    "text": "RStudio project\nGet this going during the presentation:\nhttps://rstudio.cloud/content/4697823"
  },
  {
    "objectID": "pres_r4med_data/index.html#disclaimer",
    "href": "pres_r4med_data/index.html#disclaimer",
    "title": "R for Medical Research",
    "section": "Disclaimer",
    "text": "Disclaimer\n\n\n\n\n\n\nNote\n\n\nThe side-by-side comparisons in these slides are due to Matthieu Gomez and his beautiful resources. In most cases, I cannot translate from Stata to R for you, but I can try to tell you how to do it in R. If you know how to do it in Stata, please tell me!"
  },
  {
    "objectID": "pres_r4med_data/index.html#tidyverse",
    "href": "pres_r4med_data/index.html#tidyverse",
    "title": "R for Medical Research",
    "section": "tidyverse",
    "text": "tidyverse\nThe tidyverse is an opinionated set of tools that work well together. They have gotten popular in the R community in the last 8 years, and this workshop defaults to them.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "pres_r4med_data/index.html#syntax",
    "href": "pres_r4med_data/index.html#syntax",
    "title": "R for Medical Research",
    "section": "Syntax",
    "text": "Syntax\nThere is a traditional way and hip way of writing R\n\n# traditional\nnrow(df)\n\n[1] 6\n\n# hip\ndf |&gt; nrow()\n\n[1] 6\n\n# hip also\ndf %&gt;% nrow()\n\n[1] 6\n\n\nFor short code, tradition is great. The hip way uses a “pipe”. The pipe place the variable behind it in the first position of the function."
  },
  {
    "objectID": "pres_r4med_data/index.html#why-bother",
    "href": "pres_r4med_data/index.html#why-bother",
    "title": "R for Medical Research",
    "section": "Why bother?",
    "text": "Why bother?\nIt matters for longer code.\n\n# traditional\nlength(unique(unlist(strsplit(\"this string is a string\", split = \" \"))))\n\n[1] 4\n\n# hip\n\"this string is a string\" |&gt; \n  strsplit(split = \" \") |&gt;\n  unlist() |&gt; \n  unique() |&gt; \n  length()\n\n[1] 4\n\n\nThe hip way is “verbose”, but easier to read.\nAlso, usually you have the object before you decide what to do with it.\nAND! Closing parentheses is a chore.\nOnwards!"
  },
  {
    "objectID": "pres_r4med_data/index.html#load-data",
    "href": "pres_r4med_data/index.html#load-data",
    "title": "R for Medical Research",
    "section": "Load Data",
    "text": "Load Data\nData comes to us in many forms. R has utilities for most of them.\nid,v1,v2\nid01,M,0\nid02,F,2\nid03,M,4\nid01,M,6\nid02,F,8\nid03,M,10\n\n# read the csv file above\ndf &lt;- readr::read_csv(\"data/df.csv\")\n\n# read Stata .dta files\ndf &lt;- haven::read_dta(\"data/df.dta\")\n\n# read excel files\ndf &lt;- readxl::read_excel(\"data/df.xlsx\")"
  },
  {
    "objectID": "pres_r4med_data/index.html#variable-types-1",
    "href": "pres_r4med_data/index.html#variable-types-1",
    "title": "R for Medical Research",
    "section": "Variable types 1",
    "text": "Variable types 1\nUsually built-in functions can figure things out. To be specific, a quick fix is to declare the types:\n\ndf1 &lt;- readr::read_csv(\"data/df.csv\")\n\ndf2 &lt;- readr::read_csv(\"data/df.csv\", \n                      # \"f\" means factor\n                      # \"c\" means character\n                      col_types = \"ffc\")\ndf1 |&gt; head(1)\n\n# A tibble: 1 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0\n\ndf2 |&gt; head(1)\n\n# A tibble: 1 × 3\n  id    v1    v2   \n  &lt;fct&gt; &lt;fct&gt; &lt;chr&gt;\n1 id01  M     0    \n\n\nNotice that I can have multiple datasets running at once, each assigned to a variable."
  },
  {
    "objectID": "pres_r4med_data/index.html#variable-types-2",
    "href": "pres_r4med_data/index.html#variable-types-2",
    "title": "R for Medical Research",
    "section": "Variable types 2",
    "text": "Variable types 2\nOr you can modify them as needed later (more on this later)\n\ndf &lt;- readr::read_csv(\"data/df.csv\")\n\ndf |&gt; \n  mutate(id = as.factor(id)) |&gt; \n  head(1)\n\n# A tibble: 1 × 3\n  id    v1       v2\n  &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0"
  },
  {
    "objectID": "pres_r4med_data/index.html#create-data",
    "href": "pres_r4med_data/index.html#create-data",
    "title": "R for Medical Research",
    "section": "Create Data",
    "text": "Create Data\nYou can also create data.\n\ndf &lt;- tibble(\n  id = c(\"id01\", \"id02\", \"id03\", \"id01\", \"id02\", \"id03\"),     \n  v1 = rep(c(\"M\", \"F\", \"M\"), 2),                          \n  v2 = seq(0, 10, by = 2) \n)\n\ndf\n\n# A tibble: 6 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0\n2 id02  F         2\n3 id03  M         4\n4 id01  M         6\n5 id02  F         8\n6 id03  M        10\n\n\ntibble is a easy-to-read kind of data.frame, and similar to a dataset. You can create them manually, or from files."
  },
  {
    "objectID": "pres_r4med_data/index.html#select-data",
    "href": "pres_r4med_data/index.html#select-data",
    "title": "R for Medical Research",
    "section": "Select data",
    "text": "Select data\nBy name, position, or feature\n\ndf |&gt; select(id, v1)\n\n# A tibble: 6 × 2\n  id    v1   \n  &lt;chr&gt; &lt;chr&gt;\n1 id01  M    \n2 id02  F    \n3 id03  M    \n4 id01  M    \n5 id02  F    \n6 id03  M    \n\ndf |&gt; select(2, 1)\n\n# A tibble: 6 × 2\n  v1    id   \n  &lt;chr&gt; &lt;chr&gt;\n1 M     id01 \n2 F     id02 \n3 M     id03 \n4 M     id01 \n5 F     id02 \n6 M     id03 \n\ndf |&gt; select(starts_with(\"v\"))\n\n# A tibble: 6 × 2\n  v1       v2\n  &lt;chr&gt; &lt;dbl&gt;\n1 M         0\n2 F         2\n3 M         4\n4 M         6\n5 F         8\n6 M        10"
  },
  {
    "objectID": "pres_r4med_data/index.html#modify-data",
    "href": "pres_r4med_data/index.html#modify-data",
    "title": "R for Medical Research",
    "section": "Modify data",
    "text": "Modify data\nBy creating columns, altering them, or reording them\n\ndf |&gt; mutate(v1_fact = as.factor(v1))\n\n# A tibble: 6 × 4\n  id    v1       v2 v1_fact\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;fct&gt;  \n1 id01  M         0 M      \n2 id02  F         2 F      \n3 id03  M         4 M      \n4 id01  M         6 M      \n5 id02  F         8 F      \n6 id03  M        10 M      \n\ndf |&gt; rename(v1_char = v1)\n\n# A tibble: 6 × 3\n  id    v1_char    v2\n  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 id01  M           0\n2 id02  F           2\n3 id03  M           4\n4 id01  M           6\n5 id02  F           8\n6 id03  M          10\n\ndf |&gt; mutate(v2 = v2 * 100)\n\n# A tibble: 6 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0\n2 id02  F       200\n3 id03  M       400\n4 id01  M       600\n5 id02  F       800\n6 id03  M      1000"
  },
  {
    "objectID": "pres_r4med_data/index.html#rearrange-data",
    "href": "pres_r4med_data/index.html#rearrange-data",
    "title": "R for Medical Research",
    "section": "Rearrange data",
    "text": "Rearrange data\nBy sorting or reordering columns\n\ndf |&gt; arrange(v1)\n\n# A tibble: 6 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id02  F         2\n2 id02  F         8\n3 id01  M         0\n4 id03  M         4\n5 id01  M         6\n6 id03  M        10\n\ndf |&gt; relocate(v1)\n\n# A tibble: 6 × 3\n  v1    id       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 M     id01      0\n2 F     id02      2\n3 M     id03      4\n4 M     id01      6\n5 F     id02      8\n6 M     id03     10"
  },
  {
    "objectID": "pres_r4med_data/index.html#select-data-1",
    "href": "pres_r4med_data/index.html#select-data-1",
    "title": "R for Medical Research",
    "section": "Select data",
    "text": "Select data\n\ndf |&gt; select(starts_with(\"v\"))\n\n# A tibble: 6 × 2\n  v1       v2\n  &lt;chr&gt; &lt;dbl&gt;\n1 M         0\n2 F         2\n3 M         4\n4 M         6\n5 F         8\n6 M        10"
  },
  {
    "objectID": "pres_r4med_data/index.html#modify-data-1",
    "href": "pres_r4med_data/index.html#modify-data-1",
    "title": "R for Medical Research",
    "section": "Modify data",
    "text": "Modify data\n\ndf |&gt; mutate(v2 = v2 * 100)\n\n# A tibble: 6 × 3\n  id    v1       v2\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 id01  M         0\n2 id02  F       200\n3 id03  M       400\n4 id01  M       600\n5 id02  F       800\n6 id03  M      1000"
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "R for Medical Research",
    "section": "Description",
    "text": "Description\nThis workshop is hosted by the PACCSM Pulmonary Translational Research Core (PTRC). The purpose is to\n- get you familiar enough with R so you can direct further study\n- focus on in-session hands-on exercises with real data\n- provide a work environment so you don't need to install software\n- start with best practices\nThe design is flipped so sessions are hands-on while the materials are preparatory and optional."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html",
    "href": "pres_r4med_rstudio/index.html",
    "title": "RStudio and Reproducibility",
    "section": "",
    "text": "Today we will quickly tour RStudio and then demonstrate a good way to start your next reproducible analysis.\nSince code notebooks can confuse users about the current state of a variable, we will discuss where problems come up and how to troubleshoot."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#intro",
    "href": "pres_r4med_rstudio/index.html#intro",
    "title": "RStudio and Reproducibility",
    "section": "",
    "text": "Today we will quickly tour RStudio and then demonstrate a good way to start your next reproducible analysis.\nSince code notebooks can confuse users about the current state of a variable, we will discuss where problems come up and how to troubleshoot."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#the-ide-idea",
    "href": "pres_r4med_rstudio/index.html#the-ide-idea",
    "title": "RStudio and Reproducibility",
    "section": "The IDE Idea",
    "text": "The IDE Idea\n\n\n\n\nR is a complete programming language.\nRStudio is an Integrated Development Environment that interacts with R (and other languages you have installed, like python).\nIt gives you lots of graphical interfaces, but almost every action is recorded in code or can be executed with code.\nRStudio is designed to gently push you towards writing things down, which makes them more reproducible."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#the-project",
    "href": "pres_r4med_rstudio/index.html#the-project",
    "title": "RStudio and Reproducibility",
    "section": "The Project",
    "text": "The Project\n\n\nMost of the time, RStudio encapsulates your work in a project. You’re project is in a folder, and comes with a .Rproj file, a .Rhistory file, and some other optional things (like git, renv)."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#packages-pane",
    "href": "pres_r4med_rstudio/index.html#packages-pane",
    "title": "RStudio and Reproducibility",
    "section": "Packages Pane",
    "text": "Packages Pane\nThe install button helps with autocomplete. You can also manage which packages are loaded by checking them."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#with-code",
    "href": "pres_r4med_rstudio/index.html#with-code",
    "title": "RStudio and Reproducibility",
    "section": "With Code",
    "text": "With Code\nUsually, you need to install some packages to get started.\n\ninstall.packages(\"tidyverse\")\n\nR is open source software, meaning there is less top-down coordination, and fewer guarantees than from Stata. However, that means that there are typically many more options and many fewer limitations.\nHowever, you should try to vet (and cite!) the software you use.\nTip: Search ___ r package cran or ___ r package github. If the updated dates you find here are in the last few years, you are probably good to go."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#r-session-and-packages",
    "href": "pres_r4med_rstudio/index.html#r-session-and-packages",
    "title": "RStudio and Reproducibility",
    "section": "R session and packages",
    "text": "R session and packages\nWhen you open RStudio, it starts an R session for you. You can have multiple sessions on the same computer, and multiple RStudios running at the same time. Each one starts it’s own R process.\nThis is nice if you want to work on multiple projects at the same time.\nA session contains loaded libraries.\n\n# several packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stringr)\n\n# or a meta-package\nlibrary(tidyverse)\n\nIf something crashes, and your session restarts, you will have to reload these."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#console",
    "href": "pres_r4med_rstudio/index.html#console",
    "title": "RStudio and Reproducibility",
    "section": "Console",
    "text": "Console\n\n\nThe console is the “written record.” Everything that happens, happens in the console. There are helpful messages that appear in the console. These appear only here. Errors happen here.\n\n\n\n\n\n\nTip\n\n\n\nPaste errors in the console into google!\n\n\n\n\n\n\n\nWhen you start RStudio, you can see it starts R for you."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#source",
    "href": "pres_r4med_rstudio/index.html#source",
    "title": "RStudio and Reproducibility",
    "section": "Source",
    "text": "Source\nSource refers to code files. The two main ones are R scripts and Rmarkdown (or Quarto, which is like version 2 of Rmarkdown).\n\n\n\n\n\n\n\nR script (.R)\nRmarkdown/Quarto (.Rmd/.qmd)\n\n\n\n\n.R extension\n.Rmd or .qmd extension\n\n\njust a text file\nformatted text file (markdown) containing code chunks (R, python, Latex)\n\n\nstays a text file\n“compiles” or “knits” to rich output, like .html or .docx\n\n\nplain\ncontains plots, and intermediate steps.\n\n\nneeds R to run\nneeds RStudio to run\n\n\nmakes up packages\nmakes up analysis\n\n\nbackbone of R\nreproducible anaylsis,"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#source-example",
    "href": "pres_r4med_rstudio/index.html#source-example",
    "title": "RStudio and Reproducibility",
    "section": "Source example",
    "text": "Source example\n\nIn an R script, all of the space is code, except comments.\nIn a .Rmd o .qmd, there is a header with metadata (in yml), code chunks in R or python, among others. And formating in markdown or latex. Compares to jupyter notebooks, but clean separation between code and output."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#environment-pane",
    "href": "pres_r4med_rstudio/index.html#environment-pane",
    "title": "RStudio and Reproducibility",
    "section": "Environment pane",
    "text": "Environment pane\n\nThe most important pane for new users is the environment pane.\nIf in doubt, this will always tell you the current state of your variables (by default)."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#state-demo-downstream",
    "href": "pres_r4med_rstudio/index.html#state-demo-downstream",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Downstream",
    "text": "State Demo Downstream\n\ntv &lt;- c(1:4)\n\ntv2 &lt;- tv\n\ntv2 &lt;- c(tv, NA)\n\ntv"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#state-demo-downstream-1",
    "href": "pres_r4med_rstudio/index.html#state-demo-downstream-1",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Downstream",
    "text": "State Demo Downstream\n\ntv &lt;- c(1:4)\n\ntv2 &lt;- tv\n\ntv2 &lt;- c(tv, NA)\n\ntv\n\n[1] 1 2 3 4\n\n\nChanges to variables downstream don’t change the variables that depend on them."
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#state-demo-upstream",
    "href": "pres_r4med_rstudio/index.html#state-demo-upstream",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Upstream",
    "text": "State Demo Upstream\n\ntv &lt;- c(1:4)\n\ntv2 &lt;- tv\n\ntv &lt;- c(tv, 5:6)\n\ntv2"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#state-demo-upstream-1",
    "href": "pres_r4med_rstudio/index.html#state-demo-upstream-1",
    "title": "RStudio and Reproducibility",
    "section": "State Demo Upstream",
    "text": "State Demo Upstream\n\ntv &lt;- c(1:4) #1\n\ntv2 &lt;- tv #3\n\ntv &lt;- c(tv, 5:6) #2\n\ntv2 #4\n\n[1] 1 2 3 4\n\n\n\nChanges to variables first defined upstream don’t change the variables that depend on them…\nIF the depending variables were defined even further upstream.\nWhat happens if the code was run in the order of the numbers?"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#state-demo",
    "href": "pres_r4med_rstudio/index.html#state-demo",
    "title": "RStudio and Reproducibility",
    "section": "State Demo",
    "text": "State Demo\n\nAgain, for the sake of reproducibility, you will need to compile the whole document eventually in a clean environment.\n\nRemember: code wants to be run sequentially. You can get into trouble if you define things somewhere downstream, but then depend on it upstream. The best guard against this is to use these options:"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#plots",
    "href": "pres_r4med_rstudio/index.html#plots",
    "title": "RStudio and Reproducibility",
    "section": "Plots",
    "text": "Plots\n\n\nBy default, plots will show in the source pane for Rmarkdown and the “Plots” pane for scripts. You can have them all show in the “Plots” pane by going to Preferences &gt; R Markdown and unchecking Show all output inline .\n\niris |&gt;\n  ggplot(aes(x = Sepal.Length,\n             y = Sepal.Width)) +\n  geom_point()"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#help",
    "href": "pres_r4med_rstudio/index.html#help",
    "title": "RStudio and Reproducibility",
    "section": "Help",
    "text": "Help\nFinally, if you are having issues, and you don’t want to explore the internet for answers, all functions, and built-in data, come with documentation. Just put ? before the item of interest.\n\n?iris\n\n?rnorm"
  },
  {
    "objectID": "pres_r4med_rstudio/index.html#demo",
    "href": "pres_r4med_rstudio/index.html#demo",
    "title": "RStudio and Reproducibility",
    "section": "Demo",
    "text": "Demo\nYou’re first reproducible document."
  },
  {
    "objectID": "pres_r4med_mod/index.html",
    "href": "pres_r4med_mod/index.html",
    "title": "R for Medical Research 6",
    "section": "",
    "text": "Today we will explore the basics of modeling with a toy dataset and show how to compare multiple models in a nice format."
  },
  {
    "objectID": "pres_r4med_mod/index.html#overview",
    "href": "pres_r4med_mod/index.html#overview",
    "title": "R for Medical Research 6",
    "section": "",
    "text": "Today we will explore the basics of modeling with a toy dataset and show how to compare multiple models in a nice format."
  },
  {
    "objectID": "pres_r4med_mod/index.html#demographics",
    "href": "pres_r4med_mod/index.html#demographics",
    "title": "R for Medical Research 6",
    "section": "Demographics",
    "text": "Demographics\nWe will use this toy dataset.\n\n\n\nset.seed(123)\n\nid &lt;- paste0(\"id\", seq(1:6))\ndob &lt;- \n  sample(seq(as.Date('1999/01/01'),\n             as.Date('2000/01/01'),\n             by=\"day\"), 6)\ndod &lt;- \n  sample(seq(as.Date('2016/01/01'),\n             as.Date('2017/01/01'),\n             by=\"day\"), 6)\nweight &lt;- \n  rnorm(n = 6, mean = 170, sd = 5)\n\ndemo &lt;- \n  tibble(id, dob, dod, weight) |&gt; \n  # id6 lost to follow-up\n  head(5)\n\n\n\n\n# A tibble: 5 × 4\n  id    dob        dod        weight\n  &lt;chr&gt; &lt;date&gt;     &lt;date&gt;      &lt;dbl&gt;\n1 id1   1999-06-28 2016-08-16   167.\n2 id2   1999-01-14 2016-08-31   168.\n3 id3   1999-07-14 2016-01-14   176.\n4 id4   1999-11-02 2016-06-01   172.\n5 id5   1999-04-28 2016-03-30   172."
  },
  {
    "objectID": "pres_r4med_mod/index.html#trial-data",
    "href": "pres_r4med_mod/index.html#trial-data",
    "title": "R for Medical Research 6",
    "section": "Trial data",
    "text": "Trial data\nAnd this toy dataset.\n\n\n\nid2 &lt;- rep(id, times = 2)\ngrp &lt;- rep(c(\"trt\", \"crl\"), \n           times = 6)\nvst &lt;- rep(c(\"vst1\", \"vst2\"), \n           each = 6)\nres &lt;- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\ntrial &lt;- tibble(id2, vst, grp) |&gt; \n  arrange(vst, grp) |&gt; \n  mutate(res = res) |&gt; \n  arrange(vst, id2)\n\ntrial[12, 4] &lt;- NA\n\n\n\n\n# A tibble: 12 × 4\n   id2   vst   grp     res\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA"
  },
  {
    "objectID": "pres_r4med_mod/index.html#notice",
    "href": "pres_r4med_mod/index.html#notice",
    "title": "R for Medical Research 6",
    "section": "Notice",
    "text": "Notice\n\n\n\nres &lt;- c(rnorm(3, 10, 1), \n         rnorm(3, 10, 1), \n         rnorm(3, 12, 1), \n         rnorm(3, 17, 1))\n\n\n\n# A tibble: 12 × 4\n   id2   vst   grp     res\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 id1   vst1  trt    8.03\n 2 id2   vst1  crl    9.44\n 3 id3   vst1  trt   10.7 \n 4 id4   vst1  crl   11.8 \n 5 id5   vst1  trt    9.53\n 6 id6   vst1  crl   10.5 \n 7 id1   vst2  trt   16.3 \n 8 id2   vst2  crl   10.9 \n 9 id3   vst2  trt   16.4 \n10 id4   vst2  crl   11.8 \n11 id5   vst2  trt   15.3 \n12 id6   vst2  crl   NA   \n\n\n\nSince this is a toy dataset, we know the data generating process. All subjects start at visit one with a test result drawn from \\(N(10, 1)\\) distribution. The control subjects then have a followup visit from \\(N(12, 1)\\), while the treatment subjects are from \\(N(17, 1)\\). One control subject was lost to followup."
  },
  {
    "objectID": "pres_r4med_mod/index.html#reshape",
    "href": "pres_r4med_mod/index.html#reshape",
    "title": "R for Medical Research 6",
    "section": "Reshape",
    "text": "Reshape\nA simple way to handle this data is to just model the difference between visit 1 and visit 2. To do that, we need to pivot. Notice I name the difference res_diff.\n\ntrial_wide &lt;- \n  trial |&gt; \n  pivot_wider(names_from = vst, values_from = res) |&gt; \n  mutate(res_diff =  vst2 - vst1)\n\ntrial_wide\n\n# A tibble: 6 × 5\n  id2   grp    vst1  vst2 res_diff\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1 id1   trt    8.03  16.3  8.24   \n2 id2   crl    9.44  10.9  1.49   \n3 id3   trt   10.7   16.4  5.67   \n4 id4   crl   11.8   11.8 -0.00489\n5 id5   trt    9.53  15.3  5.79   \n6 id6   crl   10.5   NA   NA"
  },
  {
    "objectID": "pres_r4med_mod/index.html#first-model-1",
    "href": "pres_r4med_mod/index.html#first-model-1",
    "title": "R for Medical Research 6",
    "section": "First model 1",
    "text": "First model 1\nHere is the basic syntax for a linear model. We can save the model to a variable.\nWe use a “formula syntax” to write our model down. res_diff ~ grp says, predict the mean of the pre-post difference as a function of the group.\n\nmod1 &lt;- lm(res_diff ~ grp, data = trial_wide)\n\nmod1\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nCoefficients:\n(Intercept)       grptrt  \n     0.7416       5.8242"
  },
  {
    "objectID": "pres_r4med_mod/index.html#first-model-2",
    "href": "pres_r4med_mod/index.html#first-model-2",
    "title": "R for Medical Research 6",
    "section": "First model 2",
    "text": "First model 2\nNotice that in this short summary, the lm() function appends the effect class trt (as opposed to the reference class crl) to the exposure variable, grp, so we get grptrt. The coefficient is 5.82. This estimate is close to the “difference of difference” we expect. The difference between\n\\((N_{vst2,trt}(17, 1) - N_{vst1,trt}(10, 1))\\) and\n\\((N_{vst2,crl}(12, 1) - N_{vst1,crl}(10, 1))\\) equals\n\\(N(5, 4)\\)\n\nmod1 &lt;- lm(res_diff ~ grp, data = trial_wide)\n\nmod1\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nCoefficients:\n(Intercept)       grptrt  \n     0.7416       5.8242"
  },
  {
    "objectID": "pres_r4med_mod/index.html#model-object",
    "href": "pres_r4med_mod/index.html#model-object",
    "title": "R for Medical Research 6",
    "section": "Model Object",
    "text": "Model Object\nThe model object bundles several pieces of our model. Many of these have “accessor” functions, or you can just use the $ to access them.\n\nmod1 |&gt; names()\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"na.action\"     \"contrasts\"     \"xlevels\"       \"call\"         \n[13] \"terms\"         \"model\"        \n\nmod1 |&gt; coef()\n\n(Intercept)      grptrt \n  0.7415647   5.8242449 \n\nmod1$coefficients\n\n(Intercept)      grptrt \n  0.7415647   5.8242449"
  },
  {
    "objectID": "pres_r4med_mod/index.html#summary-1",
    "href": "pres_r4med_mod/index.html#summary-1",
    "title": "R for Medical Research 6",
    "section": "Summary 1",
    "text": "Summary 1\nThe most common way to inspect the model is to use the summary() function. Note the output is too large.\n\nmod1 |&gt; summary()\n\n\nCall:\nlm(formula = res_diff ~ grp, data = trial_wide)\n\nResiduals:\n      1       2       3       4       5 \n 1.6719  0.7465 -0.8922 -0.7465 -0.7797 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept)   0.7416     0.9411   0.788   0.4882  \ngrptrt        5.8242     1.2149   4.794   0.0173 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.331 on 3 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.8845,    Adjusted R-squared:  0.846 \nF-statistic: 22.98 on 1 and 3 DF,  p-value: 0.01727"
  },
  {
    "objectID": "pres_r4med_mod/index.html#summary-2",
    "href": "pres_r4med_mod/index.html#summary-2",
    "title": "R for Medical Research 6",
    "section": "Summary 2",
    "text": "Summary 2\nThis raises the related issue that in research we often we want to compare many models at once. Maybe we want to see which of many blood labs has the strongest effect on mortality. Or maybe we want to see which model explains the most variation across many subgroups or units.\nOut of the box, R isn’t too great at “workflow” like this. But some great packages make it easy."
  },
  {
    "objectID": "pres_r4med_mod/index.html#measures",
    "href": "pres_r4med_mod/index.html#measures",
    "title": "R for Medical Research 6",
    "section": "Measures",
    "text": "Measures\nThere are two basic classes of measures associated with a model:\n\neffect estimates\nfit metrics"
  },
  {
    "objectID": "pres_r4med_mod/index.html#extract",
    "href": "pres_r4med_mod/index.html#extract",
    "title": "R for Medical Research 6",
    "section": "Extract",
    "text": "Extract\nEach of these can be extracted in a convenient tibble form from the model object with the {broom} package and the functions tidy() and glance(). Why bother? Because we can treat our model measures like data measures and group measures together from multiple models and see how they compare.\n\nlibrary(broom)\n\ntidy(mod1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)    0.742     0.941     0.788  0.488 \n2 grptrt         5.82      1.21      4.79   0.0173\n\nglance(mod1)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.885         0.846  1.33      23.0  0.0173     1  -7.25  20.5  19.3\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "pres_r4med_mod/index.html#join-on-more-information",
    "href": "pres_r4med_mod/index.html#join-on-more-information",
    "title": "R for Medical Research 6",
    "section": "Join on more information",
    "text": "Join on more information\nLet’s make a second model. This time we will grab some covariates from the demo object. Notice that one id is missing information.\n\ntrial_joint &lt;- \n  trial_wide |&gt; \n  left_join(demo, by = c(\"id2\" = \"id\")) |&gt; \n  mutate(age = (dod - dob)/lubridate::dyears(1))\n\ntrial_joint\n\n# A tibble: 6 × 9\n  id2   grp    vst1  vst2 res_diff dob        dod        weight   age\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 id1   trt    8.03  16.3  8.24    1999-06-28 2016-08-16   167.  17.1\n2 id2   crl    9.44  10.9  1.49    1999-01-14 2016-08-31   168.  17.6\n3 id3   trt   10.7   16.4  5.67    1999-07-14 2016-01-14   176.  16.5\n4 id4   crl   11.8   11.8 -0.00489 1999-11-02 2016-06-01   172.  16.6\n5 id5   trt    9.53  15.3  5.79    1999-04-28 2016-03-30   172.  16.9\n6 id6   crl   10.5   NA   NA       NA         NA            NA   NA"
  },
  {
    "objectID": "pres_r4med_mod/index.html#second-model",
    "href": "pres_r4med_mod/index.html#second-model",
    "title": "R for Medical Research 6",
    "section": "Second model",
    "text": "Second model\nmod2 is the same, except we are using augmented data, and we are adding the weight covariate from the demo data. The formula syntax is meant to resemble the mathematical formula.\n\nmod2 &lt;- lm(res_diff ~ grp + weight, data = trial_joint)\n\nmod2\n\n\nCall:\nlm(formula = res_diff ~ grp + weight, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_r4med_mod/index.html#interactions",
    "href": "pres_r4med_mod/index.html#interactions",
    "title": "R for Medical Research 6",
    "section": "Interactions",
    "text": "Interactions\nThe : in a formula is for interactions; the * in a formula is for crossing. Notice these two are equivalent\n\nlm(res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + age + weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095  \n\nlm(res_diff ~ grp + weight*age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age   weight:age  \n -1386.3409       6.3931       8.2159      86.0096      -0.5095"
  },
  {
    "objectID": "pres_r4med_mod/index.html#powers",
    "href": "pres_r4med_mod/index.html#powers",
    "title": "R for Medical Research 6",
    "section": "Powers",
    "text": "Powers\nThe ^x crosses something with itself x many times. For a single continuous variable, this is equivalent to polynomial regression.\n\nlm(res_diff ~ grp + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918  \n\nlm(res_diff ~ grp + weight + weight^2, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight + weight^2, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight  \n    50.2858       6.3431      -0.2918"
  },
  {
    "objectID": "pres_r4med_mod/index.html#removing",
    "href": "pres_r4med_mod/index.html#removing",
    "title": "R for Medical Research 6",
    "section": "Removing",
    "text": "Removing\nFinally, the - in a formula removes that term.\n\nlm(res_diff ~ grp + weight*age - weight:age, data = trial_joint)\n\n\nCall:\nlm(formula = res_diff ~ grp + weight * age - weight:age, data = trial_joint)\n\nCoefficients:\n(Intercept)       grptrt       weight          age  \n     46.846        6.352       -0.282        0.104"
  },
  {
    "objectID": "pres_r4med_mod/index.html#comparison-to-stata",
    "href": "pres_r4med_mod/index.html#comparison-to-stata",
    "title": "R for Medical Research 6",
    "section": "Comparison to Stata",
    "text": "Comparison to Stata\n\n\n\nStata\nR\n\n\n\n\ny x1 x2\ny ~ x1 + x2\n\n\ny x1,nocons\ny ~ 0 + x1\n\n\ny c.x1#c.x2\ny ~ x1:x2\n\n\ny c.x1##c.x2\ny ~ x1*x2"
  },
  {
    "objectID": "pres_r4med_mod/index.html#comparison",
    "href": "pres_r4med_mod/index.html#comparison",
    "title": "R for Medical Research 6",
    "section": "Comparison",
    "text": "Comparison\nNow that we have two models, we can keep everything is organized in a tibble, and we can readily make comparisons.\n\nmod1_coef &lt;- tidy(mod1) |&gt; mutate(mod = \"mod1\")\nmod2_coef &lt;- tidy(mod2) |&gt; mutate(mod = \"mod2\")\ncoefs &lt;- bind_rows(mod1_coef, mod2_coef) |&gt; relocate(mod)\ncoefs\n\n# A tibble: 5 × 6\n  mod   term        estimate std.error statistic p.value\n  &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 mod1  (Intercept)    0.742    0.941      0.788 0.488  \n2 mod1  grptrt         5.82     1.21       4.79  0.0173 \n3 mod2  (Intercept)   50.3     13.8        3.65  0.0676 \n4 mod2  grptrt         6.34     0.563     11.3   0.00779\n5 mod2  weight        -0.292    0.0811    -3.60  0.0694 \n\ncoefs |&gt; filter(term == \"grptrt\")\n\n# A tibble: 2 × 6\n  mod   term   estimate std.error statistic p.value\n  &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 mod1  grptrt     5.82     1.21       4.79 0.0173 \n2 mod2  grptrt     6.34     0.563     11.3  0.00779"
  },
  {
    "objectID": "pres_r4med_mod/index.html#comparison-2",
    "href": "pres_r4med_mod/index.html#comparison-2",
    "title": "R for Medical Research 6",
    "section": "Comparison 2",
    "text": "Comparison 2\nLikewise for metrics\n\nmod1_met &lt;- glance(mod1) |&gt; mutate(mod = \"mod1\")\nmod2_met &lt;- glance(mod2) |&gt; mutate(mod = \"mod2\")\nmets &lt;- bind_rows(mod1_met, mod2_met) |&gt; relocate(mod)\nmets\n\n# A tibble: 2 × 13\n  mod   r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n  &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 mod1      0.885         0.846 1.33       23.0  0.0173     1  -7.25  20.5  19.3\n2 mod2      0.985         0.969 0.596      63.7  0.0155     2  -2.22  12.4  10.9\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\nmets |&gt; select(mod, r.squared, p.value, df)\n\n# A tibble: 2 × 4\n  mod   r.squared p.value    df\n  &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 mod1      0.885  0.0173     1\n2 mod2      0.985  0.0155     2"
  },
  {
    "objectID": "pres_r4med_mod/index.html#better-style",
    "href": "pres_r4med_mod/index.html#better-style",
    "title": "R for Medical Research 6",
    "section": "Better style",
    "text": "Better style\nCreating intermediate variables like mod1_met and mod2_met make clutter and is usually bad form. A better, more advanced approach is to apply a function on each object in a list. Then we can bind together all the results. More on this later.\n\nlist(\"mod1\" = mod1, \n     \"mod2\" = mod2) |&gt; \n  map(tidy) |&gt; \n  list_rbind(names_to = \"mod\")\n\n# A tibble: 5 × 6\n  mod   term        estimate std.error statistic p.value\n  &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 mod1  (Intercept)    0.742    0.941      0.788 0.488  \n2 mod1  grptrt         5.82     1.21       4.79  0.0173 \n3 mod2  (Intercept)   50.3     13.8        3.65  0.0676 \n4 mod2  grptrt         6.34     0.563     11.3   0.00779\n5 mod2  weight        -0.292    0.0811    -3.60  0.0694"
  },
  {
    "objectID": "pres_r4med_mod/index.html#presentation-1",
    "href": "pres_r4med_mod/index.html#presentation-1",
    "title": "R for Medical Research 6",
    "section": "Presentation 1",
    "text": "Presentation 1\nFrom here, it is very easy to display our models in a variety of formats.\n\nmets |&gt; \n  select(mod, r.squared, p.value, df) |&gt; \n  knitr::kable(digits = 3, \"html\")\n\n\n\n\nmod\nr.squared\np.value\ndf\n\n\n\n\nmod1\n0.885\n0.017\n1\n\n\nmod2\n0.985\n0.015\n2"
  },
  {
    "objectID": "pres_r4med_mod/index.html#presentation-2",
    "href": "pres_r4med_mod/index.html#presentation-2",
    "title": "R for Medical Research 6",
    "section": "Presentation 2",
    "text": "Presentation 2\nFrom here, it is very easy to display our models in a variety of formats.\n\ncoefs |&gt; \n  ggplot(aes(x = estimate, y = p.value, color = mod, shape = term)) +\n  geom_point(size = 4)"
  }
]